{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. index.md # The documentation homepage. ... # Other markdown pages, images and other files. Table of contents General CS2203: DATABASES 1 Table of contents (detailed) HOME General Advanced Design Patterns OOP Algorithms algorithms algorithms on graphs freecodeCamp algorithms MIT 6006 quick find quick union union find APIs API list Packages DataBases MongoDB Mongoose Redis Sequalize Data Structures binary trees dataStructures dis-joint sets hash tables heap linked lists priority queue queue stack trees Design CSS FrameWorks Bootstrap React Redux Interviews Javascript General Javascript OOP references Javascript Arrays Date Time Functions JS General Node cli Numbers Objects Strings Node js Node Argv stdout Programming Languages go python Software Development agile requirments terminoloy Think thinking logically games Tools bash docker git grunt linux shell scripting vim windows Web dom fonts meta pwa seo urls CS2203: DATABASES 1 Unit1: Databases and Relational Data Model Unit 2: Conceptual Data Model","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#table-of-contents","text":"General CS2203: DATABASES 1","title":"Table of contents"},{"location":"#table-of-contents-detailed","text":"HOME General Advanced Design Patterns OOP Algorithms algorithms algorithms on graphs freecodeCamp algorithms MIT 6006 quick find quick union union find APIs API list Packages DataBases MongoDB Mongoose Redis Sequalize Data Structures binary trees dataStructures dis-joint sets hash tables heap linked lists priority queue queue stack trees Design CSS FrameWorks Bootstrap React Redux Interviews Javascript General Javascript OOP references Javascript Arrays Date Time Functions JS General Node cli Numbers Objects Strings Node js Node Argv stdout Programming Languages go python Software Development agile requirments terminoloy Think thinking logically games Tools bash docker git grunt linux shell scripting vim windows Web dom fonts meta pwa seo urls CS2203: DATABASES 1 Unit1: Databases and Relational Data Model Unit 2: Conceptual Data Model","title":"Table of contents (detailed)"},{"location":"knowledge-base/books/","text":"list of recommended books git pro","title":"list of recommended books"},{"location":"knowledge-base/books/#list-of-recommended-books","text":"git pro","title":"list of recommended books"},{"location":"knowledge-base/cs2203-database1/","text":"Databases 1 CS-2203 Unit1: Databases and Relational Data Model Unit 2: Conceptual Data Model","title":"Databases 1 CS-2203"},{"location":"knowledge-base/cs2203-database1/#databases-1-cs-2203","text":"Unit1: Databases and Relational Data Model Unit 2: Conceptual Data Model","title":"Databases 1 CS-2203"},{"location":"knowledge-base/cs2203-database1/unit1/","text":"Unit1: Databases and Relational Data Model Unit1: Databases and Relational Data Model Reading Types of information models Career paths with databases Chapter 2: Relational data model Basic concepts 1.attributes 2. domain 3. Tuples 4. relations 5. Schemas 6. keys 6-1 Candidate keys 6-2 primary keys 6-3 Foreign keys Relational Data Model Constrains Entity integrity constrains Referential integrity constrains In Case of deleting / Updating a tuple that has a FK, there are 3 possibilities: Semantic integrity constrains domain constrains NULL constrains UNIQUE constrains check constrains Relational Algebra Reading Database Fundamentals, IBM. chapter 1 & 2 Database design, chapters 1 to 7. Types of information models Network Model (CODASYL). Hierarchial Model (IMS). Relational. Entity-Relationship (ER). Extended Relational. Semantic. Object-oriented. Object-relational. semi-structured (XML). Career paths with databases data architect. database architect. database administrator (DBA). applications developer. Chapter 2: Relational data model Basic concepts 1.attributes represent column in a table,field in the object. data characteristics of the object. all attributes hve values. 2. domain set of all possible values for an attribute. these values MUST be atomic : 1. non-decomposable. 2. smallest possible unit of dat that can not be divided. eg: domain of Boolean attribute is [true, false]. the comparison between the values of 2 attributes is only possible if the 2 attributes have the same domain, otherwise, the comparison does not make sense. domains a re not explicitly stored in the DB, but they MUST be part of the DB definition. each attribute definition MUST include a reference to its domain definition in the DB definition part. 3. Tuples ordered set of values that represent data in the relation. represents: row in a table, record in a file. 4. relations relations represent tables. each relation has a header and body. relation header: fixed set of attributes, represent the head of a table, and each of theses attributes corresponds to a domain. relation body: set of tuples represent the table rows, each tuple has value corresponds ot the attribute in the header. relation Degree : number of attribute in the header, eg. unary, binary, nary... relation cardinality : number of tuples in the relation = rows count, changes overtime (with adding/removing records). relation instance : the state of a relation at a specific moment of time. relation properties : there are no duplicate tuples. tuples are unordered. attributes are unordered. attribute values are atomic. 5. Schemas formal description for all DB relations and relationships between them. 6. keys keys are identifiers for the tuple. used for: enforce rules and constrains on DB. constrains are important for maintaining consistency and correctness of DB. DBMS are responsible for maintaining keys. keys types : candidate keys. primary keys (PK). foreign keys (FK). 6-1 Candidate keys unique identifier for the tuples of a relation, that consists of one or more attributes. if no candidate keys have been specified, the set of k = (all tuple values), might work as a candidate key if and only if: K is unique overtime (no other tuple with the same values). minimality: none of the tuple values can be discarded without destroying the uniqueness property. using Data Definition Language (DDL) you can specify candidate keys by adding UNIQUE keyword to the definition of the attribute. a relation can have multiple candidate keys: one key -> primary key. other keys -> alternate keys. 6-2 primary keys candidate key that has been chosen to represent the relationship. must be: 1. unique. 2. not null. primary key is an attribute that has no meaning in the real life, but it always exist and unique, thus it can be named: surrogate key. artificial key. 6-3 Foreign keys an attribute that references a primary key from another relation. FK and its correspondents PK (from the other relation) MUST have the same domain. Relational Data Model Constrains entity integrity constrains. referential integrity constrains. semantic integrity constrains. Entity integrity constrains no attribute that participates in PK can have NULL value. in real life: an entity with NULL PK means that this entity does not exist. NULL value means on of the following: absence of value. undefined value. value that does not belong to the attribute domain. Referential integrity constrains for every value of FK in a relation R1, there MUST be a tuple from the other relation R2 so that, PK (R2) = FK (R1). FK with NULL value, means that the relationship between the this tuple and the other relation does not exist. In Case of deleting / Updating a tuple that has a FK, there are 3 possibilities: CASCADE : the operation cascades to the record of the second relations and affects the tuple that has been referenced with FK . RESTRICTS : prevent the operation from happening on all tuples with FK that is not NULL, so the operation is rejected. NULLIFIES : update the record from the second relation that has been referenced by the FK, set the value that points to the affected tuple to be NULL . Semantic integrity constrains includes: domain constrains. null constrains. unique constrains. check constrains. domain constrains all values of an attribute MUST belong to its domain. domain constrains include: Format constrains : all values must match a specific pattern, eg. regex, 6 digits... Range Constrains : all values must be in a specific range, eg. number of employees in one department can not exceed the number of employees in the whole company. NULL constrains value can not be null. DEFAULT keyword can be used to give the a attribute a default value in the case of NULL. UNIQUE constrains no 2 tuples can have the same value for this attribute. NULL is a valid unique value. check constrains a condition in a relation data that always checked when the data is manipulated. when defining the check constrains you can add instructions that can be executed when the check fails, and if these instructions are not provided, the operation will be rejected. Relational Algebra set of operators to manipulate relations. each operator takes one or more relations as INPUT and returns a new relation as OUTPUT . operators are divided into: traditional -------------- special 1. union 1. select 2. intersection 2. project 3. difference 3. join 4. cartesian product 4. divide operator definition of results characteristics UNION - R1 UNION R2 = set of all tuples that belongs to R1, or R2, or both 1. associative. 2. commutative 3. R1, R2 must be union-compatible - INTERSECTION - R1 INTERSECT R2 = set of tuples that belong to Both relations. same as UNION - DIFFERENCE - R1 DIFF R2 = all tuples that belongs to R1, AND NOT belong to R2. 1. R1, R2 must be union-compatible - CARTESIAN PRODUCT - R1 times R2 = set of all tuples where each tuple of the output results 1. R1, R2 must be union-compatible from a concatenation operation between one tuple from R1, and correspondents tuple from R2. - if R1 si of degree n, R2 of degree m => result is of degree n+m - SELECTION - takes one relation AND one condition as input 1. result degree is same as input relation - selects all tuples from the relation that satisfies the input condition. 2. result cardinality is less or equal to the input. - PROJECTION - takes one relation AND list of attributes as input. - returns subset of tuples of a relation with duplicate tuples are eliminated. - JOIN - concatenates 2 relations based on a joining condition or predicate. - theta-join : join result MUST must includes 2 identical attributes (one from each relation), when one attribute is eliminated, it is natural join . when some tuples of 2 relations don't have matching tuple => outer join left outer join : result includes all tuples of R but not all tuples of L right outer join : result includes all tuples of L but not all tuples of R full outer join : result includes all tuples of R AND ALL tuples of L - DIVISION - divides a relation R1 (degree n+m), and relation R2 degree(m) result of degree n - the attribute we divide on should be on the same domain. - we divide on the attribute (n+i) from R1, and i from R2. - results contains the tuples of R2 that belongs to R1. - result cardinality equals cardinality of R2.","title":"Unit1: Databases and Relational Data Model"},{"location":"knowledge-base/cs2203-database1/unit1/#unit1-databases-and-relational-data-model","text":"Unit1: Databases and Relational Data Model Reading Types of information models Career paths with databases Chapter 2: Relational data model Basic concepts 1.attributes 2. domain 3. Tuples 4. relations 5. Schemas 6. keys 6-1 Candidate keys 6-2 primary keys 6-3 Foreign keys Relational Data Model Constrains Entity integrity constrains Referential integrity constrains In Case of deleting / Updating a tuple that has a FK, there are 3 possibilities: Semantic integrity constrains domain constrains NULL constrains UNIQUE constrains check constrains Relational Algebra","title":"Unit1: Databases and Relational Data Model"},{"location":"knowledge-base/cs2203-database1/unit1/#reading","text":"Database Fundamentals, IBM. chapter 1 & 2 Database design, chapters 1 to 7.","title":"Reading"},{"location":"knowledge-base/cs2203-database1/unit1/#types-of-information-models","text":"Network Model (CODASYL). Hierarchial Model (IMS). Relational. Entity-Relationship (ER). Extended Relational. Semantic. Object-oriented. Object-relational. semi-structured (XML).","title":"Types of information models"},{"location":"knowledge-base/cs2203-database1/unit1/#career-paths-with-databases","text":"data architect. database architect. database administrator (DBA). applications developer.","title":"Career paths with databases"},{"location":"knowledge-base/cs2203-database1/unit1/#chapter-2-relational-data-model","text":"","title":"Chapter 2: Relational data model"},{"location":"knowledge-base/cs2203-database1/unit1/#basic-concepts","text":"","title":"Basic concepts"},{"location":"knowledge-base/cs2203-database1/unit1/#1attributes","text":"represent column in a table,field in the object. data characteristics of the object. all attributes hve values.","title":"1.attributes"},{"location":"knowledge-base/cs2203-database1/unit1/#2-domain","text":"set of all possible values for an attribute. these values MUST be atomic : 1. non-decomposable. 2. smallest possible unit of dat that can not be divided. eg: domain of Boolean attribute is [true, false]. the comparison between the values of 2 attributes is only possible if the 2 attributes have the same domain, otherwise, the comparison does not make sense. domains a re not explicitly stored in the DB, but they MUST be part of the DB definition. each attribute definition MUST include a reference to its domain definition in the DB definition part.","title":"2. domain"},{"location":"knowledge-base/cs2203-database1/unit1/#3-tuples","text":"ordered set of values that represent data in the relation. represents: row in a table, record in a file.","title":"3. Tuples"},{"location":"knowledge-base/cs2203-database1/unit1/#4-relations","text":"relations represent tables. each relation has a header and body. relation header: fixed set of attributes, represent the head of a table, and each of theses attributes corresponds to a domain. relation body: set of tuples represent the table rows, each tuple has value corresponds ot the attribute in the header. relation Degree : number of attribute in the header, eg. unary, binary, nary... relation cardinality : number of tuples in the relation = rows count, changes overtime (with adding/removing records). relation instance : the state of a relation at a specific moment of time. relation properties : there are no duplicate tuples. tuples are unordered. attributes are unordered. attribute values are atomic.","title":"4. relations"},{"location":"knowledge-base/cs2203-database1/unit1/#5-schemas","text":"formal description for all DB relations and relationships between them.","title":"5. Schemas"},{"location":"knowledge-base/cs2203-database1/unit1/#6-keys","text":"keys are identifiers for the tuple. used for: enforce rules and constrains on DB. constrains are important for maintaining consistency and correctness of DB. DBMS are responsible for maintaining keys. keys types : candidate keys. primary keys (PK). foreign keys (FK).","title":"6. keys"},{"location":"knowledge-base/cs2203-database1/unit1/#6-1-candidate-keys","text":"unique identifier for the tuples of a relation, that consists of one or more attributes. if no candidate keys have been specified, the set of k = (all tuple values), might work as a candidate key if and only if: K is unique overtime (no other tuple with the same values). minimality: none of the tuple values can be discarded without destroying the uniqueness property. using Data Definition Language (DDL) you can specify candidate keys by adding UNIQUE keyword to the definition of the attribute. a relation can have multiple candidate keys: one key -> primary key. other keys -> alternate keys.","title":"6-1 Candidate keys"},{"location":"knowledge-base/cs2203-database1/unit1/#6-2-primary-keys","text":"candidate key that has been chosen to represent the relationship. must be: 1. unique. 2. not null. primary key is an attribute that has no meaning in the real life, but it always exist and unique, thus it can be named: surrogate key. artificial key.","title":"6-2 primary keys"},{"location":"knowledge-base/cs2203-database1/unit1/#6-3-foreign-keys","text":"an attribute that references a primary key from another relation. FK and its correspondents PK (from the other relation) MUST have the same domain.","title":"6-3 Foreign keys"},{"location":"knowledge-base/cs2203-database1/unit1/#relational-data-model-constrains","text":"entity integrity constrains. referential integrity constrains. semantic integrity constrains.","title":"Relational Data Model Constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#entity-integrity-constrains","text":"no attribute that participates in PK can have NULL value. in real life: an entity with NULL PK means that this entity does not exist. NULL value means on of the following: absence of value. undefined value. value that does not belong to the attribute domain.","title":"Entity integrity constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#referential-integrity-constrains","text":"for every value of FK in a relation R1, there MUST be a tuple from the other relation R2 so that, PK (R2) = FK (R1). FK with NULL value, means that the relationship between the this tuple and the other relation does not exist.","title":"Referential integrity constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#in-case-of-deleting-updating-a-tuple-that-has-a-fk-there-are-3-possibilities","text":"CASCADE : the operation cascades to the record of the second relations and affects the tuple that has been referenced with FK . RESTRICTS : prevent the operation from happening on all tuples with FK that is not NULL, so the operation is rejected. NULLIFIES : update the record from the second relation that has been referenced by the FK, set the value that points to the affected tuple to be NULL .","title":"In Case of deleting / Updating a tuple that has a FK, there are 3 possibilities:"},{"location":"knowledge-base/cs2203-database1/unit1/#semantic-integrity-constrains","text":"includes: domain constrains. null constrains. unique constrains. check constrains.","title":"Semantic integrity constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#domain-constrains","text":"all values of an attribute MUST belong to its domain. domain constrains include: Format constrains : all values must match a specific pattern, eg. regex, 6 digits... Range Constrains : all values must be in a specific range, eg. number of employees in one department can not exceed the number of employees in the whole company.","title":"domain constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#null-constrains","text":"value can not be null. DEFAULT keyword can be used to give the a attribute a default value in the case of NULL.","title":"NULL constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#unique-constrains","text":"no 2 tuples can have the same value for this attribute. NULL is a valid unique value.","title":"UNIQUE constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#check-constrains","text":"a condition in a relation data that always checked when the data is manipulated. when defining the check constrains you can add instructions that can be executed when the check fails, and if these instructions are not provided, the operation will be rejected.","title":"check constrains"},{"location":"knowledge-base/cs2203-database1/unit1/#relational-algebra","text":"set of operators to manipulate relations. each operator takes one or more relations as INPUT and returns a new relation as OUTPUT . operators are divided into: traditional -------------- special 1. union 1. select 2. intersection 2. project 3. difference 3. join 4. cartesian product 4. divide operator definition of results characteristics UNION - R1 UNION R2 = set of all tuples that belongs to R1, or R2, or both 1. associative. 2. commutative 3. R1, R2 must be union-compatible - INTERSECTION - R1 INTERSECT R2 = set of tuples that belong to Both relations. same as UNION - DIFFERENCE - R1 DIFF R2 = all tuples that belongs to R1, AND NOT belong to R2. 1. R1, R2 must be union-compatible - CARTESIAN PRODUCT - R1 times R2 = set of all tuples where each tuple of the output results 1. R1, R2 must be union-compatible from a concatenation operation between one tuple from R1, and correspondents tuple from R2. - if R1 si of degree n, R2 of degree m => result is of degree n+m - SELECTION - takes one relation AND one condition as input 1. result degree is same as input relation - selects all tuples from the relation that satisfies the input condition. 2. result cardinality is less or equal to the input. - PROJECTION - takes one relation AND list of attributes as input. - returns subset of tuples of a relation with duplicate tuples are eliminated. - JOIN - concatenates 2 relations based on a joining condition or predicate. - theta-join : join result MUST must includes 2 identical attributes (one from each relation), when one attribute is eliminated, it is natural join . when some tuples of 2 relations don't have matching tuple => outer join left outer join : result includes all tuples of R but not all tuples of L right outer join : result includes all tuples of L but not all tuples of R full outer join : result includes all tuples of R AND ALL tuples of L - DIVISION - divides a relation R1 (degree n+m), and relation R2 degree(m) result of degree n - the attribute we divide on should be on the same domain. - we divide on the attribute (n+i) from R1, and i from R2. - results contains the tuples of R2 that belongs to R1. - result cardinality equals cardinality of R2.","title":"Relational Algebra"},{"location":"knowledge-base/cs2203-database1/unit2/","text":"Unit 2: Conceptual Data Model Table of contents Unit 2: Conceptual Data Model Table of contents terminology database model types of database model concepts of database model conceptional data model concepts Entity-Relationship model Entities and entities setts attribute relationship sets constraints Extension Intension Notes Entity-Relationship Modeling Principles relationships one-to-one relationships one-to-many relationships many-to-many relationships Involuted (recursive) relationships arc mistakes in data modeling database normalization References when working with DBs, there are three modeling terms [1] : conceptional modeling: cares about information seen by the business world. logical modeling: based on a mathematical model, presents information in a fully normalized matter where there is no duplication of data. physical modeling: implements a given logical model specifically to a particular DB product or version. terminology model : an abstraction or representation of a real world object/problem that reveals all details of interest to the user. ERD : Entity Relationship Diagram database model integrated collection of concepts for a data description, data relationships, data semantics and constraints. used to represent metadata about the DB and to describe its schema [1] . types of database model External data model : used for viewing representation of every user. also called Universe of Discourse . represents Record-based Logical Model . Conceptional Data Model : used for a general view of the data and it is independent of the DBMS . represents Object-based Logical Model . Internal Data Model : used for a translation of the conceptional model to a specific DBMS. represents Physical Data Model . Relational Database Model : the most used model today. it is simple and theoretically sound. used for building business rules system . represents Entity-Relationship Model based on the conceptional model . concepts of database model structural component : rules for the structure of database itself. manipulation component : defines the operations that can be applied on this database.. data integrity component : rules that guarantee the correctness of data. conceptional data model concepts first step of data modeling, represents a mental image of real-life object/problem. it is not specific to a database, describe things that organization wants to collect and the relationships between them. steps of conceptional data model: draw Entity-Relationship diagram. define integrity constraints. review the final model: remove M:N relationships. remove recursive relationships. remove relationships with attributes. remove 1:1 relationships which are normally not necessary. Entity-Relationship model concepts of Entity-Relationship model: Entity set attribute relationship set constraints attribute domain extension intension Entities and entities setts entity set : is a set of entities of thew same type that share the same properties. entity : is an instance of entity set, it is a self-determining and distinguishable item that can be: concrete. insubstantial. an occurrence. Note: In the Logical Model, entities are called tuples, and entity sets are called relations. . Depending on the context, a given noun like TEACHER could be used as an entity, or an entity set. For example, if you need different types of people, such as TEACHER or STUDENT, you will create an entity set called PERSON with the entities TEACHER and STUDENT [1] . attribute item that describes a property of an entity set, each attribute can have one value for each instance of the entity set. in physical model an attribute is a named column with a domain. Types of attributes: Simple (atomic) : has single component. eg. Boolean has true/false. Composite : consists of multiple components. eg. Name has 2 components, lastname + firstname. Single-Valued : an attribute that has one value for one entity, eg. Title. Multi-Valued : an attribute that has multiple values for one entity, eg. phoneNumber, a person might have multiple phone numbers. since an attribute can have only one value for each instance of the entity set , when encountering multi-valued attribute we need to transfer it to another entity set . Derived : derived attribute has its value derived or computed form another attribute. eg. NumberOfPersons. the derived attribute is not part of a table , but it is included fro clarity or design purposes. Unstable : have values that always change, eg. NumberOfFollowers for a user. Stable : values that rarely change. eg. Name. stable attributes are favourited over unstable ones. Mandatory : must have a value. Optional : might be null. Unique Identifier : ID. key within Logical Model . there are several types of keys: candidate keys . primary keys : they should be: stable. primary key value should never change. minimal. primary key should be composed of the minimal number of fields. alternate keys : all candidate keys that don't participate in the primary key. surrogate key : a primary key that does not exist on real-world attribute, this kind of keys should be avoided since it: increases the data size. does not hold data is important to the entity. simple keys : have a single attribute. Composite keys : keys that has multiple attributes. Foreign keys . relationship sets Relationship set : set of relationships between set of entities. usually a verb . relationship : is an instance of relationship set and establishes an association between entities that are related. constraints types of constraints: cardinalities : based on the number of possible relationship sets for every entity set. can be: one-to-one (1:1) . one-to-many(1:M) . many-to-many(M:M) . these relationships are not supported by the relational model and must be resolved by splitting into two 1:M relationships . participation cardinalities (optionality) : specifies wether the existence of an entity depends on the being related to another entity set via the relationship set. can be: Total or Mandatory : each entity set must participate in a relationship and can not exist without that participation. Partial or Optional : each entity set might participate in a relationship or not. subsets and supersets :When a group of instances has special properties such as attributes or relationship sets that exist only for that group, it makes sense to subdivide an entity set into subsets. The entity set is a superset called a parent. Each group is a subset called a child. eg. An entity set PERSON can be divided in subsets STUDENT and TEACHER (photo below). Hierarchy : represents an ordered set of items. Unary Relationship sets : the same entity set participates multiple times in the same relationship set, also known as recursive relationship set . History : the constraint can specify the end date to always be later than the start date for a given attribute. In the physical model you can use a CHECK constraint for this purpose. Extension Data in a database at a particular point in time is called an extension of the database. Extension refers to the current set of tuples in a relation, it is an instance of the record sets and the relationship sets between them. Intension Intension or schema is the logical model of a database and is represented by entity sets which holds: structure and constraints : An instance describes and constrains the structure of tuples it is allowed to contain. An instance is represented by entity sets, and is the model of a database. manipulation : Data manipulation operations on tuples are allowed only if they observe the expressed intensions of the affected relations. Notes You need also to specify if the relationship set is strong (identifying) or weak (non-identifying) . Weak relationships are connections between a strong entity set and weak entity set. Strong relationships are connections between two strong entities. identifying and non-identifying respectively. An identifying relationship set is selected to specify that the relationship set is one in which one of the child entities is also a dependent entity. Non-Identifying relationship set is selected to specify that the relationship set is one in which both entities are independent. Entity-Relationship Modeling Principles terminology [2] : # ATTRIBUTE_NAME : attribute is part of the primary key. * ATTRIBUTE_NAME : attribute is required. o ATTRIBUTE_NAME : attribute is optional. ___ : has. MAY have zero or more of the other relation. : valid for. MUST belong to one valid tuple of the other relation. relationships one-to-one relationships mandatory-mandatory mandatory-mandatory. the diagram tells that a given PRODUCT MUST come form one and only one SUPPLIER PRODUCT. a given SUPPLIER PRODUCT MUST be the origin for one and only one PRODUCT. this is a deadlock, since we will not able to create a PRODUCT until we have a a PRODUCT SUPPLIER. AND we can not create a PRODUCT SUPPLIER until we have a PRODUCT. mandatory-optional. PRODUCT MAY come form one and only one PRODUCT SUPPLIER, however, a given PRODUCT SUPPLIER MUST be the origin of one and only one PRODUCT. optional-optional. a PRODUCT MAY come one and only one PRODUCT SUPPLIER, a PRODUCT SUPPLIER MAY be the origin of one and only one PRODUCT. one-to-one relationships are a signal that you have different entities that are probably the same entity. one-to-many relationships mandatory-mandatory ORDER MUST belong to one and only one CUSTOMER, CUSTOMER MUST place one or more orders. this also a deadlock, since you can't create CUSTOMER without ORDER or vise versa. mandatory-optional CUSTOMER MUST place one or more ORDERs, while an ORDER MAY belong to a CUSTOMER. this is a hard and rare business rule, and should be avoided. optional-optional this a weak relationship. CUSTOMER MAY place one or more ORDERs, while an ORDER MAY belong to one and only one CUSTOMER. this is called indecisive mode . optional-mandatory most useful relationship. CUSTOMER MAY have zero or more ORDERs, while an ORDER MUST belong to one and only one CUSTOMER. many-to-many relationships mandatory-mandatory this relationship is impossible . or called catch-22 . mandatory-optional needs to be resolved; analysis is unclear. optional-optional this is very useful. it is called intersection entity . NOTE: to resolve the optional-optional many-to-many relationship between CUSTOMER and ORDER, we need to represent a third table that joins the 2 relation. an example of such a relationship between BUSINESS CONTACT and CONTACT TYPE listed below. NOTE : means that the primary keys of both relations contributes to the primary key. so it is a composite primary key . Involuted (recursive) relationships one-to-one, optional-optional = allows for holding historical data. one-to-many, optional-optional = classical hierarchy. many-to-many, optional-optional = network structure, needs a join table . arc arc is a constraint that crosses to one or more relationships going into an entity, and indicates that the relationships in the arc are mutually exclusive. in the photo below, for any TRANSACTION, it MUST be valid for SHAREHOLDER OR a BUSINESS CONTACT, but not both at the same time . try to avoid arcs. mistakes in data modeling modeling with incompleteness. modeling with incomplete understanding of the business. database normalization Database normalization is the process of structuring a database, usually a relational database, in accordance with a series of so-called normal forms in order to reduce data redundancy and improve data integrity. It was first proposed by Edgar F. Codd as part of his relational model. FN1 (First Normal Form) : do not repeat attributes/groups of attribute, instead take them out to their own entity. final result of the case study: more info here: https://en.wikipedia.org/wiki/Database_normalization References [1] Sharma, N., Perniu, L., Chong, R. F., Iyer, A., Nandan, C., Mitea, A. C., Nonvinkere, M., & Danubianu, M. (2010). Databases fundamentals. Chapter 3 . [2] Pedersen, A. A. (n.d.). Entity relationship modeling - Principles.","title":"Unit 2: Conceptual Data Model"},{"location":"knowledge-base/cs2203-database1/unit2/#unit-2-conceptual-data-model","text":"","title":"Unit 2: Conceptual Data Model"},{"location":"knowledge-base/cs2203-database1/unit2/#table-of-contents","text":"Unit 2: Conceptual Data Model Table of contents terminology database model types of database model concepts of database model conceptional data model concepts Entity-Relationship model Entities and entities setts attribute relationship sets constraints Extension Intension Notes Entity-Relationship Modeling Principles relationships one-to-one relationships one-to-many relationships many-to-many relationships Involuted (recursive) relationships arc mistakes in data modeling database normalization References when working with DBs, there are three modeling terms [1] : conceptional modeling: cares about information seen by the business world. logical modeling: based on a mathematical model, presents information in a fully normalized matter where there is no duplication of data. physical modeling: implements a given logical model specifically to a particular DB product or version.","title":"Table of contents"},{"location":"knowledge-base/cs2203-database1/unit2/#terminology","text":"model : an abstraction or representation of a real world object/problem that reveals all details of interest to the user. ERD : Entity Relationship Diagram","title":"terminology"},{"location":"knowledge-base/cs2203-database1/unit2/#database-model","text":"integrated collection of concepts for a data description, data relationships, data semantics and constraints. used to represent metadata about the DB and to describe its schema [1] .","title":"database model"},{"location":"knowledge-base/cs2203-database1/unit2/#types-of-database-model","text":"External data model : used for viewing representation of every user. also called Universe of Discourse . represents Record-based Logical Model . Conceptional Data Model : used for a general view of the data and it is independent of the DBMS . represents Object-based Logical Model . Internal Data Model : used for a translation of the conceptional model to a specific DBMS. represents Physical Data Model . Relational Database Model : the most used model today. it is simple and theoretically sound. used for building business rules system . represents Entity-Relationship Model based on the conceptional model .","title":"types of database model"},{"location":"knowledge-base/cs2203-database1/unit2/#concepts-of-database-model","text":"structural component : rules for the structure of database itself. manipulation component : defines the operations that can be applied on this database.. data integrity component : rules that guarantee the correctness of data.","title":"concepts of database model"},{"location":"knowledge-base/cs2203-database1/unit2/#conceptional-data-model-concepts","text":"first step of data modeling, represents a mental image of real-life object/problem. it is not specific to a database, describe things that organization wants to collect and the relationships between them. steps of conceptional data model: draw Entity-Relationship diagram. define integrity constraints. review the final model: remove M:N relationships. remove recursive relationships. remove relationships with attributes. remove 1:1 relationships which are normally not necessary.","title":"conceptional data model concepts"},{"location":"knowledge-base/cs2203-database1/unit2/#entity-relationship-model","text":"concepts of Entity-Relationship model: Entity set attribute relationship set constraints attribute domain extension intension","title":"Entity-Relationship model"},{"location":"knowledge-base/cs2203-database1/unit2/#entities-and-entities-setts","text":"entity set : is a set of entities of thew same type that share the same properties. entity : is an instance of entity set, it is a self-determining and distinguishable item that can be: concrete. insubstantial. an occurrence. Note: In the Logical Model, entities are called tuples, and entity sets are called relations. . Depending on the context, a given noun like TEACHER could be used as an entity, or an entity set. For example, if you need different types of people, such as TEACHER or STUDENT, you will create an entity set called PERSON with the entities TEACHER and STUDENT [1] .","title":"Entities and entities setts"},{"location":"knowledge-base/cs2203-database1/unit2/#attribute","text":"item that describes a property of an entity set, each attribute can have one value for each instance of the entity set. in physical model an attribute is a named column with a domain. Types of attributes: Simple (atomic) : has single component. eg. Boolean has true/false. Composite : consists of multiple components. eg. Name has 2 components, lastname + firstname. Single-Valued : an attribute that has one value for one entity, eg. Title. Multi-Valued : an attribute that has multiple values for one entity, eg. phoneNumber, a person might have multiple phone numbers. since an attribute can have only one value for each instance of the entity set , when encountering multi-valued attribute we need to transfer it to another entity set . Derived : derived attribute has its value derived or computed form another attribute. eg. NumberOfPersons. the derived attribute is not part of a table , but it is included fro clarity or design purposes. Unstable : have values that always change, eg. NumberOfFollowers for a user. Stable : values that rarely change. eg. Name. stable attributes are favourited over unstable ones. Mandatory : must have a value. Optional : might be null. Unique Identifier : ID. key within Logical Model . there are several types of keys: candidate keys . primary keys : they should be: stable. primary key value should never change. minimal. primary key should be composed of the minimal number of fields. alternate keys : all candidate keys that don't participate in the primary key. surrogate key : a primary key that does not exist on real-world attribute, this kind of keys should be avoided since it: increases the data size. does not hold data is important to the entity. simple keys : have a single attribute. Composite keys : keys that has multiple attributes. Foreign keys .","title":"attribute"},{"location":"knowledge-base/cs2203-database1/unit2/#relationship-sets","text":"Relationship set : set of relationships between set of entities. usually a verb . relationship : is an instance of relationship set and establishes an association between entities that are related.","title":"relationship sets"},{"location":"knowledge-base/cs2203-database1/unit2/#constraints","text":"types of constraints: cardinalities : based on the number of possible relationship sets for every entity set. can be: one-to-one (1:1) . one-to-many(1:M) . many-to-many(M:M) . these relationships are not supported by the relational model and must be resolved by splitting into two 1:M relationships . participation cardinalities (optionality) : specifies wether the existence of an entity depends on the being related to another entity set via the relationship set. can be: Total or Mandatory : each entity set must participate in a relationship and can not exist without that participation. Partial or Optional : each entity set might participate in a relationship or not. subsets and supersets :When a group of instances has special properties such as attributes or relationship sets that exist only for that group, it makes sense to subdivide an entity set into subsets. The entity set is a superset called a parent. Each group is a subset called a child. eg. An entity set PERSON can be divided in subsets STUDENT and TEACHER (photo below). Hierarchy : represents an ordered set of items. Unary Relationship sets : the same entity set participates multiple times in the same relationship set, also known as recursive relationship set . History : the constraint can specify the end date to always be later than the start date for a given attribute. In the physical model you can use a CHECK constraint for this purpose.","title":"constraints"},{"location":"knowledge-base/cs2203-database1/unit2/#extension","text":"Data in a database at a particular point in time is called an extension of the database. Extension refers to the current set of tuples in a relation, it is an instance of the record sets and the relationship sets between them.","title":"Extension"},{"location":"knowledge-base/cs2203-database1/unit2/#intension","text":"Intension or schema is the logical model of a database and is represented by entity sets which holds: structure and constraints : An instance describes and constrains the structure of tuples it is allowed to contain. An instance is represented by entity sets, and is the model of a database. manipulation : Data manipulation operations on tuples are allowed only if they observe the expressed intensions of the affected relations.","title":"Intension"},{"location":"knowledge-base/cs2203-database1/unit2/#notes","text":"You need also to specify if the relationship set is strong (identifying) or weak (non-identifying) . Weak relationships are connections between a strong entity set and weak entity set. Strong relationships are connections between two strong entities. identifying and non-identifying respectively. An identifying relationship set is selected to specify that the relationship set is one in which one of the child entities is also a dependent entity. Non-Identifying relationship set is selected to specify that the relationship set is one in which both entities are independent.","title":"Notes"},{"location":"knowledge-base/cs2203-database1/unit2/#entity-relationship-modeling-principles","text":"terminology [2] : # ATTRIBUTE_NAME : attribute is part of the primary key. * ATTRIBUTE_NAME : attribute is required. o ATTRIBUTE_NAME : attribute is optional. ___ : has. MAY have zero or more of the other relation. : valid for. MUST belong to one valid tuple of the other relation.","title":"Entity-Relationship Modeling Principles"},{"location":"knowledge-base/cs2203-database1/unit2/#relationships","text":"","title":"relationships"},{"location":"knowledge-base/cs2203-database1/unit2/#one-to-one-relationships","text":"mandatory-mandatory mandatory-mandatory. the diagram tells that a given PRODUCT MUST come form one and only one SUPPLIER PRODUCT. a given SUPPLIER PRODUCT MUST be the origin for one and only one PRODUCT. this is a deadlock, since we will not able to create a PRODUCT until we have a a PRODUCT SUPPLIER. AND we can not create a PRODUCT SUPPLIER until we have a PRODUCT. mandatory-optional. PRODUCT MAY come form one and only one PRODUCT SUPPLIER, however, a given PRODUCT SUPPLIER MUST be the origin of one and only one PRODUCT. optional-optional. a PRODUCT MAY come one and only one PRODUCT SUPPLIER, a PRODUCT SUPPLIER MAY be the origin of one and only one PRODUCT. one-to-one relationships are a signal that you have different entities that are probably the same entity.","title":"one-to-one relationships"},{"location":"knowledge-base/cs2203-database1/unit2/#one-to-many-relationships","text":"mandatory-mandatory ORDER MUST belong to one and only one CUSTOMER, CUSTOMER MUST place one or more orders. this also a deadlock, since you can't create CUSTOMER without ORDER or vise versa. mandatory-optional CUSTOMER MUST place one or more ORDERs, while an ORDER MAY belong to a CUSTOMER. this is a hard and rare business rule, and should be avoided. optional-optional this a weak relationship. CUSTOMER MAY place one or more ORDERs, while an ORDER MAY belong to one and only one CUSTOMER. this is called indecisive mode . optional-mandatory most useful relationship. CUSTOMER MAY have zero or more ORDERs, while an ORDER MUST belong to one and only one CUSTOMER.","title":"one-to-many relationships"},{"location":"knowledge-base/cs2203-database1/unit2/#many-to-many-relationships","text":"mandatory-mandatory this relationship is impossible . or called catch-22 . mandatory-optional needs to be resolved; analysis is unclear. optional-optional this is very useful. it is called intersection entity . NOTE: to resolve the optional-optional many-to-many relationship between CUSTOMER and ORDER, we need to represent a third table that joins the 2 relation. an example of such a relationship between BUSINESS CONTACT and CONTACT TYPE listed below. NOTE : means that the primary keys of both relations contributes to the primary key. so it is a composite primary key .","title":"many-to-many relationships"},{"location":"knowledge-base/cs2203-database1/unit2/#involuted-recursive-relationships","text":"one-to-one, optional-optional = allows for holding historical data. one-to-many, optional-optional = classical hierarchy. many-to-many, optional-optional = network structure, needs a join table .","title":"Involuted (recursive) relationships"},{"location":"knowledge-base/cs2203-database1/unit2/#arc","text":"arc is a constraint that crosses to one or more relationships going into an entity, and indicates that the relationships in the arc are mutually exclusive. in the photo below, for any TRANSACTION, it MUST be valid for SHAREHOLDER OR a BUSINESS CONTACT, but not both at the same time . try to avoid arcs.","title":"arc"},{"location":"knowledge-base/cs2203-database1/unit2/#mistakes-in-data-modeling","text":"modeling with incompleteness. modeling with incomplete understanding of the business.","title":"mistakes in data modeling"},{"location":"knowledge-base/cs2203-database1/unit2/#database-normalization","text":"Database normalization is the process of structuring a database, usually a relational database, in accordance with a series of so-called normal forms in order to reduce data redundancy and improve data integrity. It was first proposed by Edgar F. Codd as part of his relational model. FN1 (First Normal Form) : do not repeat attributes/groups of attribute, instead take them out to their own entity. final result of the case study: more info here: https://en.wikipedia.org/wiki/Database_normalization","title":"database normalization"},{"location":"knowledge-base/cs2203-database1/unit2/#references","text":"[1] Sharma, N., Perniu, L., Chong, R. F., Iyer, A., Nandan, C., Mitea, A. C., Nonvinkere, M., & Danubianu, M. (2010). Databases fundamentals. Chapter 3 . [2] Pedersen, A. A. (n.d.). Entity relationship modeling - Principles.","title":"References"},{"location":"knowledge-base/cs2203-database1/unit3/","text":"Unit 3: Relational Database Design data redundancy redundancy means the existence of same data in various places. redundancy in a relational schema is not optimal because it interrupts and insertion, deletion, update ops, and causes: Insertion Anomalies : insertion of a data record is not possible unless we get some unrelated data from another record. eg. inserting a student record requires data to be retrieved from his college record. Deletion Anomalies : deletion of a data record results in losing some unrelated information that was stored as part of the record that was deleted from a table. Update Anomalies : updating data for an entity in one place may lead to inconsistency, with the existing redundant data in another place in the table. decompositions decompositions in relational database design is breaking down a relational schema into smaller and simpler relations that avoid redundancy. we will be able to query the smaller relations for any information that we were previously able to retrieve from the original relational schema. functional dependencies Functional Dependency ( FD ) is a type of integrity constraint that extends the idea of a super key . It defines a dependency between subsets of attributes of a given relation. Functional Dependency can be understood as \u201cA determines B\u201d, \u201cB is dependent on A\u201d or \u201cA implies B\u201d and denoted as \u201cA \u2192 B\u201d, where A and B are 2 different subsets of attributes in a relation. Trivial Functional Dependencies : A functional dependency that holds true for all values of a given attribute. Closure Set of Functional Dependencies S + all functional dependencies that are implied from a given set of functional dependency S. rules to compute closure set of dependencies: Armstrong's Axiom : also known as \"Inference Rules\" that help infer all the implied functional dependencies from a given set of functional dependencies. it includes 3 rules: Reflexivity : If B is a subset of attributes in set A, then A \u2192 B. (by trivial FD) Augmentation : If A \u2192 B and C is another attribute, then AC \u2192 BC Applying reflexivity to this rule, we can also say that, AC \u2192 B. Transitivity : If A \u2192 B and B \u2192 C, then A \u2192 C. and also 2 additional rules that can be extracted from the first 3: Union : If A \u2192 B and A \u2192 C, then A \u2192 BC. Decomposition : If A \u2192 BC, then A \u2192 B and A \u2192 C. Computing the closure set of attributes : Closure set of attributes of a given attribute, A, is set of all attributes in the relation, R that can be uniquely determined by A, based on the given FDs. Given a relation, R with a set of attributes, we calculate closure set of attributes for A, closure (A) as follows: Initially set closure (A) = A For each given FD, if A \u2192 B, then add B to closure (A), that is, closure (A) U B For any subset of A, (let C be a subset of A), A\u2192 C (by trivial FD) and if C \u2192 D such that D is not a subset of A, then add D to the closure (A) Repeat step 3 until there are no more attribute sets to be added to closure (A) Entailment : Functional Dependencies (FDs) guide us on how to best decompose relations so that the dependent values may be stored in a single table. Normal Forms Normalization is a procedure in relational database design that aims at converting relational schemas into a more desirable form. The goal is to remove redundancy in relations and the problems that follow from it, namely insertion, deletion and update anomalies The Normal forms progress towards obtaining an optimal design. Normalization is a step-wise process, where each step transforms the relational schemas into a higher normal form. Each Normal form contains all the previous normal forms and some additional optimization over them. First Normal Form (1NF) all attribute domains are atomic. the idea is no repeating groups . a relation is considered to be in 1NF if satisfies these 5 conditions: no top-to-bottom ordering of rows. no left-to-right ordering of columns. no duplicate rows every row-and-column intersection contains exactly one value from the applicable domain. all columns are regular, [i.e. rows have no hidden components such as row IDs, object IDs, or hidden timestamps]. Second Normal Form (2NF) 1NF AND no non-key attribute that depends on part of the candidate key, but on the entire candidate key. relation has single attribute as its candidate key. Third Normal Form (3NF) 1NF AND 2NF AND no non-key attribute that depends transitively on the candidate key. every attribute depends directly on the primary key and not through a transitive relation, where an attribute Z may depend on a non-key attribute Y and Y in turn depends on the primary key X.Transitivity means that when X\u2192Y and Y\u2192 Z, then X\u2192Z. non-key attributes are mutually independent Boyce-Codd Normal Form (BCNF) applies to relations where there may be overlapping candidate keys. A relation is said to be in Boyce-Codd normal form if it is in 3NF and every non-trivial FD given for this relation has a candidate key as its determinant. That is, for every X \u2192 Y, X is a candidate key. Properties of Decompositions properties in summary: decompositions should be lossless. Lossless and Lossy Decompositions Decomposition of a relation R into relations X and Y is lossless if no information from the original relation is lost after the decomposition. In other words, the original relation can be constructed back from the decomposed relations and no spurious rows of information are added as data to the resulting rows. lossy decompositions are bad. if the common attributes in the decomposed (new) relations form a super key for either of the new relations, then the decomposition is lossless. Dependency-Preserving Decompositions we can check all the constraints against the decomposed table only, we need not check it against the original table . Dependency-preserving decomposition does not imply a lossless join decomposition and vice versa. While lossless join is a must during decomposition, dependency-preservation may not be achieved every time. Minimal Cover Minimal cover, Fc is the smallest set of functional dependencies such that the closure set of function dependencies for both minimal cover and given set of FDs F for a relation R are equivalent. That is, F+ = Fc+ Minimal Cover for a given set of FDs is not unique. Synthesis of 3NF schemas Synthesis of 3NF schemas is a bottom-up approach to build lossless join and dependency preserving decompositions of a relation into 3NF. 3NF decomposition A 3NF decomposition can be achieved using a top-down method by the process of normalization where we decompose a relation as per the definition of 3NF and then ensure that it is lossless and dependency-preserving by performing certain checks on the relations thus created. The Fourth Normal Form (4NF) The fourth normal form can be understood in terms of multi-valued dependencies. The Fourth Normal Form (4NF) for a relational schema is said to exist when the non-related multi-valued dependencies that exist are not more than one in the given relation. Multi-valued Dependency (MVD) is denoted as, A \u2192\u2192 B. This means that A multi-determines B, B is multi-dependent on A or A double arrow B. Other normal forms fifth-normal form. domain key normal form DKNF. sixth-normal form","title":"Unit 3: Relational Database Design"},{"location":"knowledge-base/cs2203-database1/unit3/#unit-3-relational-database-design","text":"","title":"Unit 3: Relational Database Design"},{"location":"knowledge-base/cs2203-database1/unit3/#data-redundancy","text":"redundancy means the existence of same data in various places. redundancy in a relational schema is not optimal because it interrupts and insertion, deletion, update ops, and causes: Insertion Anomalies : insertion of a data record is not possible unless we get some unrelated data from another record. eg. inserting a student record requires data to be retrieved from his college record. Deletion Anomalies : deletion of a data record results in losing some unrelated information that was stored as part of the record that was deleted from a table. Update Anomalies : updating data for an entity in one place may lead to inconsistency, with the existing redundant data in another place in the table.","title":"data redundancy"},{"location":"knowledge-base/cs2203-database1/unit3/#decompositions","text":"decompositions in relational database design is breaking down a relational schema into smaller and simpler relations that avoid redundancy. we will be able to query the smaller relations for any information that we were previously able to retrieve from the original relational schema.","title":"decompositions"},{"location":"knowledge-base/cs2203-database1/unit3/#functional-dependencies","text":"Functional Dependency ( FD ) is a type of integrity constraint that extends the idea of a super key . It defines a dependency between subsets of attributes of a given relation. Functional Dependency can be understood as \u201cA determines B\u201d, \u201cB is dependent on A\u201d or \u201cA implies B\u201d and denoted as \u201cA \u2192 B\u201d, where A and B are 2 different subsets of attributes in a relation. Trivial Functional Dependencies : A functional dependency that holds true for all values of a given attribute.","title":"functional dependencies"},{"location":"knowledge-base/cs2203-database1/unit3/#closure-set-of-functional-dependencies-s","text":"all functional dependencies that are implied from a given set of functional dependency S. rules to compute closure set of dependencies: Armstrong's Axiom : also known as \"Inference Rules\" that help infer all the implied functional dependencies from a given set of functional dependencies. it includes 3 rules: Reflexivity : If B is a subset of attributes in set A, then A \u2192 B. (by trivial FD) Augmentation : If A \u2192 B and C is another attribute, then AC \u2192 BC Applying reflexivity to this rule, we can also say that, AC \u2192 B. Transitivity : If A \u2192 B and B \u2192 C, then A \u2192 C. and also 2 additional rules that can be extracted from the first 3: Union : If A \u2192 B and A \u2192 C, then A \u2192 BC. Decomposition : If A \u2192 BC, then A \u2192 B and A \u2192 C. Computing the closure set of attributes : Closure set of attributes of a given attribute, A, is set of all attributes in the relation, R that can be uniquely determined by A, based on the given FDs. Given a relation, R with a set of attributes, we calculate closure set of attributes for A, closure (A) as follows: Initially set closure (A) = A For each given FD, if A \u2192 B, then add B to closure (A), that is, closure (A) U B For any subset of A, (let C be a subset of A), A\u2192 C (by trivial FD) and if C \u2192 D such that D is not a subset of A, then add D to the closure (A) Repeat step 3 until there are no more attribute sets to be added to closure (A) Entailment : Functional Dependencies (FDs) guide us on how to best decompose relations so that the dependent values may be stored in a single table.","title":"Closure Set of Functional Dependencies S+"},{"location":"knowledge-base/cs2203-database1/unit3/#normal-forms","text":"Normalization is a procedure in relational database design that aims at converting relational schemas into a more desirable form. The goal is to remove redundancy in relations and the problems that follow from it, namely insertion, deletion and update anomalies The Normal forms progress towards obtaining an optimal design. Normalization is a step-wise process, where each step transforms the relational schemas into a higher normal form. Each Normal form contains all the previous normal forms and some additional optimization over them.","title":"Normal Forms"},{"location":"knowledge-base/cs2203-database1/unit3/#first-normal-form-1nf","text":"all attribute domains are atomic. the idea is no repeating groups . a relation is considered to be in 1NF if satisfies these 5 conditions: no top-to-bottom ordering of rows. no left-to-right ordering of columns. no duplicate rows every row-and-column intersection contains exactly one value from the applicable domain. all columns are regular, [i.e. rows have no hidden components such as row IDs, object IDs, or hidden timestamps].","title":"First Normal Form (1NF)"},{"location":"knowledge-base/cs2203-database1/unit3/#second-normal-form-2nf","text":"1NF AND no non-key attribute that depends on part of the candidate key, but on the entire candidate key. relation has single attribute as its candidate key.","title":"Second Normal Form (2NF)"},{"location":"knowledge-base/cs2203-database1/unit3/#third-normal-form-3nf","text":"1NF AND 2NF AND no non-key attribute that depends transitively on the candidate key. every attribute depends directly on the primary key and not through a transitive relation, where an attribute Z may depend on a non-key attribute Y and Y in turn depends on the primary key X.Transitivity means that when X\u2192Y and Y\u2192 Z, then X\u2192Z. non-key attributes are mutually independent","title":"Third Normal Form (3NF)"},{"location":"knowledge-base/cs2203-database1/unit3/#boyce-codd-normal-form-bcnf","text":"applies to relations where there may be overlapping candidate keys. A relation is said to be in Boyce-Codd normal form if it is in 3NF and every non-trivial FD given for this relation has a candidate key as its determinant. That is, for every X \u2192 Y, X is a candidate key.","title":"Boyce-Codd Normal Form (BCNF)"},{"location":"knowledge-base/cs2203-database1/unit3/#properties-of-decompositions","text":"properties in summary: decompositions should be lossless.","title":"Properties of Decompositions"},{"location":"knowledge-base/cs2203-database1/unit3/#lossless-and-lossy-decompositions","text":"Decomposition of a relation R into relations X and Y is lossless if no information from the original relation is lost after the decomposition. In other words, the original relation can be constructed back from the decomposed relations and no spurious rows of information are added as data to the resulting rows. lossy decompositions are bad. if the common attributes in the decomposed (new) relations form a super key for either of the new relations, then the decomposition is lossless.","title":"Lossless and Lossy Decompositions"},{"location":"knowledge-base/cs2203-database1/unit3/#dependency-preserving-decompositions","text":"we can check all the constraints against the decomposed table only, we need not check it against the original table . Dependency-preserving decomposition does not imply a lossless join decomposition and vice versa. While lossless join is a must during decomposition, dependency-preservation may not be achieved every time.","title":"Dependency-Preserving Decompositions"},{"location":"knowledge-base/cs2203-database1/unit3/#minimal-cover","text":"Minimal cover, Fc is the smallest set of functional dependencies such that the closure set of function dependencies for both minimal cover and given set of FDs F for a relation R are equivalent. That is, F+ = Fc+ Minimal Cover for a given set of FDs is not unique.","title":"Minimal Cover"},{"location":"knowledge-base/cs2203-database1/unit3/#synthesis-of-3nf-schemas","text":"Synthesis of 3NF schemas is a bottom-up approach to build lossless join and dependency preserving decompositions of a relation into 3NF.","title":"Synthesis of 3NF schemas"},{"location":"knowledge-base/cs2203-database1/unit3/#3nf-decomposition","text":"A 3NF decomposition can be achieved using a top-down method by the process of normalization where we decompose a relation as per the definition of 3NF and then ensure that it is lossless and dependency-preserving by performing certain checks on the relations thus created.","title":"3NF decomposition"},{"location":"knowledge-base/cs2203-database1/unit3/#the-fourth-normal-form-4nf","text":"The fourth normal form can be understood in terms of multi-valued dependencies. The Fourth Normal Form (4NF) for a relational schema is said to exist when the non-related multi-valued dependencies that exist are not more than one in the given relation. Multi-valued Dependency (MVD) is denoted as, A \u2192\u2192 B. This means that A multi-determines B, B is multi-dependent on A or A double arrow B.","title":"The Fourth Normal Form (4NF)"},{"location":"knowledge-base/cs2203-database1/unit3/#other-normal-forms","text":"fifth-normal form. domain key normal form DKNF. sixth-normal form","title":"Other normal forms"},{"location":"knowledge-base/general/","text":"Table of contents Advanced Design Patterns OOP Algorithms algorithms algorithms on graphs freecodeCamp algorithms MIT 6006 quick find quick union union find APIs API list Packages DataBases MongoDB Mongoose Redis Sequalize Data Structures binary trees dataStructures dis-joint sets hash tables heap linked lists priority queue queue stack trees Design CSS FrameWorks Bootstrap React Redux Interviews Javascript General Javascript OOP references Javascript Arrays Date Time Functions JS General Node cli Numbers Objects Strings Node js Node Argv stdout Programming Languages go python Software Development agile requirments terminoloy Think thinking logically games Tools bash docker git grunt linux shell scripting vim windows Web dom fonts meta pwa seo urls","title":"Table of contents"},{"location":"knowledge-base/general/#table-of-contents","text":"Advanced Design Patterns OOP Algorithms algorithms algorithms on graphs freecodeCamp algorithms MIT 6006 quick find quick union union find APIs API list Packages DataBases MongoDB Mongoose Redis Sequalize Data Structures binary trees dataStructures dis-joint sets hash tables heap linked lists priority queue queue stack trees Design CSS FrameWorks Bootstrap React Redux Interviews Javascript General Javascript OOP references Javascript Arrays Date Time Functions JS General Node cli Numbers Objects Strings Node js Node Argv stdout Programming Languages go python Software Development agile requirments terminoloy Think thinking logically games Tools bash docker git grunt linux shell scripting vim windows Web dom fonts meta pwa seo urls","title":"Table of contents"},{"location":"knowledge-base/general/advanced/","text":"","title":"Index"},{"location":"knowledge-base/general/advanced/design_patterns/","text":"Design Patterns intro useful for learn frameworks quickly. ease communications between teams. SRP: single responsiplity priciple, in oop, every class should have only one single responsabilty. OCP: open close priciple, our classes should be open for extention, closed for modification. Essentials package: the name where the main class is actually defined, entry point. class: object that holds properties and methods and can be instanciated. public: accessable every where. static: we can call the function directly without creating an instance of the classs. void: no return. main function takes one single argument as an array of strings holds everything you are passing from the command line. // Main.java package com.activityLog public class Main { public static void main ( String[] args ) { User me = new User(\"Ahmad\"); // calling the constructor of User. me.sayHello(); // hello, Ahmad } } // User.java package com.activityLog public class User { // property public String name; // constructor public User( String name) { this.name = name; } // Method public void sayHello(){ system.out.printLn(\"Hello, \" + this.name); } } class coupling when a class is depending on another class. eg. main class is coupling with (depending on) User class. if we change User class, Main class may broke, then you need to change it or recompile and redeploy. interface a contract that specifies the cabapilities that a class should provide. it is a class, holds essential functions of the class that they need to be redefined in the classes. you can't use the interface itself, but you can create a class from it then use this class. package activityLog // define interface, TaxCalculator.java public interface TaxCalculator { float calculateTax(); } // implement class from interface, TaxCalculator2020.java public class TaxCalculator2020 implements TaxCalculator { @override public float calculateTax() { return 1.0; } } // implement another class from interface, TaxCalculator2021.java public class TaxCalculator2021 implements TaxCalculator { @override public float calculateTax() { return 2.0; } } //main public class Main { public static void main ( String[] args ) { TaxCalculator calc = getTaxCalculator(); clac.calculateTax(); // what ever you change under the hood, this will stay working. } public static TaxCalculator getTaxCalculator () { if( date.year() == 2020 ){ return new TaxCalculator2020(); } else { return new TaxCalculator2021(); } } } encapsulation use access modifiers to encapsulate class properties (class state). so, no direct changes to class properties except through functions (setters and getters) bundlling the data and the methods working on this data in one single class. and hide the state of the object inside the class. so, we protect object state from unwanted changes. then saving our program from going into invalid state. Abstraction hiding un-necessary details deep inside the class. this will reduce complexity, functions with less params. we can have few public main method in our class that fires several private functions that we don't see. eg. MyClass.sendEmail() and the send emain will be like this function sendEmail(){ getSender(); getRecever(); copyItToDb(); getSendingStatus() } so instead of calling those 4 methods manually, we fire sendEmail() will trigger them without us knowing that these functions actually existed. Inheretance a way of reusing code, so it eliminate redandant code. polymorphism many forms. the object can behaves in many forms depending on the context. create an abstract class with an abstract mthod then define those differently in each inhereted class. the extended class can behave as the super class (if it is not abstract or interface) or as his own class. UML unified moduling language draw charts to represent code. meaning of the three types of arrows in the diagrams: Memento pattern 3 classes: originator, memento, caretaker. undo problem (mechanism). create our class eg. Editor, have 2 funcs: createState() , restoreState() . ----> originator . create another class eg. EditorState to save the state of our class. ------> memento push our states to a third class called history which stores list of our class states. have funcs: pushToHistory() , popFromHistory() . ------> caretaker state patteren naiive the app behavior changes with a state variable. this state variable should be private on its class and you need setters and getters to deal with it. you can pass this state by define it on top of your application then pass it to every other class in the app. at every function you should check for this state app and define different behavior depending on this state. pattern polymorphism is essential. 3 classes: context, state, concreteStateA, concreteStateB .. canvas problem you define a canvas class has the mouse listeners functions . ---> context. define a new class called tool wich also have the same functions. -----> state. the second class should be abstract and take the defentions of its functions from other classes like selection or bruch, those classes have the dedfinitons of those functions. ----> concreteStates. the second class (state) chooses the functions defentions depending on the app state.","title":"Design Patterns"},{"location":"knowledge-base/general/advanced/design_patterns/#design-patterns","text":"","title":"Design Patterns"},{"location":"knowledge-base/general/advanced/design_patterns/#intro","text":"useful for learn frameworks quickly. ease communications between teams. SRP: single responsiplity priciple, in oop, every class should have only one single responsabilty. OCP: open close priciple, our classes should be open for extention, closed for modification.","title":"intro"},{"location":"knowledge-base/general/advanced/design_patterns/#essentials","text":"package: the name where the main class is actually defined, entry point. class: object that holds properties and methods and can be instanciated. public: accessable every where. static: we can call the function directly without creating an instance of the classs. void: no return. main function takes one single argument as an array of strings holds everything you are passing from the command line. // Main.java package com.activityLog public class Main { public static void main ( String[] args ) { User me = new User(\"Ahmad\"); // calling the constructor of User. me.sayHello(); // hello, Ahmad } } // User.java package com.activityLog public class User { // property public String name; // constructor public User( String name) { this.name = name; } // Method public void sayHello(){ system.out.printLn(\"Hello, \" + this.name); } }","title":"Essentials"},{"location":"knowledge-base/general/advanced/design_patterns/#class-coupling","text":"when a class is depending on another class. eg. main class is coupling with (depending on) User class. if we change User class, Main class may broke, then you need to change it or recompile and redeploy.","title":"class coupling"},{"location":"knowledge-base/general/advanced/design_patterns/#interface","text":"a contract that specifies the cabapilities that a class should provide. it is a class, holds essential functions of the class that they need to be redefined in the classes. you can't use the interface itself, but you can create a class from it then use this class. package activityLog // define interface, TaxCalculator.java public interface TaxCalculator { float calculateTax(); } // implement class from interface, TaxCalculator2020.java public class TaxCalculator2020 implements TaxCalculator { @override public float calculateTax() { return 1.0; } } // implement another class from interface, TaxCalculator2021.java public class TaxCalculator2021 implements TaxCalculator { @override public float calculateTax() { return 2.0; } } //main public class Main { public static void main ( String[] args ) { TaxCalculator calc = getTaxCalculator(); clac.calculateTax(); // what ever you change under the hood, this will stay working. } public static TaxCalculator getTaxCalculator () { if( date.year() == 2020 ){ return new TaxCalculator2020(); } else { return new TaxCalculator2021(); } } }","title":"interface"},{"location":"knowledge-base/general/advanced/design_patterns/#encapsulation","text":"use access modifiers to encapsulate class properties (class state). so, no direct changes to class properties except through functions (setters and getters) bundlling the data and the methods working on this data in one single class. and hide the state of the object inside the class. so, we protect object state from unwanted changes. then saving our program from going into invalid state.","title":"encapsulation"},{"location":"knowledge-base/general/advanced/design_patterns/#abstraction","text":"hiding un-necessary details deep inside the class. this will reduce complexity, functions with less params. we can have few public main method in our class that fires several private functions that we don't see. eg. MyClass.sendEmail() and the send emain will be like this function sendEmail(){ getSender(); getRecever(); copyItToDb(); getSendingStatus() } so instead of calling those 4 methods manually, we fire sendEmail() will trigger them without us knowing that these functions actually existed.","title":"Abstraction"},{"location":"knowledge-base/general/advanced/design_patterns/#inheretance","text":"a way of reusing code, so it eliminate redandant code.","title":"Inheretance"},{"location":"knowledge-base/general/advanced/design_patterns/#polymorphism","text":"many forms. the object can behaves in many forms depending on the context. create an abstract class with an abstract mthod then define those differently in each inhereted class. the extended class can behave as the super class (if it is not abstract or interface) or as his own class.","title":"polymorphism"},{"location":"knowledge-base/general/advanced/design_patterns/#uml","text":"unified moduling language draw charts to represent code. meaning of the three types of arrows in the diagrams:","title":"UML"},{"location":"knowledge-base/general/advanced/design_patterns/#memento-pattern","text":"3 classes: originator, memento, caretaker. undo problem (mechanism). create our class eg. Editor, have 2 funcs: createState() , restoreState() . ----> originator . create another class eg. EditorState to save the state of our class. ------> memento push our states to a third class called history which stores list of our class states. have funcs: pushToHistory() , popFromHistory() . ------> caretaker","title":"Memento pattern"},{"location":"knowledge-base/general/advanced/design_patterns/#state-patteren","text":"","title":"state patteren"},{"location":"knowledge-base/general/advanced/design_patterns/#naiive","text":"the app behavior changes with a state variable. this state variable should be private on its class and you need setters and getters to deal with it. you can pass this state by define it on top of your application then pass it to every other class in the app. at every function you should check for this state app and define different behavior depending on this state.","title":"naiive"},{"location":"knowledge-base/general/advanced/design_patterns/#pattern","text":"polymorphism is essential. 3 classes: context, state, concreteStateA, concreteStateB .. canvas problem you define a canvas class has the mouse listeners functions . ---> context. define a new class called tool wich also have the same functions. -----> state. the second class should be abstract and take the defentions of its functions from other classes like selection or bruch, those classes have the dedfinitons of those functions. ----> concreteStates. the second class (state) chooses the functions defentions depending on the app state.","title":"pattern"},{"location":"knowledge-base/general/advanced/oop/","text":"Object Oriented Programming some types of oop to look at object oriented modular programming incremental programming notes applying encapsulation will lead to Abstraction [2]. in c++: class is a structure that all its members are private by default [2]. summary about entity access control types in classes: Entity type Inhereted ? accessed by class methods ? accessed outside the class ? eg. setters and getters eg. directly as className.entity private - - - protected + + - public + + + intro structures (classes) is a collection of variables of possibly different types. an object is in instance of the structure, we can call it a structure itself. structures can be memberes of another structures you can't the same structure type as member of the same type, because we will get infinite loop of memory reservations. c++ // c++ struct MyStruct { int x; MyStruct y; // this is wrong } Structures and pointers structures in memory: ![pointers in em] myStruct* is pointer to MyStruct type. Example: ```c++ // c++ struct MyStruct { int x; int y; } MyStrcut p1; // defining a new object MyStruct* ptr // define a variable of type pointer to mystruct ptr = &p1 // assign memory addres of p1 to ptr *ptr = { 1 , 2 } // assign the data in memory addres &p1 to {1,2} // to access the pointer of y of p1 ptrY = &p1 + 4 // &p1 points to the first member of p1 whic is x, x takes 4 bytes, after 4 byets we reach y. // OR ptr->y = 2 // assign data in y pointer to 2 // (&p1)->y = 2 ``` pointers in structures: in the photo above, istead of reserving extra 54 bytes for the driver in t1 we are pointing to d1 which cost only 4 bytes. since we can not use a structure as member of the same structure type, we can use its pointer in our code as this: in this photo, t2.next points to t1 , although t1 and t2 are from the same type, we can't use t1 as member of t2, but we can point to it. writting to the heap starts with the word new , as int* ptr = new int ```c++ // c++ struct MyStruct { int x; int y; } MyStruct* p1 = new MyStruct // we are writting to the heap // (dynamically allocating memory for the new struct) // now can dynamically handle p1 contents ``` concepts entites: all members of class. abstraction: hide the un-necesary details of the class. entites can be [1]: fixed (like methods) don't change while the object interacts. state (like vars) change while the object interacts. member functions member functions are the methods of a class. member functions are fixed entries [1]. calling member functions. c++ className.classFnc(funcArg) // className is the reciever // claassFunc is the member function // funcArg arguments that are passed to the method interfaces: simple layer hiding everything (eg. member function with no arguments) Access control of members in structures Crucial for data hiding or encapsulation [2]. public Member can be accessed from anywhere in program can be inhereted. private Member can be accessed only from member functions of same structure (class) . reading and writting can be done only using the class methods setters and getters . make sure that these getters and setters are public so they can be accessesd by other parts of the program. can not be inhereted. protected moderate private. can be accessed only in the defintion of the derived classes. Mutator functions Member functions that update values of data members that other functions are allowed to update [3]. Constructor Invoked automatically when an object of the class is allocated [3]. Convenient way to initialize data members . Just like any other member function Accepts optional input parameters Can be used to perform tasks other than initialization too [3]. class can have multiple constructors as long as each one has a distinct list of parameter types. When allocating an object of the class, the types of parameters passed to the constructor determine which constructor is invoked. constructors must be public [3]. ```c++ calss V3 { double x, y, z; // first constructor: normal. V3(double a, double b, double c){ x = a; y = b; z = c; return; } // second constructor: initialazation, no parameters. // default constructor V3(){ x=y=z=0.0; return; } // third constructor : with default values, some params are optional V3(double a = 0.0 , double b = 1.0, double c = 2.0){ x = a; y = b; z = c; return; } // destructor ~V3() { if (length() == 0.0) { cout << \u201cZero vector!!!\u201d; return; } } V3 myObj1; // invoke second constructor V3 myObj2 = new V3(1.0, 2.0. 3.0); // invokes first constuctor V3 myObj2 = new V3(1.0, 2.0); // invokes third constuctor ``` Default constructor a constructor method without any params. when you define an array of type MyClass : the default constructor, the one without parameters, will be invoked when you intialize a new class without specyfying a constructr [3]. if no default constructor the compiler will provide one for you, but it might not be as you want [3]. If a non-default constructor is defined, but not a default constructor, C++ compiler will NOT provide a bare-bones default constructor, and the array will not defined, get an Error . Best practice: Always Define default constructors. copy constructor constructor method that take a class as parameter, and return a new class from the same type. the parameter class should be passed by reference , so the old class values will be copied to the new class. ```c++ class V3 { int x,y,z; V3 copyConstrutor ( const V3 &objFromSameClass){ V3 v; v.x = objFromSameClass.x v.y = objFromSameClass.y v.z = objFromSameClass.z return v; } // another Example here: https://i.imgur.com/UfiJgY2.png } ``` Destructor Invoked automatically when an object of the class is de-allocated. Convenient way to do book-keeping/cleaning-up before deallocating object [3]. Accepts no parameters. Can be used to perform other tasks before de-allocating object [3]. must be public. operator overloading create a special functions to be invoked after some operetors (eg: + - * /) [4]. ```c++ class V3 { private: double x, y, z; public: // operator + overloading V3 operator+ (const V3 &b) { return V3(x + b.x, y + b.y, z + b.z); } // operator * overloading V3 operator* (const double factor) { return V3(x*factor, y*factor, z*factor); } }; // in main v1 = new V3(1.0,2.0,3.0) v2 = new V3(4.0,5.0,6.0) v4 = v1 * v2 // this will execute the function with the operator loading. ``` Assignment Overloading We can re-define the assignment operator for a class/struct by defining the member function operator= [4]. Friend classes and functions A \u201cfriend\u201d declaration allows a class to explicitly allow specific non-member functions to access its private members. a function can be friend to several classess. a class can be friends with several functions. in the class defenetion I declare: ```c++ // c++ class V3 { // code friend ReturnType FuncName( ...Params ); // this will give the FuncName Access to private properties of the class V3 // OR friend class ClassName; // all functions of className will be friends with V3. } static data members members of class that will share its value with all objects of the class [4]. if this static data changed in one object, it will change with all other objects of this class [4]. Inheritance when there are some common features between mutliple classes, we can use a base class contains the common properties. then we extend each class with its own properties. Compositional Way the inhereted class cotains one property of the type base class . we need to access our new class, then the base class to get access to its properties. Inheritance Way the new class extends the previous one, so we can access the propieties of the base class directly as if they were a properties to the extended class. copmaring composional way to inhertance way. example of Bank accouts heirachy, where you need to use inheretance: https://i.imgur.com/XiXsPcR.png [4]. Access Control in Derived Classes the base class is the class that contains the common properties. the derived class is the new class that extends the base one. the propereties types in base class can be: 1.public 2.private 3.protected. the type of derivation (inhertenace) can also be: 1.public 2.private 3.protected. the comination of propert type and inhertenace type can control the accessebilty of the base property in the derived class. From both types, the one with more privacy and less accessbility will be dominated as : private > protected > public . summary of the inheretance depending on both types [4]: Methods Inheretance methods can be redefined in the derived class. to call the method of the base (super) class after you redefine you can do: c++ class savings : public base { public: int age; long int ATM; void printInfo() { base::printInfo() // when call savings.printInfo() will execute the both methods from base and savings. cout << \"\\nPrinting in savings: \\n\"; cout << age << \", \" << ATM << endl; } }; instantianting a new derived class will call both constructors of the default constructor of the base then the constructor of the derived class. if the base class doesn't have default construcor (eg. its constructor has arguments) you need to explicitly call the base constructor when constructing the derived class. polymorphism a derived class can be used as its shape or as base class because it has all data in the base class. so, we have 2 shapes or forms of the derived class, that's polymorphism. inhereted methods that are redefined in the derived class can be used as its original defention or its second defenition, this is also polymorphism. example here: https://i.imgur.com/d6Wz17A.png virtual functions implements polymorphism in the function calls. functions defined in the base class, but they need to be redefined in the dervied class in order to work. example here: https://i.imgur.com/DPbIAqe.png Abstract class A class that cannot be instantiated directly. instantiation of this class will give compiler error. Implemented as a class that has one or more pure virtual functions As. virtual void FuncName() = 0; Which should be overridden by member function definitions of derived class. used when using the base class has no meaningfull meaning. Example (Bank account): A person does not have just a bank account. It is either a savings bank account or a current bank account Instantiating class \u2018base\u2019 by itself has no meaningful purpose References [1] IITBombayX: CS101.2x, edx 1 [2] IITBombayX: CS101.2x, edx 2 [3] IITBombayX: CS101.2x, edx 3 [4] IITBombayX: CS101.2x, edx 4","title":"Object Oriented Programming"},{"location":"knowledge-base/general/advanced/oop/#object-oriented-programming","text":"","title":"Object Oriented Programming"},{"location":"knowledge-base/general/advanced/oop/#some-types-of-oop-to-look-at","text":"object oriented modular programming incremental programming","title":"some types of oop to look at"},{"location":"knowledge-base/general/advanced/oop/#notes","text":"applying encapsulation will lead to Abstraction [2]. in c++: class is a structure that all its members are private by default [2]. summary about entity access control types in classes: Entity type Inhereted ? accessed by class methods ? accessed outside the class ? eg. setters and getters eg. directly as className.entity private - - - protected + + - public + + +","title":"notes"},{"location":"knowledge-base/general/advanced/oop/#intro","text":"structures (classes) is a collection of variables of possibly different types. an object is in instance of the structure, we can call it a structure itself. structures can be memberes of another structures you can't the same structure type as member of the same type, because we will get infinite loop of memory reservations. c++ // c++ struct MyStruct { int x; MyStruct y; // this is wrong }","title":"intro"},{"location":"knowledge-base/general/advanced/oop/#structures-and-pointers","text":"structures in memory: ![pointers in em] myStruct* is pointer to MyStruct type. Example: ```c++ // c++ struct MyStruct { int x; int y; } MyStrcut p1; // defining a new object MyStruct* ptr // define a variable of type pointer to mystruct ptr = &p1 // assign memory addres of p1 to ptr *ptr = { 1 , 2 } // assign the data in memory addres &p1 to {1,2} // to access the pointer of y of p1 ptrY = &p1 + 4 // &p1 points to the first member of p1 whic is x, x takes 4 bytes, after 4 byets we reach y. // OR ptr->y = 2 // assign data in y pointer to 2 // (&p1)->y = 2 ``` pointers in structures: in the photo above, istead of reserving extra 54 bytes for the driver in t1 we are pointing to d1 which cost only 4 bytes. since we can not use a structure as member of the same structure type, we can use its pointer in our code as this: in this photo, t2.next points to t1 , although t1 and t2 are from the same type, we can't use t1 as member of t2, but we can point to it. writting to the heap starts with the word new , as int* ptr = new int ```c++ // c++ struct MyStruct { int x; int y; } MyStruct* p1 = new MyStruct // we are writting to the heap // (dynamically allocating memory for the new struct) // now can dynamically handle p1 contents ```","title":"Structures and pointers"},{"location":"knowledge-base/general/advanced/oop/#concepts","text":"entites: all members of class. abstraction: hide the un-necesary details of the class. entites can be [1]: fixed (like methods) don't change while the object interacts. state (like vars) change while the object interacts.","title":"concepts"},{"location":"knowledge-base/general/advanced/oop/#member-functions","text":"member functions are the methods of a class. member functions are fixed entries [1]. calling member functions. c++ className.classFnc(funcArg) // className is the reciever // claassFunc is the member function // funcArg arguments that are passed to the method interfaces: simple layer hiding everything (eg. member function with no arguments)","title":"member functions"},{"location":"knowledge-base/general/advanced/oop/#access-control-of-members-in-structures","text":"Crucial for data hiding or encapsulation [2].","title":"Access control of members in structures"},{"location":"knowledge-base/general/advanced/oop/#public","text":"Member can be accessed from anywhere in program can be inhereted.","title":"public"},{"location":"knowledge-base/general/advanced/oop/#private","text":"Member can be accessed only from member functions of same structure (class) . reading and writting can be done only using the class methods setters and getters . make sure that these getters and setters are public so they can be accessesd by other parts of the program. can not be inhereted.","title":"private"},{"location":"knowledge-base/general/advanced/oop/#protected","text":"moderate private. can be accessed only in the defintion of the derived classes.","title":"protected"},{"location":"knowledge-base/general/advanced/oop/#mutator-functions","text":"Member functions that update values of data members that other functions are allowed to update [3].","title":"Mutator functions"},{"location":"knowledge-base/general/advanced/oop/#constructor","text":"Invoked automatically when an object of the class is allocated [3]. Convenient way to initialize data members . Just like any other member function Accepts optional input parameters Can be used to perform tasks other than initialization too [3]. class can have multiple constructors as long as each one has a distinct list of parameter types. When allocating an object of the class, the types of parameters passed to the constructor determine which constructor is invoked. constructors must be public [3]. ```c++ calss V3 { double x, y, z; // first constructor: normal. V3(double a, double b, double c){ x = a; y = b; z = c; return; } // second constructor: initialazation, no parameters. // default constructor V3(){ x=y=z=0.0; return; } // third constructor : with default values, some params are optional V3(double a = 0.0 , double b = 1.0, double c = 2.0){ x = a; y = b; z = c; return; } // destructor ~V3() { if (length() == 0.0) { cout << \u201cZero vector!!!\u201d; return; } } V3 myObj1; // invoke second constructor V3 myObj2 = new V3(1.0, 2.0. 3.0); // invokes first constuctor V3 myObj2 = new V3(1.0, 2.0); // invokes third constuctor ```","title":"Constructor"},{"location":"knowledge-base/general/advanced/oop/#default-constructor","text":"a constructor method without any params. when you define an array of type MyClass : the default constructor, the one without parameters, will be invoked when you intialize a new class without specyfying a constructr [3]. if no default constructor the compiler will provide one for you, but it might not be as you want [3]. If a non-default constructor is defined, but not a default constructor, C++ compiler will NOT provide a bare-bones default constructor, and the array will not defined, get an Error . Best practice: Always Define default constructors.","title":"Default constructor"},{"location":"knowledge-base/general/advanced/oop/#copy-constructor","text":"constructor method that take a class as parameter, and return a new class from the same type. the parameter class should be passed by reference , so the old class values will be copied to the new class. ```c++ class V3 { int x,y,z; V3 copyConstrutor ( const V3 &objFromSameClass){ V3 v; v.x = objFromSameClass.x v.y = objFromSameClass.y v.z = objFromSameClass.z return v; } // another Example here: https://i.imgur.com/UfiJgY2.png } ```","title":"copy constructor"},{"location":"knowledge-base/general/advanced/oop/#destructor","text":"Invoked automatically when an object of the class is de-allocated. Convenient way to do book-keeping/cleaning-up before deallocating object [3]. Accepts no parameters. Can be used to perform other tasks before de-allocating object [3]. must be public.","title":"Destructor"},{"location":"knowledge-base/general/advanced/oop/#operator-overloading","text":"create a special functions to be invoked after some operetors (eg: + - * /) [4]. ```c++ class V3 { private: double x, y, z; public: // operator + overloading V3 operator+ (const V3 &b) { return V3(x + b.x, y + b.y, z + b.z); } // operator * overloading V3 operator* (const double factor) { return V3(x*factor, y*factor, z*factor); } }; // in main v1 = new V3(1.0,2.0,3.0) v2 = new V3(4.0,5.0,6.0) v4 = v1 * v2 // this will execute the function with the operator loading. ```","title":"operator overloading"},{"location":"knowledge-base/general/advanced/oop/#assignment-overloading","text":"We can re-define the assignment operator for a class/struct by defining the member function operator= [4].","title":"Assignment Overloading"},{"location":"knowledge-base/general/advanced/oop/#friend-classes-and-functions","text":"A \u201cfriend\u201d declaration allows a class to explicitly allow specific non-member functions to access its private members. a function can be friend to several classess. a class can be friends with several functions. in the class defenetion I declare: ```c++ // c++ class V3 { // code friend ReturnType FuncName( ...Params ); // this will give the FuncName Access to private properties of the class V3 // OR friend class ClassName; // all functions of className will be friends with V3. }","title":"Friend classes and functions"},{"location":"knowledge-base/general/advanced/oop/#static-data-members","text":"members of class that will share its value with all objects of the class [4]. if this static data changed in one object, it will change with all other objects of this class [4].","title":"static data members"},{"location":"knowledge-base/general/advanced/oop/#inheritance","text":"when there are some common features between mutliple classes, we can use a base class contains the common properties. then we extend each class with its own properties.","title":"Inheritance"},{"location":"knowledge-base/general/advanced/oop/#compositional-way","text":"the inhereted class cotains one property of the type base class . we need to access our new class, then the base class to get access to its properties.","title":"Compositional Way"},{"location":"knowledge-base/general/advanced/oop/#inheritance-way","text":"the new class extends the previous one, so we can access the propieties of the base class directly as if they were a properties to the extended class. copmaring composional way to inhertance way. example of Bank accouts heirachy, where you need to use inheretance: https://i.imgur.com/XiXsPcR.png [4].","title":"Inheritance Way"},{"location":"knowledge-base/general/advanced/oop/#access-control-in-derived-classes","text":"the base class is the class that contains the common properties. the derived class is the new class that extends the base one. the propereties types in base class can be: 1.public 2.private 3.protected. the type of derivation (inhertenace) can also be: 1.public 2.private 3.protected. the comination of propert type and inhertenace type can control the accessebilty of the base property in the derived class. From both types, the one with more privacy and less accessbility will be dominated as : private > protected > public . summary of the inheretance depending on both types [4]:","title":"Access Control in Derived Classes"},{"location":"knowledge-base/general/advanced/oop/#methods-inheretance","text":"methods can be redefined in the derived class. to call the method of the base (super) class after you redefine you can do: c++ class savings : public base { public: int age; long int ATM; void printInfo() { base::printInfo() // when call savings.printInfo() will execute the both methods from base and savings. cout << \"\\nPrinting in savings: \\n\"; cout << age << \", \" << ATM << endl; } }; instantianting a new derived class will call both constructors of the default constructor of the base then the constructor of the derived class. if the base class doesn't have default construcor (eg. its constructor has arguments) you need to explicitly call the base constructor when constructing the derived class.","title":"Methods Inheretance"},{"location":"knowledge-base/general/advanced/oop/#polymorphism","text":"a derived class can be used as its shape or as base class because it has all data in the base class. so, we have 2 shapes or forms of the derived class, that's polymorphism. inhereted methods that are redefined in the derived class can be used as its original defention or its second defenition, this is also polymorphism. example here: https://i.imgur.com/d6Wz17A.png","title":"polymorphism"},{"location":"knowledge-base/general/advanced/oop/#virtual-functions","text":"implements polymorphism in the function calls. functions defined in the base class, but they need to be redefined in the dervied class in order to work. example here: https://i.imgur.com/DPbIAqe.png","title":"virtual functions"},{"location":"knowledge-base/general/advanced/oop/#abstract-class","text":"A class that cannot be instantiated directly. instantiation of this class will give compiler error. Implemented as a class that has one or more pure virtual functions As. virtual void FuncName() = 0; Which should be overridden by member function definitions of derived class. used when using the base class has no meaningfull meaning. Example (Bank account): A person does not have just a bank account. It is either a savings bank account or a current bank account Instantiating class \u2018base\u2019 by itself has no meaningful purpose","title":"Abstract class"},{"location":"knowledge-base/general/advanced/oop/#references","text":"[1] IITBombayX: CS101.2x, edx 1 [2] IITBombayX: CS101.2x, edx 2 [3] IITBombayX: CS101.2x, edx 3 [4] IITBombayX: CS101.2x, edx 4","title":"References"},{"location":"knowledge-base/general/algorithms/","text":"Data Structures and Algorithms Notes resources Data Structures and Algorithms speialization coursera Algorithmic Toolbox : My Notes -- coursera FreeCodeCamp Algorithms section My Notes -- FreecodeCamp MIT 6.006, Introduction to Algorithms: MY NOTES -- MIT 6.006 Algorithms1 MY NOETS -- cousera Medium Atricle: https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038 Khan Academy: https://www.khanacademy.org/computing/computer-science/algorithms Visualize David Galles Visualization here: https://www.cs.usfca.edu/~galles/visualization/about.html toptal visualization here: https://www.toptal.com/developers/sorting-algorithms Big o Cheatsheet here: https://www.bigocheatsheet.com/","title":"Data Structures and Algorithms Notes"},{"location":"knowledge-base/general/algorithms/#data-structures-and-algorithms-notes","text":"","title":"Data Structures and Algorithms Notes"},{"location":"knowledge-base/general/algorithms/#resources","text":"Data Structures and Algorithms speialization coursera Algorithmic Toolbox : My Notes -- coursera FreeCodeCamp Algorithms section My Notes -- FreecodeCamp MIT 6.006, Introduction to Algorithms: MY NOTES -- MIT 6.006 Algorithms1 MY NOETS -- cousera Medium Atricle: https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038 Khan Academy: https://www.khanacademy.org/computing/computer-science/algorithms","title":"resources"},{"location":"knowledge-base/general/algorithms/#visualize","text":"David Galles Visualization here: https://www.cs.usfca.edu/~galles/visualization/about.html toptal visualization here: https://www.toptal.com/developers/sorting-algorithms Big o Cheatsheet here: https://www.bigocheatsheet.com/","title":"Visualize"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/","text":"Algorithms on Graphs graphs are used in: represent Internet pages and the connections between them. maps social networks. An (undirected) Graph is a collection V of vertices, and a collection E of edges each of which connects a pair of vertices. Drawing Graphs: Vertices: Points. Edges: Lines. Loops connect a vertex to itself. Multiple edges between same vertices. Represinting Graphs: List of all edges: Edges: (A, B), (A, C), (A,D), (C,D) Adjacency Matrix: Matrix. Entries 1 if there is an edge, 0 if there is not. Adjacency List : For each vertex, a list of adjacent vertices. time cost for each of the previous Graph representaions: Week1: Exploring Undirected Graphs A path in a graph G is a sequence of vertices v0, v1, . . . , vn so that for all i, (vi , vi+1) is an edge of G. operations on graphs: Reachability: outputs The collection of vertices v of G so that there is a path from s to v. connectivity: outputs The connected components of G. Reachability (All components) All Component(s: ): DiscoveredNodes = [] while there is an edge e leaving DiscoveredNodes that has not been explored: add vertex at other end of e to DiscoveredNodes return DiscoveredNodes Visit Markers : To keep track of vertices found we Give each vertex boolean visited(v). Unprocessed Vertices: Keep a list of vertices with edges left to check. Depth First Ordering We will explore new edges in Depth First order. We will follow a long path forward, only backtracking when we hit a dead end . Explore(v: vertix): visited(v) = true for (v, w) \u2208 E: # E contains all niebourghs w of v if not visited(w): Explore(w) Connectivity The vertices of a graph G can be partitioned into Connected Components so that v is reachable from w if and only if they are in the same connected component . Depth-First-Search(G: graph): for all v \u2208 V mark v unvisited: #initialize all vertices as un visted using counter cc cc = 1 for v \u2208 V : # V contains all vertices v of the single connected component V if not visited(v):` Explore(v) cc = cc + 1 # increase the counter so it's giving a different mark to every vertices # in a single component Explore: Explore(v: vertix): visited(v) = true # mark that this vertix has visted CCnum(v) = cc # mark all vertices in the same component with the same counter for (v, w) \u2208 E: # check if there are still unvisted vertices in v niebourghs if not visited(w): Explore(w) Each new explore() finds new single connected component . Runtime O(|V: vertices | + |E: edges|) . Previsit and Postvisit Functions you might want to track more data while you going over the vertices, these data can be tracked using preVistit() and postVisit() functions. adding pre and post visits functions to DSF() in the Explore() : ```python Explore(v: vertix): visited(v) = true previsit(v) # execute pre visit for (v, w) \u2208 E: # adjacents if not visited(w): explore(w) postvisit(v) ####### def pre visit and posy vists ######## clock = 1 previsit(v): pre(v) = clock clock = clock + 1 postvisit(v): post(v) = clock clock = clock + 1 ``` week2: Directed Graphs Directed Graph : a graph where each edge has a start vertex and an end vertex. Directed graphs might be used to represent: Streets with one-way roads. Links between webpages. Followers on social network. Dependencies between tasks Directed DFS : Only follow directed edges. explore(v) finds all vertices reachable from v. Can still compute pre- and postorderings. cycle : A cycle in a graph G is a sequence of vertices v1, v2, . . . , vn so that (v1, v2),(v2, v3), . . . ,(vn\u22121, vn),(vn, v1) are all edges. If G contains a cycle, it cannot be linearly ordered . DAGs : A directed graph G is a Directed Acyclic Graph (or DAG) if it has no cycles. Example: only A is a DAG Any DAG can be linearly ordered. Topological Sort Last Vertex : a vertex that cannot have any edges pointing out of it. source : a vertex with no incoming edges. sink : a vertex with no outgoing edges, simply it's a last vertix . Example: red vertices are sinks topological sort idea: 1. Find sink. 2. Put that sink at end of order. 3. Remove the sink from graph. 4. Repeat. finding a sink: to find a sink we need to follow the path pointing to this sink until we : Cannot extend => we found a sink. Repeat a previous vertex => we found a cycle. Topological sort algorithm: ```python LinearOrder(G): while G non-empty: Follow a path until cannot extend Find sink v Put v at end of order Remove v from G LinearOrder(G) # G is now less by 1 vertix. ## Runtime O(|V|^2) ``` weaknesses in the previous algorithm: Retrace same path every time. every time we start from the begining, sowe can: Instead only back up as far as necessary . Optimized topological sort TopologicalSort(G): DFS(G) # run depth first search with pre and post order functions sort vertices by reverse post-order # greater post-order value comes first in the output. If G is a DAG, with an edge u -> v, so: post(u) > post(v) .","title":"Algorithms on Graphs"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#algorithms-on-graphs","text":"graphs are used in: represent Internet pages and the connections between them. maps social networks. An (undirected) Graph is a collection V of vertices, and a collection E of edges each of which connects a pair of vertices. Drawing Graphs: Vertices: Points. Edges: Lines. Loops connect a vertex to itself. Multiple edges between same vertices. Represinting Graphs: List of all edges: Edges: (A, B), (A, C), (A,D), (C,D) Adjacency Matrix: Matrix. Entries 1 if there is an edge, 0 if there is not. Adjacency List : For each vertex, a list of adjacent vertices. time cost for each of the previous Graph representaions:","title":"Algorithms on Graphs"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#week1-exploring-undirected-graphs","text":"A path in a graph G is a sequence of vertices v0, v1, . . . , vn so that for all i, (vi , vi+1) is an edge of G. operations on graphs: Reachability: outputs The collection of vertices v of G so that there is a path from s to v. connectivity: outputs The connected components of G.","title":"Week1: Exploring Undirected Graphs"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#reachability-all-components","text":"All Component(s: ): DiscoveredNodes = [] while there is an edge e leaving DiscoveredNodes that has not been explored: add vertex at other end of e to DiscoveredNodes return DiscoveredNodes Visit Markers : To keep track of vertices found we Give each vertex boolean visited(v). Unprocessed Vertices: Keep a list of vertices with edges left to check.","title":"Reachability (All components)"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#depth-first-ordering","text":"We will explore new edges in Depth First order. We will follow a long path forward, only backtracking when we hit a dead end . Explore(v: vertix): visited(v) = true for (v, w) \u2208 E: # E contains all niebourghs w of v if not visited(w): Explore(w)","title":"Depth First Ordering"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#connectivity","text":"The vertices of a graph G can be partitioned into Connected Components so that v is reachable from w if and only if they are in the same connected component . Depth-First-Search(G: graph): for all v \u2208 V mark v unvisited: #initialize all vertices as un visted using counter cc cc = 1 for v \u2208 V : # V contains all vertices v of the single connected component V if not visited(v):` Explore(v) cc = cc + 1 # increase the counter so it's giving a different mark to every vertices # in a single component Explore: Explore(v: vertix): visited(v) = true # mark that this vertix has visted CCnum(v) = cc # mark all vertices in the same component with the same counter for (v, w) \u2208 E: # check if there are still unvisted vertices in v niebourghs if not visited(w): Explore(w) Each new explore() finds new single connected component . Runtime O(|V: vertices | + |E: edges|) .","title":"Connectivity"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#previsit-and-postvisit-functions","text":"you might want to track more data while you going over the vertices, these data can be tracked using preVistit() and postVisit() functions. adding pre and post visits functions to DSF() in the Explore() : ```python Explore(v: vertix): visited(v) = true previsit(v) # execute pre visit for (v, w) \u2208 E: # adjacents if not visited(w): explore(w) postvisit(v) ####### def pre visit and posy vists ######## clock = 1 previsit(v): pre(v) = clock clock = clock + 1 postvisit(v): post(v) = clock clock = clock + 1 ```","title":"Previsit and Postvisit Functions"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#week2-directed-graphs","text":"Directed Graph : a graph where each edge has a start vertex and an end vertex. Directed graphs might be used to represent: Streets with one-way roads. Links between webpages. Followers on social network. Dependencies between tasks Directed DFS : Only follow directed edges. explore(v) finds all vertices reachable from v. Can still compute pre- and postorderings. cycle : A cycle in a graph G is a sequence of vertices v1, v2, . . . , vn so that (v1, v2),(v2, v3), . . . ,(vn\u22121, vn),(vn, v1) are all edges. If G contains a cycle, it cannot be linearly ordered . DAGs : A directed graph G is a Directed Acyclic Graph (or DAG) if it has no cycles. Example: only A is a DAG Any DAG can be linearly ordered.","title":"week2: Directed Graphs"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#topological-sort","text":"Last Vertex : a vertex that cannot have any edges pointing out of it. source : a vertex with no incoming edges. sink : a vertex with no outgoing edges, simply it's a last vertix . Example: red vertices are sinks topological sort idea: 1. Find sink. 2. Put that sink at end of order. 3. Remove the sink from graph. 4. Repeat. finding a sink: to find a sink we need to follow the path pointing to this sink until we : Cannot extend => we found a sink. Repeat a previous vertex => we found a cycle. Topological sort algorithm: ```python LinearOrder(G): while G non-empty: Follow a path until cannot extend Find sink v Put v at end of order Remove v from G LinearOrder(G) # G is now less by 1 vertix. ## Runtime O(|V|^2) ``` weaknesses in the previous algorithm: Retrace same path every time. every time we start from the begining, sowe can: Instead only back up as far as necessary .","title":"Topological Sort"},{"location":"knowledge-base/general/algorithms/algorithms-on-graphs/#optimized-topological-sort","text":"TopologicalSort(G): DFS(G) # run depth first search with pre and post order functions sort vertices by reverse post-order # greater post-order value comes first in the output. If G is a DAG, with an edge u -> v, so: post(u) > post(v) .","title":"Optimized topological sort"},{"location":"knowledge-base/general/algorithms/algorithms/","text":"Algorithms Alogrithms 1&2 - university of Princeton : couresera page , My notes are in this file. data structures and algorithms : coursera page My notes Repo intro Best resource: https://algs4.cs.princeton.edu/home/ Resource: https://introcs.cs.princeton.edu/java/home/ \u201c An algorithm must be seen to be believed. \u201d \u2014 Donald Knuth \u201c Algorithms + Data Structures = Programs. \u201d \u2014 Niklaus Wirth \u201c Algorithms: a common language for nature, human, and computer. \u201d \u2014 Avi Wigderson General notes cost : N^2 > N > lg N > 1 . cost: quadratic > linear > logaritmic > const cost for N=1000 : N^2 = 1000000 - quadratic. N = 1000 - lenear lg N = 10 - logaritmic lg* N = 0-5 - almost const 1 = fixed number - const in practice: you start using quick sort algorithm, if you find it a bit slow: you stop and chamge to heap sort studying algorithms: algorithms stuff knapsack problem here: https://github.com/ahmad-ali14/data-structures-and-algorithms/blob/master/algorithm-toolbox/week3/maximum_loot.js algorithm for making a good algorithm: always start with a naiive algorithm and make it works, normally slow. next find a standard toolbox to help you: greedy algorithm. divide and conqur. dynamic programming. optimize your algorithm. more on algorithms here: https://github.com/aa947/data-structures-and-algorithms/tree/master/algorithm-toolbox greedy algorithm : javascript 1- make the first move. 2- test if it's a safe move or start from the begining 3- test if that move is optimized or optimize it the most 4- you get a sub-problem handle it with the same approach.","title":"Algorithms"},{"location":"knowledge-base/general/algorithms/algorithms/#algorithms","text":"Alogrithms 1&2 - university of Princeton : couresera page , My notes are in this file. data structures and algorithms : coursera page My notes Repo intro Best resource: https://algs4.cs.princeton.edu/home/ Resource: https://introcs.cs.princeton.edu/java/home/ \u201c An algorithm must be seen to be believed. \u201d \u2014 Donald Knuth \u201c Algorithms + Data Structures = Programs. \u201d \u2014 Niklaus Wirth \u201c Algorithms: a common language for nature, human, and computer. \u201d \u2014 Avi Wigderson","title":"Algorithms"},{"location":"knowledge-base/general/algorithms/algorithms/#general-notes","text":"cost : N^2 > N > lg N > 1 . cost: quadratic > linear > logaritmic > const cost for N=1000 : N^2 = 1000000 - quadratic. N = 1000 - lenear lg N = 10 - logaritmic lg* N = 0-5 - almost const 1 = fixed number - const in practice: you start using quick sort algorithm, if you find it a bit slow: you stop and chamge to heap sort studying algorithms: algorithms stuff knapsack problem here: https://github.com/ahmad-ali14/data-structures-and-algorithms/blob/master/algorithm-toolbox/week3/maximum_loot.js algorithm for making a good algorithm: always start with a naiive algorithm and make it works, normally slow. next find a standard toolbox to help you: greedy algorithm. divide and conqur. dynamic programming. optimize your algorithm. more on algorithms here: https://github.com/aa947/data-structures-and-algorithms/tree/master/algorithm-toolbox greedy algorithm : javascript 1- make the first move. 2- test if it's a safe move or start from the begining 3- test if that move is optimized or optimize it the most 4- you get a sub-problem handle it with the same approach.","title":"General notes"},{"location":"knowledge-base/general/algorithms/freecodecamp/","text":"Free Code Camp Algorithms section symetric differnce: https://www.freecodecamp.org/learn/coding-interview-prep/algorithms/find-the-symmetric-difference inventory update : https://www.freecodecamp.org/learn/coding-interview-prep/algorithms/inventory-update","title":"Free Code Camp Algorithms section"},{"location":"knowledge-base/general/algorithms/freecodecamp/#free-code-camp-algorithms-section","text":"symetric differnce: https://www.freecodecamp.org/learn/coding-interview-prep/algorithms/find-the-symmetric-difference inventory update : https://www.freecodecamp.org/learn/coding-interview-prep/algorithms/inventory-update","title":"Free Code Camp Algorithms section"},{"location":"knowledge-base/general/algorithms/mit6006/","text":"Algorithms Notes This is a summary of the course on MIT open source here Lecture 2: Models of Computation pdf for x in L costs linear time o(n) A1 + A2 adding 2 arrays, creates an empty array then add every elemnt to it, costs 1 + o(A1) + o(A2) Arr.length costs constant o(1) Arr.sort() costs n * log n Document Distance Problem \u2014 compute d(D1, D2) split each document into words count word frequencies (document vectors) compute dot product (& divide) lecture 3: Insertion Sort, Merge Sort pdf sorting make things easier, like binary srearch and find the median Finding the median in an array simply sort the array, and look to the elemnt at n/2 . costs contatnt time o(1) if you start from sorted array. Insertion sort insert key A[j] into the (already sorted) sub-array A[1 .. j-1]. by pairwise key-swaps down to its right position. costs o(n^2) cause, o(n^2) for compares, o(n^2) for the swaps. => o(n) + o(n) = o(n^2) Binary Insertion sort insert key A[j] into the (already sorted) sub-array A[1 ..j-1]. Use binary search to find the right position. costs (Complexity): \u0398(n log n) for comparisons, and \u0398(n^2) for swaps. Merge Sort recurrsion. split => sort splits => merge sorted splits. need to copy the array first, so it tskes more space than insert sort. costs o(n) extra aux space. costs o(n log n) In-place sorting do sorting without copying the arrays, costs o(1) auxiliary space. used in insertion sort. Heap priority queue","title":"Algorithms Notes"},{"location":"knowledge-base/general/algorithms/mit6006/#algorithms-notes","text":"This is a summary of the course on MIT open source here","title":"Algorithms Notes"},{"location":"knowledge-base/general/algorithms/mit6006/#lecture-2-models-of-computation-pdf","text":"for x in L costs linear time o(n) A1 + A2 adding 2 arrays, creates an empty array then add every elemnt to it, costs 1 + o(A1) + o(A2) Arr.length costs constant o(1) Arr.sort() costs n * log n","title":"Lecture 2: Models of Computation pdf"},{"location":"knowledge-base/general/algorithms/mit6006/#document-distance-problem-compute-dd1-d2","text":"split each document into words count word frequencies (document vectors) compute dot product (& divide)","title":"Document Distance Problem \u2014 compute d(D1, D2)"},{"location":"knowledge-base/general/algorithms/mit6006/#lecture-3-insertion-sort-merge-sort-pdf","text":"sorting make things easier, like binary srearch and find the median","title":"lecture 3: Insertion Sort, Merge Sort pdf"},{"location":"knowledge-base/general/algorithms/mit6006/#finding-the-median-in-an-array","text":"simply sort the array, and look to the elemnt at n/2 . costs contatnt time o(1) if you start from sorted array.","title":"Finding the median in an array"},{"location":"knowledge-base/general/algorithms/mit6006/#insertion-sort","text":"insert key A[j] into the (already sorted) sub-array A[1 .. j-1]. by pairwise key-swaps down to its right position. costs o(n^2) cause, o(n^2) for compares, o(n^2) for the swaps. => o(n) + o(n) = o(n^2)","title":"Insertion sort"},{"location":"knowledge-base/general/algorithms/mit6006/#binary-insertion-sort","text":"insert key A[j] into the (already sorted) sub-array A[1 ..j-1]. Use binary search to find the right position. costs (Complexity): \u0398(n log n) for comparisons, and \u0398(n^2) for swaps.","title":"Binary Insertion sort"},{"location":"knowledge-base/general/algorithms/mit6006/#merge-sort","text":"recurrsion. split => sort splits => merge sorted splits. need to copy the array first, so it tskes more space than insert sort. costs o(n) extra aux space. costs o(n log n)","title":"Merge Sort"},{"location":"knowledge-base/general/algorithms/mit6006/#in-place-sorting","text":"do sorting without copying the arrays, costs o(1) auxiliary space. used in insertion sort.","title":"In-place sorting"},{"location":"knowledge-base/general/algorithms/mit6006/#heap","text":"priority queue","title":"Heap"},{"location":"knowledge-base/general/algorithms/quick_find/","text":"quick-find eager approach we follow the ids, until we find same id. 2 elements are connected if they have the same id. find easy, union is slow. cost N^2 resource: https://www.coursera.org/learn/algorithms-part1/lecture/EcF3P/quick-find Example: java public class QuickFindUF { private int[] id; public QuickFindUF(int N) { id = new int[N]; for (int i = 0; i < N; i++) id[i] = i; } public boolean connected(int p, int q) { return id[p] == id[q]; } public void union(int p, int q) { int pid = id[p]; int qid = id[q]; for (int i = 0; i < id.length; i++) if (id[i] == pid) id[i] = qid; } }","title":"quick-find"},{"location":"knowledge-base/general/algorithms/quick_find/#quick-find","text":"eager approach we follow the ids, until we find same id. 2 elements are connected if they have the same id. find easy, union is slow. cost N^2 resource: https://www.coursera.org/learn/algorithms-part1/lecture/EcF3P/quick-find Example: java public class QuickFindUF { private int[] id; public QuickFindUF(int N) { id = new int[N]; for (int i = 0; i < N; i++) id[i] = i; } public boolean connected(int p, int q) { return id[p] == id[q]; } public void union(int p, int q) { int pid = id[p]; int qid = id[q]; for (int i = 0; i < id.length; i++) if (id[i] == pid) id[i] = qid; } }","title":"quick-find"},{"location":"knowledge-base/general/algorithms/quick_union/","text":"quick-union lazy approach: avoid doing work until we have to. we follow the parent roots until we find a parent points to itself, this will be the parent of all elements in the tree. 2 elements are connectd if they have the same parent root. union is easy, find is slow. cost N resource: https://www.coursera.org/learn/algorithms-part1/lecture/ZgecU/quick-union Example: java public class QuickFindUF { private int[] id; public QuickFindUF(int N) { id = new int[N]; for (int i = 0; i < N; i++) id[i] = i; } public boolean connected(int p, int q) { return id[p] == id[q]; } public void union(int p, int q) { int pid = id[p]; int qid = id[q]; for (int i = 0; i < id.length; i++) if (id[i] == pid) id[i] = qid; } } quick-union Improvments 1. weighting while implementing, avoid long trees. track the number of objects in each tree, then put the short (small) tree under the long tree. cost lg N = log(2) N Ex: N=1000 => lg N = 10 , N=1000000 => lg N = 20 , N=1000000000 => lg N = 30 . -Example: Modify quick-union union function: java public void union(int p, int q) { int i = root(p); int j = root(q); if (i == j) return; if (sz[i] < sz[j]) { id[i] = j; sz[j] += sz[i]; } else { id[j] = i; sz[i] += sz[j]; } } 2. path-compression while searching, change the pointers of each sub-tree to point directly to the parent root. flatten the tree. Example: Modify quick-union-weighting root function: java private int root(int i) { while (i != id[i]) { id[i] = id[id[i]]; i = id[i]; } return i; }","title":"quick-union"},{"location":"knowledge-base/general/algorithms/quick_union/#quick-union","text":"lazy approach: avoid doing work until we have to. we follow the parent roots until we find a parent points to itself, this will be the parent of all elements in the tree. 2 elements are connectd if they have the same parent root. union is easy, find is slow. cost N resource: https://www.coursera.org/learn/algorithms-part1/lecture/ZgecU/quick-union Example: java public class QuickFindUF { private int[] id; public QuickFindUF(int N) { id = new int[N]; for (int i = 0; i < N; i++) id[i] = i; } public boolean connected(int p, int q) { return id[p] == id[q]; } public void union(int p, int q) { int pid = id[p]; int qid = id[q]; for (int i = 0; i < id.length; i++) if (id[i] == pid) id[i] = qid; } }","title":"quick-union"},{"location":"knowledge-base/general/algorithms/quick_union/#quick-union-improvments","text":"","title":"quick-union Improvments"},{"location":"knowledge-base/general/algorithms/quick_union/#1-weighting","text":"while implementing, avoid long trees. track the number of objects in each tree, then put the short (small) tree under the long tree. cost lg N = log(2) N Ex: N=1000 => lg N = 10 , N=1000000 => lg N = 20 , N=1000000000 => lg N = 30 . -Example: Modify quick-union union function: java public void union(int p, int q) { int i = root(p); int j = root(q); if (i == j) return; if (sz[i] < sz[j]) { id[i] = j; sz[j] += sz[i]; } else { id[j] = i; sz[i] += sz[j]; } }","title":"1. weighting"},{"location":"knowledge-base/general/algorithms/quick_union/#2-path-compression","text":"while searching, change the pointers of each sub-tree to point directly to the parent root. flatten the tree. Example: Modify quick-union-weighting root function: java private int root(int i) { while (i != id[i]) { id[i] = id[id[i]]; i = id[i]; } return i; }","title":"2.  path-compression"},{"location":"knowledge-base/general/algorithms/union_find/","text":"union-find Read in number of objects N from standard input. text -\u30fbRepeat: \u2013 read in pair of integers from standard input \u2013 if they are not yet connected, connect them and print out pair resource: https://d3c33hcgiwev3.cloudfront.net/_b65e7611894ba175de27bd14793f894a_15UnionFind.pdf?Expires=1587945600&Signature=acCR6aDGXnA7luzAqFrIeDW6riwnUjsEuigduiwEkwFUkL9tvIH5k39Lo1bSy00AP0nC1QBlXexq6fqaGslGLbIbWBOc0jO99mi09BCFV6InmXXlPIIgk90DDf9Vk67O4tEs-jSRma7NSCCohSE6~WCb36UWOGVLQOIq7Amm5DY_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A EX: Monte Carlo Simulation ` general example ```java public static void main(String[] args) { int N = StdIn.readInt(); UF uf = new UF(N); while (!StdIn.isEmpty()) { int p = StdIn.readInt(); int q = StdIn.readInt(); if (!uf.connected(p, q)){ uf.union(p, q); StdOut.println(p + \" \" + q); } } } ```","title":"union-find"},{"location":"knowledge-base/general/algorithms/union_find/#union-find","text":"Read in number of objects N from standard input. text -\u30fbRepeat: \u2013 read in pair of integers from standard input \u2013 if they are not yet connected, connect them and print out pair resource: https://d3c33hcgiwev3.cloudfront.net/_b65e7611894ba175de27bd14793f894a_15UnionFind.pdf?Expires=1587945600&Signature=acCR6aDGXnA7luzAqFrIeDW6riwnUjsEuigduiwEkwFUkL9tvIH5k39Lo1bSy00AP0nC1QBlXexq6fqaGslGLbIbWBOc0jO99mi09BCFV6InmXXlPIIgk90DDf9Vk67O4tEs-jSRma7NSCCohSE6~WCb36UWOGVLQOIq7Amm5DY_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A EX: Monte Carlo Simulation ` general example ```java public static void main(String[] args) { int N = StdIn.readInt(); UF uf = new UF(N); while (!StdIn.isEmpty()) { int p = StdIn.readInt(); int q = StdIn.readInt(); if (!uf.connected(p, q)){ uf.union(p, q); StdOut.println(p + \" \" + q); } } } ```","title":"union-find"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/","text":"algoritm toolbox the course link is here week1: Programming Challenges week2: Algorithmic Warm-up week3: Greedy Algorithms week4: Divide-and-Conquer braek the problem down into a set of non-overlaping sub-problems. sub-problems have the same type as the original we start solving sub problems in order. after solving all sub-problems we combine the results. since all sub-problems are of the same type, when we solve a sub-problem and iterate the solution recurresively to the rest of the problems. Definitions key, K: the elemet we are looking for. Array, A: the array we searching in linear search loop through each elemnt of the array, determine if we find the element that we are looking for or not. after each search we face a sub-array (the main array execluded the previous element) with the same type of problem. we define the time that alogrithm takes as recurrence relation witch is an equation T . worst case : element not found, defined by: T(n) = T(n-1) + c => cost = o(n) . best (base) case: empty array, T(0) = c => cost = o(1) . used in serch for the free elemnts stored in a linked-list . Binary search dividing problems into halves, also uses recurresion. starts by sorting the array. we calculate the middle index mid of the sorted array, search for key at that index. if A[mid] == key were done. else if: key > A[mid] we do another binary search on the top half of the sorted array. else if key < A[mid] we do binary search on the first half. if the key is not found. we will return the best index to put our key in this sorted-array . worst case: element not found, T(n) = T(n/2) + c => cost = Log2 (n) base case: empty array, T(0) = c => cost = o(1) . Augmented Array a sorted array that keep tracks element indexes in the original array before sorting. polynomial multiplication usage: error-correcting code. large integer multiplication. generating functions. convolution in signal processing. input: n=3, A=(3,2,5), B=(5,1,2) => output: C=(15,13,33,9,10) . input: n = 2, A = (3, 4) B = (1, 2) => output: C=(3, 10, 8) corrseponding to: (3x+4) * (1x + 2) = 3x^2 + 10x + 8 . Naiive algorithm for solving polynomial multiplication problem function MultPoly(A, B, n) { /** * A is polynomial as [3, 2, 5]; * B is another polynomial * n is the hiegher degree of both polynomial (hieghest power of X) * */ let product = new Array(2 * n - 1); for (let i = 0; i < 2 * n - 1; i++) { product[i] = 0; } for (let i = 0; i < n; i++) { for (let j = 0; j < n; j++) { product[i + j] = A[i] + B[j] + product[i + j]; } } return product; } cost (runtime) o(n^2) ; Naiive divide-and-conquer algorithm for solving polynomial multiplication function MultPoly2Wrapper(A, B, n){ // n needs to be divided by 2, if not add another degree to the polynomial, // were its values is 0. function MultPoly2(A, B, n, a1, b1){ /** * A is polynomial as [3, 2, 5]; * B is another polynomial * n is the hiegher degree of both polynomial (hieghest power of X) * a1 specify the lower bound of the beginning of the sub-polynomials that are being multiplied * b1 specify the lower bound of the beginning of the sub-polynomials that are being multiplied * Mathematics Info in this photo: https://i.imgur.com/QZLIBQK.png * programming info in this photo: https://i.imgur.com/UWKFjWB.png */ let R = new Array(2*n-1); for(let i=0; i<2*n-1; i++){ R[i] = 0; } if(n == 1){ R[0] = A[a1] * B[b1]; return R; } //doing first half for(let i=0; i<n-1; i++ ){ R[i] = MultPoly2 (A, B, n/2, a1, b1); } //we kept R[n-1] empty //doing second half for(let j=n; j<2*n-1; j++ ){ R[j] = MultPoly2 (A, B, n/2, a1 + n/2, b1 + n/2); } let D0E1= MultPoly2 (A, B, n/2, a1, b1 + n/2); let D1E0= MultPoly2 (A, B, n/2, a1 + n/2, b1); // ??????? let D1E1= MultPoly2 (A, B, n/2, a1 + n/2, b1 + n/2); let D0E0= MultPoly2 (A, B, n/2, a1, b1); //filling the empty elemnt R[n-1] let R[n-1] = D1E0 + D0E1; return R; } } cost T(n) = 4 * T(n/2) + n*c => 4 * n * log(n) + n => n2. Faster divide-and-conquer algorithm for solving polynomial multiplication /** * Maths Explanation here: https://i.imgur.com/qa0to77.png */ function MultPoly3wrapper(A, B, n){ // n needs to be divided by 2, if not add another degree to the polynomial, // were its values is 0. let D1E1= //calcualted in the previous function; let D0E0= //calculated before let (D1+D0) + (E1+E0) = //calculated as the previous function. } karatsuba approach , do 3 multiplications instead of 4. cost T(n) = 3 * T(n/2) + n*c => 3 * n * log(n) + c * n => nlog3 => n1.58. Master Theorem for calculating cost in divide-and-concouer cost, binary search, problem divided into 2, each cost constant time c : T(n) = T(n/2) +c => log n divide-and-conquer 1, problem divided into 4, each cost linear time n : T(n) = 4 * T(n/2) + n * c => nlog 4 => n2 divide-and-conquer 2, problem divided into 3, each cost linear time n : T(n) = 3 * T(n/2) + n * c => nlog 3 => n1.58 divide-and-conquer 3, problem divided into 2, each cost linear time n : T(n) = 2 * T(n/2) + n * c => nlog 2 => nlog(n) => o(n log n) more info [here]( https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms) ) then Theorom: let T(n) = a * T(n/b) + o(n^d) if d > logb ^a => T(n) = o(n^d) if d = logb ^a => T(n) = o(n^d log n) if d < logb ^a => T(n) = o(n^logb ^a) selection sort find the minimum element => swap with first => reprat this process. /** * psudeo code here: https://i.imgur.com/IPq72GD.png */ function selectionSort(A) { let n = A.length; for (let i = 0; i < A.length; i++) { let minIndex = i; for (let j = i + 1; j < A.length; j++) { if (A[j] < A[minIndex]) { minIndex = j; } if (minIndex !== i) { let c = A[minIndex]; swap(A, A[i], c); // A[0,i] is now sorted. } } } return A; } function swap(A, B, C) { let c = A.indexOf(C); let b = A.indexOf(B); let temp = B; A[b] = C; A[c] = temp; } cost o(n^2) Merge sort split => sort splits => merge splits. merging has its own rules, evaluate the first elemnt from each arrays to be merged, we choose their minimum and put it in the result => repeat. /** * psudo code: https://i.imgur.com/rGmTGr4.png */ function mergeSort(A) { if (A.length < 2) { return A; } let m = Math.floor(A.length / 2); let BB = mergeSort(A.slice(0, m)); let CC = mergeSort(A.slice(m, A.length)); let AA = merge(BB, CC); return AA; } /** * psuedo code: https://i.imgur.com/xlKWjXX.png */ function merge(B, C) { let D = []; while (B.length && C.length) { if (B[0] <= C[0]) { D.push(B[0]); B.splice(0, 1); } else { D.push(C.shift()); } } while (B.length) { D.push(B.shift()); } while (C.length) { D.push(C.shift()); } return D; } cost n * log n counting sort the selection sort and merge sort use object comparision to complete the sort. if the array is consesting from repitive small ints we can apply counting sort count occurences of each element => store counts to each elemnt (n) => fill up the result array by each elemnt reptitve with its corresponding count. /** * psuedo code: https://i.imgur.com/Nqb0cCg.png * Now, works only for postivie ints. */ function countSort(A) { let counts = {}; //let s = Math.min(...A); let m = Math.max(...A); // console.log('m', m); for (let i = 0; i <= m; i++) { counts[i] = 0; } //console.log(counts) for (let i = 0; i < A.length; i++) { // if(Object.keys(counts).includes(A[i].toString())){ // if(A.includes(Number(counts[i.toString()]))){ counts[A[i]]++; // console.log('obj inside', counts); //} } let countsArray = Object.keys(counts); //.every(e => e.toString()); // console.log('counts Array', countsArray); // console.log('count obj', counts) let result = []; for (let i = 0; i < countsArray.length; i++) { if (counts[i] > 0) { let n = counts[i]; //console.log('n', n) for (let j = 0; j < n; j++) { result.push(Number(countsArray[i])); } } } return result; } costs o( Array.length + counts.length ) => o(n) quick sort take first elemnt A[0] => rearrange the array so A[0] will be in the middle, all elements less or equal to A[0] will be on the left, all ements greater than A[0] will be on the right. A[0] is in its final positon => we need to sort [left Array] and [right Array] => repeat. partion or pivot we choose it, either first or last element or in the middle or any element, however, it's important to skip this element in the for loop . /** * psuedo code: https://i.imgur.com/eczLG6T.png */ const quickSort = (array) => { if (array.length < 2) return array; const pivot = array[array.length - 1]; const left = [], right = []; for (let i = 0; i < array.length - 1; i++) { if (array[i] < pivot) left.push(array[i]); else right.push(array[i]); } return [...quickSort(left), pivot, ...quickSort(right)]; }; best animation: https://www.youtube.com/watch?v=cnzIChso3cc costs o(n^2) at worst: right or lift is empty, o(n log n) at average: right and left are nearly equal. select our pivot randomly will give us more balanced left, right arrays => costs less, we should skipt it from the loop. quick sort is not so fast on Arrays with few uniqe elements : when you have few elemnets that are repeated. costs o(n^2) quick3 quick sort on array with few unique elements. we partion to get 3 sub-arrays insted of 2: left, middle, right. left: All elements less than pivot middle: all elemnts equal to pivot lift: all elements greateer than pivot /** * psuedo code: https://i.imgur.com/PaMqD6E.png */ const quickSort3 = (array) => { if (array.length < 2) return array; const pivot = array[array.length - 1]; const left = [], right = []; middle = []; for (let i = 0; i < array.length - 1; i++) { if (array[i] == pivot) middle.push(array[i]); if (array[i] < pivot) left.push(array[i]); else right.push(array[i]); } return [...quickSort3(left), ...middle, ...quickSort3(right)]; }; notes about quick sort In-place algorithm : does not use extra auxilary space on the memory. elemeiate tail recursion or Tail recursion call optimization : GeekForGeek article psuedo code even if random pivot is faster, it makes our program behaves differently on the same dataset, so it's not welcomed. intro sort : when choosing the pivot, we select first, last and middle elemnts of the Array, then we compare these pivots => choose the median pivot as owr pivot. Intro quickSort const IntroquickSort = (array) => { if (array.length < 2) return array; //comparing pivots const pivot1 = array[0]; const pivot2 = array[Math.floor((array.length - 1) / 2)]; const pivot3 = array[array.length - 1]; //chosen pivot let pivot = Math.min(pivot1, pivot2, pivot3); let pivotIndex = array.indexOf(pivot); const left = [], right = []; for (let i = 0; i < array.length; i++) { if (i === pivotIndex) continue; else if (array[i] < pivot) left.push(array[i]); else right.push(array[i]); } return [...IntroquickSort(left), pivot, ...IntroquickSort(right)]; }; costs o(n log n) at worst. Array sorting algorithms cost summary week5: Dynamic programming 1 Greedy change psuedo code: https://i.imgur.com/3KGLxLJ.png recursive change psuedo code: https://i.imgur.com/DW0MLfG.png dynamic prgramming change (dp change): psuedo code: https://i.imgur.com/DL7Cpeo.png Edit distance psuedo code: https://i.imgur.com/iyCgqR1.png resource https://www.dropbox.com/s/qxzh146jd72188d/dynprog.pdf?dl=0 week 6: dynamic programming 2 knapsack with repetions psudeo code: https://i.imgur.com/4hQNath.png pdf: https://www.cc.gatech.edu/~rpeng/CS3510_F17/Notes/Oct2MoreDP.pdf video: https://www.youtube.com/watch?v=wFP5VHGHFdk&t=866s def unboundedKnapsack(W, n, val, wt): # dp[i] is going to store maximum # value with knapsack capacity i. dp = [0 for i in range(W + 1)] ans = 0 # Fill dp[] using above recursive formula for i in range(W + 1): for j in range(n): if (wt[j] <= i): dp[i] = max(dp[i], dp[i - wt[j]] + val[j]) return dp[W] # Driver program W = 100 val = [10, 30, 20] wt = [5, 10, 15] n = len(val) print(unboundedKnapsack(W, n, val, wt)) knapsack with repetition psuedo code: https://i.imgur.com/RDVqYi6.png def knapSack(W , wt , val , n): # Base Case if n == 0 or W == 0 : return 0 # If weight of the nth item is more than Knapsack of capacity # W, then this item cannot be included in the optimal solution if (wt[n-1] > W): return knapSack(W , wt , val , n-1) # return the maximum of two cases: # (1) nth item included # (2) not included else: return max(val[n-1] + knapSack(W-wt[n-1] , wt , val , n-1), knapSack(W , wt , val , n-1)) # To test above function val = [60, 100, 120] wt = [10, 20, 30] W = 50 n = len(val) print knapSack(W , wt , val , n) memoization psuedo code: https://i.imgur.com/k2tkdnd.png iterative algorithm : starts from the smaller problem into the larger ones recursive algirithm : starts from the largest problem into the smaller ones. resursive is slower. placing parentheses you take an arithmetic operation and choose where to put parentheses so it will maximize its output","title":"algoritm toolbox"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#algoritm-toolbox","text":"the course link is here","title":"algoritm toolbox"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#week1-programming-challenges","text":"","title":"week1: Programming Challenges"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#week2-algorithmic-warm-up","text":"","title":"week2: Algorithmic Warm-up"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#week3-greedy-algorithms","text":"","title":"week3: Greedy Algorithms"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#week4-divide-and-conquer","text":"braek the problem down into a set of non-overlaping sub-problems. sub-problems have the same type as the original we start solving sub problems in order. after solving all sub-problems we combine the results. since all sub-problems are of the same type, when we solve a sub-problem and iterate the solution recurresively to the rest of the problems.","title":"week4: Divide-and-Conquer"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#definitions","text":"key, K: the elemet we are looking for. Array, A: the array we searching in","title":"Definitions"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#linear-search","text":"loop through each elemnt of the array, determine if we find the element that we are looking for or not. after each search we face a sub-array (the main array execluded the previous element) with the same type of problem. we define the time that alogrithm takes as recurrence relation witch is an equation T . worst case : element not found, defined by: T(n) = T(n-1) + c => cost = o(n) . best (base) case: empty array, T(0) = c => cost = o(1) . used in serch for the free elemnts stored in a linked-list .","title":"linear search"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#binary-search","text":"dividing problems into halves, also uses recurresion. starts by sorting the array. we calculate the middle index mid of the sorted array, search for key at that index. if A[mid] == key were done. else if: key > A[mid] we do another binary search on the top half of the sorted array. else if key < A[mid] we do binary search on the first half. if the key is not found. we will return the best index to put our key in this sorted-array . worst case: element not found, T(n) = T(n/2) + c => cost = Log2 (n) base case: empty array, T(0) = c => cost = o(1) .","title":"Binary search"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#augmented-array","text":"a sorted array that keep tracks element indexes in the original array before sorting.","title":"Augmented Array"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#polynomial-multiplication","text":"usage: error-correcting code. large integer multiplication. generating functions. convolution in signal processing. input: n=3, A=(3,2,5), B=(5,1,2) => output: C=(15,13,33,9,10) . input: n = 2, A = (3, 4) B = (1, 2) => output: C=(3, 10, 8) corrseponding to: (3x+4) * (1x + 2) = 3x^2 + 10x + 8 .","title":"polynomial multiplication"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#naiive-algorithm-for-solving-polynomial-multiplication-problem","text":"function MultPoly(A, B, n) { /** * A is polynomial as [3, 2, 5]; * B is another polynomial * n is the hiegher degree of both polynomial (hieghest power of X) * */ let product = new Array(2 * n - 1); for (let i = 0; i < 2 * n - 1; i++) { product[i] = 0; } for (let i = 0; i < n; i++) { for (let j = 0; j < n; j++) { product[i + j] = A[i] + B[j] + product[i + j]; } } return product; } cost (runtime) o(n^2) ;","title":"Naiive algorithm for solving polynomial multiplication problem"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#naiive-divide-and-conquer-algorithm-for-solving-polynomial-multiplication","text":"function MultPoly2Wrapper(A, B, n){ // n needs to be divided by 2, if not add another degree to the polynomial, // were its values is 0. function MultPoly2(A, B, n, a1, b1){ /** * A is polynomial as [3, 2, 5]; * B is another polynomial * n is the hiegher degree of both polynomial (hieghest power of X) * a1 specify the lower bound of the beginning of the sub-polynomials that are being multiplied * b1 specify the lower bound of the beginning of the sub-polynomials that are being multiplied * Mathematics Info in this photo: https://i.imgur.com/QZLIBQK.png * programming info in this photo: https://i.imgur.com/UWKFjWB.png */ let R = new Array(2*n-1); for(let i=0; i<2*n-1; i++){ R[i] = 0; } if(n == 1){ R[0] = A[a1] * B[b1]; return R; } //doing first half for(let i=0; i<n-1; i++ ){ R[i] = MultPoly2 (A, B, n/2, a1, b1); } //we kept R[n-1] empty //doing second half for(let j=n; j<2*n-1; j++ ){ R[j] = MultPoly2 (A, B, n/2, a1 + n/2, b1 + n/2); } let D0E1= MultPoly2 (A, B, n/2, a1, b1 + n/2); let D1E0= MultPoly2 (A, B, n/2, a1 + n/2, b1); // ??????? let D1E1= MultPoly2 (A, B, n/2, a1 + n/2, b1 + n/2); let D0E0= MultPoly2 (A, B, n/2, a1, b1); //filling the empty elemnt R[n-1] let R[n-1] = D1E0 + D0E1; return R; } } cost T(n) = 4 * T(n/2) + n*c => 4 * n * log(n) + n => n2.","title":"Naiive divide-and-conquer algorithm for solving polynomial multiplication"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#faster-divide-and-conquer-algorithm-for-solving-polynomial-multiplication","text":"/** * Maths Explanation here: https://i.imgur.com/qa0to77.png */ function MultPoly3wrapper(A, B, n){ // n needs to be divided by 2, if not add another degree to the polynomial, // were its values is 0. let D1E1= //calcualted in the previous function; let D0E0= //calculated before let (D1+D0) + (E1+E0) = //calculated as the previous function. } karatsuba approach , do 3 multiplications instead of 4. cost T(n) = 3 * T(n/2) + n*c => 3 * n * log(n) + c * n => nlog3 => n1.58.","title":"Faster divide-and-conquer algorithm for solving polynomial multiplication"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#master-theorem","text":"for calculating cost in divide-and-concouer cost, binary search, problem divided into 2, each cost constant time c : T(n) = T(n/2) +c => log n divide-and-conquer 1, problem divided into 4, each cost linear time n : T(n) = 4 * T(n/2) + n * c => nlog 4 => n2 divide-and-conquer 2, problem divided into 3, each cost linear time n : T(n) = 3 * T(n/2) + n * c => nlog 3 => n1.58 divide-and-conquer 3, problem divided into 2, each cost linear time n : T(n) = 2 * T(n/2) + n * c => nlog 2 => nlog(n) => o(n log n) more info [here]( https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms) ) then Theorom: let T(n) = a * T(n/b) + o(n^d) if d > logb ^a => T(n) = o(n^d) if d = logb ^a => T(n) = o(n^d log n) if d < logb ^a => T(n) = o(n^logb ^a)","title":"Master Theorem"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#selection-sort","text":"find the minimum element => swap with first => reprat this process. /** * psudeo code here: https://i.imgur.com/IPq72GD.png */ function selectionSort(A) { let n = A.length; for (let i = 0; i < A.length; i++) { let minIndex = i; for (let j = i + 1; j < A.length; j++) { if (A[j] < A[minIndex]) { minIndex = j; } if (minIndex !== i) { let c = A[minIndex]; swap(A, A[i], c); // A[0,i] is now sorted. } } } return A; } function swap(A, B, C) { let c = A.indexOf(C); let b = A.indexOf(B); let temp = B; A[b] = C; A[c] = temp; } cost o(n^2)","title":"selection sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#merge-sort","text":"split => sort splits => merge splits. merging has its own rules, evaluate the first elemnt from each arrays to be merged, we choose their minimum and put it in the result => repeat. /** * psudo code: https://i.imgur.com/rGmTGr4.png */ function mergeSort(A) { if (A.length < 2) { return A; } let m = Math.floor(A.length / 2); let BB = mergeSort(A.slice(0, m)); let CC = mergeSort(A.slice(m, A.length)); let AA = merge(BB, CC); return AA; } /** * psuedo code: https://i.imgur.com/xlKWjXX.png */ function merge(B, C) { let D = []; while (B.length && C.length) { if (B[0] <= C[0]) { D.push(B[0]); B.splice(0, 1); } else { D.push(C.shift()); } } while (B.length) { D.push(B.shift()); } while (C.length) { D.push(C.shift()); } return D; } cost n * log n","title":"Merge sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#counting-sort","text":"the selection sort and merge sort use object comparision to complete the sort. if the array is consesting from repitive small ints we can apply counting sort count occurences of each element => store counts to each elemnt (n) => fill up the result array by each elemnt reptitve with its corresponding count. /** * psuedo code: https://i.imgur.com/Nqb0cCg.png * Now, works only for postivie ints. */ function countSort(A) { let counts = {}; //let s = Math.min(...A); let m = Math.max(...A); // console.log('m', m); for (let i = 0; i <= m; i++) { counts[i] = 0; } //console.log(counts) for (let i = 0; i < A.length; i++) { // if(Object.keys(counts).includes(A[i].toString())){ // if(A.includes(Number(counts[i.toString()]))){ counts[A[i]]++; // console.log('obj inside', counts); //} } let countsArray = Object.keys(counts); //.every(e => e.toString()); // console.log('counts Array', countsArray); // console.log('count obj', counts) let result = []; for (let i = 0; i < countsArray.length; i++) { if (counts[i] > 0) { let n = counts[i]; //console.log('n', n) for (let j = 0; j < n; j++) { result.push(Number(countsArray[i])); } } } return result; } costs o( Array.length + counts.length ) => o(n)","title":"counting sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#quick-sort","text":"take first elemnt A[0] => rearrange the array so A[0] will be in the middle, all elements less or equal to A[0] will be on the left, all ements greater than A[0] will be on the right. A[0] is in its final positon => we need to sort [left Array] and [right Array] => repeat. partion or pivot we choose it, either first or last element or in the middle or any element, however, it's important to skip this element in the for loop . /** * psuedo code: https://i.imgur.com/eczLG6T.png */ const quickSort = (array) => { if (array.length < 2) return array; const pivot = array[array.length - 1]; const left = [], right = []; for (let i = 0; i < array.length - 1; i++) { if (array[i] < pivot) left.push(array[i]); else right.push(array[i]); } return [...quickSort(left), pivot, ...quickSort(right)]; }; best animation: https://www.youtube.com/watch?v=cnzIChso3cc costs o(n^2) at worst: right or lift is empty, o(n log n) at average: right and left are nearly equal. select our pivot randomly will give us more balanced left, right arrays => costs less, we should skipt it from the loop. quick sort is not so fast on Arrays with few uniqe elements : when you have few elemnets that are repeated. costs o(n^2)","title":"quick sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#quick3","text":"quick sort on array with few unique elements. we partion to get 3 sub-arrays insted of 2: left, middle, right. left: All elements less than pivot middle: all elemnts equal to pivot lift: all elements greateer than pivot /** * psuedo code: https://i.imgur.com/PaMqD6E.png */ const quickSort3 = (array) => { if (array.length < 2) return array; const pivot = array[array.length - 1]; const left = [], right = []; middle = []; for (let i = 0; i < array.length - 1; i++) { if (array[i] == pivot) middle.push(array[i]); if (array[i] < pivot) left.push(array[i]); else right.push(array[i]); } return [...quickSort3(left), ...middle, ...quickSort3(right)]; };","title":"quick3"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#notes-about-quick-sort","text":"In-place algorithm : does not use extra auxilary space on the memory. elemeiate tail recursion or Tail recursion call optimization : GeekForGeek article psuedo code even if random pivot is faster, it makes our program behaves differently on the same dataset, so it's not welcomed. intro sort : when choosing the pivot, we select first, last and middle elemnts of the Array, then we compare these pivots => choose the median pivot as owr pivot.","title":"notes about quick sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#intro-quicksort","text":"const IntroquickSort = (array) => { if (array.length < 2) return array; //comparing pivots const pivot1 = array[0]; const pivot2 = array[Math.floor((array.length - 1) / 2)]; const pivot3 = array[array.length - 1]; //chosen pivot let pivot = Math.min(pivot1, pivot2, pivot3); let pivotIndex = array.indexOf(pivot); const left = [], right = []; for (let i = 0; i < array.length; i++) { if (i === pivotIndex) continue; else if (array[i] < pivot) left.push(array[i]); else right.push(array[i]); } return [...IntroquickSort(left), pivot, ...IntroquickSort(right)]; }; costs o(n log n) at worst.","title":"Intro quickSort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#array-sorting-algorithms-cost-summary","text":"","title":"Array sorting algorithms cost summary"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#week5-dynamic-programming-1","text":"","title":"week5: Dynamic programming 1"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#greedy-change","text":"psuedo code: https://i.imgur.com/3KGLxLJ.png","title":"Greedy change"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#recursive-change","text":"psuedo code: https://i.imgur.com/DW0MLfG.png","title":"recursive change"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#dynamic-prgramming-change-dp-change","text":"psuedo code: https://i.imgur.com/DL7Cpeo.png","title":"dynamic prgramming change (dp change):"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#edit-distance","text":"psuedo code: https://i.imgur.com/iyCgqR1.png","title":"Edit distance"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#resource","text":"https://www.dropbox.com/s/qxzh146jd72188d/dynprog.pdf?dl=0","title":"resource"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#week-6-dynamic-programming-2","text":"","title":"week 6: dynamic programming 2"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#knapsack-with-repetions","text":"psudeo code: https://i.imgur.com/4hQNath.png pdf: https://www.cc.gatech.edu/~rpeng/CS3510_F17/Notes/Oct2MoreDP.pdf video: https://www.youtube.com/watch?v=wFP5VHGHFdk&t=866s def unboundedKnapsack(W, n, val, wt): # dp[i] is going to store maximum # value with knapsack capacity i. dp = [0 for i in range(W + 1)] ans = 0 # Fill dp[] using above recursive formula for i in range(W + 1): for j in range(n): if (wt[j] <= i): dp[i] = max(dp[i], dp[i - wt[j]] + val[j]) return dp[W] # Driver program W = 100 val = [10, 30, 20] wt = [5, 10, 15] n = len(val) print(unboundedKnapsack(W, n, val, wt))","title":"knapsack with repetions"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#knapsack-with-repetition","text":"psuedo code: https://i.imgur.com/RDVqYi6.png def knapSack(W , wt , val , n): # Base Case if n == 0 or W == 0 : return 0 # If weight of the nth item is more than Knapsack of capacity # W, then this item cannot be included in the optimal solution if (wt[n-1] > W): return knapSack(W , wt , val , n-1) # return the maximum of two cases: # (1) nth item included # (2) not included else: return max(val[n-1] + knapSack(W-wt[n-1] , wt , val , n-1), knapSack(W , wt , val , n-1)) # To test above function val = [60, 100, 120] wt = [10, 20, 30] W = 50 n = len(val) print knapSack(W , wt , val , n)","title":"knapsack with repetition"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#memoization","text":"psuedo code: https://i.imgur.com/k2tkdnd.png iterative algorithm : starts from the smaller problem into the larger ones recursive algirithm : starts from the largest problem into the smaller ones. resursive is slower.","title":"memoization"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/#placing-parentheses","text":"you take an arithmetic operation and choose where to put parentheses so it will maximize its output","title":"placing parentheses"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/","text":"Algorithms Notes This is a summary of the course on MIT open source here Lecture 2: Models of Computation pdf for x in L costs linear time o(n) A1 + A2 adding 2 arrays, creates an empty array then add every elemnt to it, costs 1 + o(A1) + o(A2) Arr.length costs constant o(1) Arr.sort() costs n * log n Document Distance Problem \u2014 compute d(D1, D2) split each document into words count word frequencies (document vectors) compute dot product (& divide) lecture 3: Insertion Sort, Merge Sort pdf sorting make things easier, like binary srearch and find the median Finding the median in an array simply sort the array, and look to the elemnt at n/2 . costs contatnt time o(1) if you start from sorted array. Insertion sort insert key A[j] into the (already sorted) sub-array A[1 .. j-1]. by pairwise key-swaps down to its right position. costs o(n^2) cause, o(n^2) for compares, o(n^2) for the swaps. => o(n) + o(n) = o(n^2) Binary Insertion sort insert key A[j] into the (already sorted) sub-array A[1 ..j-1]. Use binary search to find the right position. costs (Complexity): \u0398(n log n) for comparisons, and \u0398(n^2) for swaps. Merge Sort recurrsion. split => sort splits => merge sorted splits. need to copy the array first, so it tskes more space than insert sort. costs o(n) extra aux space. costs o(n log n) In-place sorting do sorting without copying the arrays, costs o(1) auxiliary space. used in insertion sort. Heap priority queue","title":"Algorithms Notes"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#algorithms-notes","text":"This is a summary of the course on MIT open source here","title":"Algorithms Notes"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#lecture-2-models-of-computation-pdf","text":"for x in L costs linear time o(n) A1 + A2 adding 2 arrays, creates an empty array then add every elemnt to it, costs 1 + o(A1) + o(A2) Arr.length costs constant o(1) Arr.sort() costs n * log n","title":"Lecture 2: Models of Computation pdf"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#document-distance-problem-compute-dd1-d2","text":"split each document into words count word frequencies (document vectors) compute dot product (& divide)","title":"Document Distance Problem \u2014 compute d(D1, D2)"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#lecture-3-insertion-sort-merge-sort-pdf","text":"sorting make things easier, like binary srearch and find the median","title":"lecture 3: Insertion Sort, Merge Sort pdf"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#finding-the-median-in-an-array","text":"simply sort the array, and look to the elemnt at n/2 . costs contatnt time o(1) if you start from sorted array.","title":"Finding the median in an array"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#insertion-sort","text":"insert key A[j] into the (already sorted) sub-array A[1 .. j-1]. by pairwise key-swaps down to its right position. costs o(n^2) cause, o(n^2) for compares, o(n^2) for the swaps. => o(n) + o(n) = o(n^2)","title":"Insertion sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#binary-insertion-sort","text":"insert key A[j] into the (already sorted) sub-array A[1 ..j-1]. Use binary search to find the right position. costs (Complexity): \u0398(n log n) for comparisons, and \u0398(n^2) for swaps.","title":"Binary Insertion sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#merge-sort","text":"recurrsion. split => sort splits => merge sorted splits. need to copy the array first, so it tskes more space than insert sort. costs o(n) extra aux space. costs o(n log n)","title":"Merge Sort"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#in-place-sorting","text":"do sorting without copying the arrays, costs o(1) auxiliary space. used in insertion sort.","title":"In-place sorting"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/algorithms_notes/#heap","text":"priority queue","title":"Heap"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/week2/","text":"week2","title":"week2"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/week2/#week2","text":"","title":"week2"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/week2/week2/","text":"week2","title":"week2"},{"location":"knowledge-base/general/algorithms/examples/algorithm-toolbox/week2/week2/#week2","text":"","title":"week2"},{"location":"knowledge-base/general/api/","text":"","title":"Index"},{"location":"knowledge-base/general/api/api-list/","text":"List of Greet APIs Github Api: https://api.github.com/users/ahmad-ali14 dog images: https://dog.ceo/api/breeds/image/random greetings in all languages: https://codeyourfuture.herokuapp.com/api/greetings random facts about a number: http://numbersapi.com/42 facts about random year: http://numbersapi.com/random/year darksky: https://darksky.net/forecast/40.7127,-74.0059/us12/en code wars api: https://www.codewars.com/api/v1/users/ahmad.ali git lines of code for each repo: https://api.codetabs.com/v1/loc?github=:username/:repo","title":"List of Greet APIs"},{"location":"knowledge-base/general/api/api-list/#list-of-greet-apis","text":"Github Api: https://api.github.com/users/ahmad-ali14 dog images: https://dog.ceo/api/breeds/image/random greetings in all languages: https://codeyourfuture.herokuapp.com/api/greetings random facts about a number: http://numbersapi.com/42 facts about random year: http://numbersapi.com/random/year darksky: https://darksky.net/forecast/40.7127,-74.0059/us12/en code wars api: https://www.codewars.com/api/v1/users/ahmad.ali git lines of code for each repo: https://api.codetabs.com/v1/loc?github=:username/:repo","title":"List of Greet APIs"},{"location":"knowledge-base/general/api/packages/","text":"packages Index configStore : store your configurations in one object easly. colors : add colors to the console. inquirer : interact with users through your cli. BigNumber.js : good library to deal with expotential numbers n + e as a normal big integers. dg-url : handy functions to deal with urls. cheerio.io : jquery in the server. axios : http requests library. phantom : http library allows cors. react-chartjs-2 : displaying charts easily. parallelshell : execute commands in parallel. onChange : watch until files changes then triger a command or a task. rimraf : quickly clean a folder. copyfiles : quickly copy files between folders. imagemin-cli : quiqckly minimze images before deploy. UglifyJS 3 : minimize js before deploy. htmlmin : minimze html before deploy. usemin-cli : combine those previous three minimizors into cli. grunt-cli : cli for grunt. react-document-title : change pages titles dynamically react-helmet : manage head meta tags. ElGrapho : nice data representaions. NProgress.js : slim progress bar. loader : js library has a lot of shortcuts. react-n18 : clever library to concentrate your text in one single file, then use sortucts to represent that text, so your files will not be full of text |package | description | | :-: | :-: | | react-loading | nice loading svgs |","title":"packages Index"},{"location":"knowledge-base/general/api/packages/#packages-index","text":"configStore : store your configurations in one object easly. colors : add colors to the console. inquirer : interact with users through your cli. BigNumber.js : good library to deal with expotential numbers n + e as a normal big integers. dg-url : handy functions to deal with urls. cheerio.io : jquery in the server. axios : http requests library. phantom : http library allows cors. react-chartjs-2 : displaying charts easily. parallelshell : execute commands in parallel. onChange : watch until files changes then triger a command or a task. rimraf : quickly clean a folder. copyfiles : quickly copy files between folders. imagemin-cli : quiqckly minimze images before deploy. UglifyJS 3 : minimize js before deploy. htmlmin : minimze html before deploy. usemin-cli : combine those previous three minimizors into cli. grunt-cli : cli for grunt. react-document-title : change pages titles dynamically react-helmet : manage head meta tags. ElGrapho : nice data representaions. NProgress.js : slim progress bar. loader : js library has a lot of shortcuts. react-n18 : clever library to concentrate your text in one single file, then use sortucts to represent that text, so your files will not be full of text |package | description | | :-: | :-: | | react-loading | nice loading svgs |","title":"packages Index"},{"location":"knowledge-base/general/dataStructures/","text":"","title":"Index"},{"location":"knowledge-base/general/dataStructures/binary_trees/","text":"Binary search trees In problems like: Dictionary Search: Find all words that start with some given string. Date Ranges : Find all emails received in a given period. Closest Height:Find the person in your class whose height is closest to yours. Local Search : A Local Search Datastructure stores a number of elements each with a key coming from an ordered set. It supports operations: RangeSearch(x, y) : Returns all elements with keys between x and y. NearestNeighbors(z) : Returns the element with keys on either side of z. we can solve these problems by: Hash tables: Array: Sorted Array: Linked lists: search Tree for any Node X in the tree: X\u2019s key is larger than the key of any descendent of its left child, and smaller than the key of any descendant of its right child. search Tree functions find(key, root): javascript Find(k, R): if R.Key = k: return R else if R.Key > k : if R.Left \u0338= null: return Find(k, R.Left) return R else if R.Key < k : return Find(k, R.Right) Next(Node): javascript Next(N) if N.Right \u0338= null: return LeftDescendant(N.Right) else: return RightAncestor(N) LeftDescendant(Node): javascript LeftDescendant(N) if N.Left = null return N else: return LeftDescendant(N.Left) Right Ancestor (Node): javascript RightAncestor(N): if N.Key < N.Parent.Key return N.Parent else: return RightAncestor(N.Parent) RangeSearch(x = first element in search range , y = second element to search , R = tree or root) javascript RangeSearch(x, y, R): L \u2190 \u2205 N \u2190 Find(x, R) while N.Key \u2264 y if N.Key \u2265 x: L \u2190 L.Append(N) N \u2190 Next(N) return L Insert(key, tree or root): javascript Insert(k, R): P \u2190 Find(k, R) Add new node with key k as child of P delete(Node): javascript Delete(N): if N.Right = null: Remove N, promote N.Left else: X \u2190 Next(N) \u2216\u2216 X.Left = null Replace N by X, promote X.Right Example: deleting Node (1): bring its next element(2), to be in (1) place. bring (4) tree to be in (2) place. AVL trees to keep our trees balanced , (the hieght of left = hieght of Right). hieght of tree : the maximum depth of any of its children. calculating the hieght of a tree: javascript Height(N): if N is a leaf: hieght = 1 else: hieght = 1 + max(N.Left.Height, N.Right.Height) example of Node after adding hieght property: updating trees can destroy their balance. Insertion into AVL tree We need a new insertion algorithm that involves rebalancing the tree to maintain the AVL property. insertion idea: javascript AVLInsert(k: key, R: root): Insert(k, R) N = Find(k, R) Rebalance(N) Rebalancing: javascript Rebalance(N: node): if |N.Left.Height \u2212 N.Right.Height| \u2264 1 return; P = N.Parent if N.Left.Height > N.Right.Height+1: RebalanceRight(N) if N.Right.Height > N.Left.Height+1: RebalanceLeft(N) AdjustHeight(N) if P != null: Rebalance(P) Adjusting Hieght : recalculate height after rebalancing the tree javascript AdjustHeight(N): N.Height = 1+ max( N.Left.Height, N.Right.Height) exception: consider this case: where the left subtree too heavy. so we need to use different rebalancing function RebalanceRight(N) . RebalanceRight(Node): javascript RebalanceRight(N: node): M = N.Left if M.Right.Height > M.Left.Height: RotateLeft(M) RotateRight(N) AdjustHeight() on affected nodes RotateLeft() Example: deleting from AVL tree Deletions can also change balance. deleting from AVL tree: javascript AVLDelete(N: node): Delete(N) M = Parent of node replacing N Rebalance(M) Merge AVL trees Merge Combines two binary search trees into a single one. If we got extra root T we do the merge over it: javascript MergeWithRoot(R1: tree1, R2: tree2, T: new element to merge over): T.Left = R1 T.Right = R2 R1.Parent = T R2.Parent = T return T if we didn't get that extra element, we need to search for it and the Get new root by removing largest element of left subtree. javascript Merge(R1: tree1 , R2: tree2): T = Find(\u221e, R1) // find largest element Delete(T) // remove that element from the tree MergeWithRoot(R1, R2, T) // use that T as extra element to merge return T to maintain the balance, we merge the smaller tree R2 with a subtree form the bigger tree R1 with the same height as R2 . we Go down side of the bigger tree until merge with a subtree of same height as the smaller tree. we need a new Merge() function: ```javascript AVLTreeMergeWithRoot(R1: tree1, R2: tree2, T: element to merge over): if |R1.Height \u2212 R2.Height| \u2264 1: // both trees with same hieght MergeWithRoot(R1, R2, T) T.Ht = max(R1.Height, R2.Height) + 1 // hieght of the output merged tree return T else if R1.Height > R2.Height: // if R1 is bigger, we merge R2 on subtree of R1 R\u2032 = AVLTreeMergeWithRoot(R1.Right, R2, T) /* go down R1.right (bigger elements) untill you find a subtree with same hieght as R2. R\u2032 is the newly merged tree between R2 and r1.right */ R1.Right = R\u2032 // put R\u2032 as right of R1 R\u2032.Parent = R1 // assign R1 to be the parent of R\u2032 Rebalance(R1) // Rebalance return root of the newly merged rebalanced tree of R1 else if R1.Height < R2.Height: // if R2 is bigger, we merge R1 on subtree of R2 R\u2032 = AVLTreeMergeWithRoot(R1, R2.Right, T) R2.Right = R\u2032 R\u2032.Parent = R2 Rebalance(R2) return root of the newly merged rebalanced tree of R2 ``` split AVL trees Split Breaks one binary search tree into two. we search for element x , then we merge all elements bigger than x into one tree, also merge all elements smaller than x into one another tree split(R: tree, X: element) function: javascript Split(R: tree, x: element to split over): if R = null: // tree is empty return (null, null) if x \u2264 R.Key: // we work on the left, Right keep untouched (R1, R2) = Split(R.Left, x) R3 = MergeWithRoot(R2, R.Right, R) // we merge all bigger element comes from down with the untouched part of the Right. return (R1, R3) if x > R.Key: (R1, R2) = Split(R.Right, x) // work on the right, left untouched R3 = MergeWithRoot(R2, R.Left, R) // we merge all smaller element comes from down with the untouched part of the Left. return (R1, R3) predecessor P of a node N is the node with the largest key smaller than the key of N splay tree animation: https://www.cs.usfca.edu/~galles/visualization/SplayTree.html","title":"Binary search trees"},{"location":"knowledge-base/general/dataStructures/binary_trees/#binary-search-trees","text":"In problems like: Dictionary Search: Find all words that start with some given string. Date Ranges : Find all emails received in a given period. Closest Height:Find the person in your class whose height is closest to yours. Local Search : A Local Search Datastructure stores a number of elements each with a key coming from an ordered set. It supports operations: RangeSearch(x, y) : Returns all elements with keys between x and y. NearestNeighbors(z) : Returns the element with keys on either side of z. we can solve these problems by: Hash tables: Array: Sorted Array: Linked lists:","title":"Binary search trees"},{"location":"knowledge-base/general/dataStructures/binary_trees/#search-tree","text":"for any Node X in the tree: X\u2019s key is larger than the key of any descendent of its left child, and smaller than the key of any descendant of its right child.","title":"search Tree"},{"location":"knowledge-base/general/dataStructures/binary_trees/#search-tree-functions","text":"find(key, root): javascript Find(k, R): if R.Key = k: return R else if R.Key > k : if R.Left \u0338= null: return Find(k, R.Left) return R else if R.Key < k : return Find(k, R.Right) Next(Node): javascript Next(N) if N.Right \u0338= null: return LeftDescendant(N.Right) else: return RightAncestor(N) LeftDescendant(Node): javascript LeftDescendant(N) if N.Left = null return N else: return LeftDescendant(N.Left) Right Ancestor (Node): javascript RightAncestor(N): if N.Key < N.Parent.Key return N.Parent else: return RightAncestor(N.Parent) RangeSearch(x = first element in search range , y = second element to search , R = tree or root) javascript RangeSearch(x, y, R): L \u2190 \u2205 N \u2190 Find(x, R) while N.Key \u2264 y if N.Key \u2265 x: L \u2190 L.Append(N) N \u2190 Next(N) return L Insert(key, tree or root): javascript Insert(k, R): P \u2190 Find(k, R) Add new node with key k as child of P delete(Node): javascript Delete(N): if N.Right = null: Remove N, promote N.Left else: X \u2190 Next(N) \u2216\u2216 X.Left = null Replace N by X, promote X.Right Example: deleting Node (1): bring its next element(2), to be in (1) place. bring (4) tree to be in (2) place.","title":"search Tree functions"},{"location":"knowledge-base/general/dataStructures/binary_trees/#avl-trees","text":"to keep our trees balanced , (the hieght of left = hieght of Right). hieght of tree : the maximum depth of any of its children. calculating the hieght of a tree: javascript Height(N): if N is a leaf: hieght = 1 else: hieght = 1 + max(N.Left.Height, N.Right.Height) example of Node after adding hieght property: updating trees can destroy their balance.","title":"AVL trees"},{"location":"knowledge-base/general/dataStructures/binary_trees/#insertion-into-avl-tree","text":"We need a new insertion algorithm that involves rebalancing the tree to maintain the AVL property. insertion idea: javascript AVLInsert(k: key, R: root): Insert(k, R) N = Find(k, R) Rebalance(N) Rebalancing: javascript Rebalance(N: node): if |N.Left.Height \u2212 N.Right.Height| \u2264 1 return; P = N.Parent if N.Left.Height > N.Right.Height+1: RebalanceRight(N) if N.Right.Height > N.Left.Height+1: RebalanceLeft(N) AdjustHeight(N) if P != null: Rebalance(P) Adjusting Hieght : recalculate height after rebalancing the tree javascript AdjustHeight(N): N.Height = 1+ max( N.Left.Height, N.Right.Height) exception: consider this case: where the left subtree too heavy. so we need to use different rebalancing function RebalanceRight(N) . RebalanceRight(Node): javascript RebalanceRight(N: node): M = N.Left if M.Right.Height > M.Left.Height: RotateLeft(M) RotateRight(N) AdjustHeight() on affected nodes RotateLeft() Example:","title":"Insertion into AVL tree"},{"location":"knowledge-base/general/dataStructures/binary_trees/#deleting-from-avl-tree","text":"Deletions can also change balance. deleting from AVL tree: javascript AVLDelete(N: node): Delete(N) M = Parent of node replacing N Rebalance(M)","title":"deleting from AVL tree"},{"location":"knowledge-base/general/dataStructures/binary_trees/#merge-avl-trees","text":"Merge Combines two binary search trees into a single one. If we got extra root T we do the merge over it: javascript MergeWithRoot(R1: tree1, R2: tree2, T: new element to merge over): T.Left = R1 T.Right = R2 R1.Parent = T R2.Parent = T return T if we didn't get that extra element, we need to search for it and the Get new root by removing largest element of left subtree. javascript Merge(R1: tree1 , R2: tree2): T = Find(\u221e, R1) // find largest element Delete(T) // remove that element from the tree MergeWithRoot(R1, R2, T) // use that T as extra element to merge return T to maintain the balance, we merge the smaller tree R2 with a subtree form the bigger tree R1 with the same height as R2 . we Go down side of the bigger tree until merge with a subtree of same height as the smaller tree. we need a new Merge() function: ```javascript AVLTreeMergeWithRoot(R1: tree1, R2: tree2, T: element to merge over): if |R1.Height \u2212 R2.Height| \u2264 1: // both trees with same hieght MergeWithRoot(R1, R2, T) T.Ht = max(R1.Height, R2.Height) + 1 // hieght of the output merged tree return T else if R1.Height > R2.Height: // if R1 is bigger, we merge R2 on subtree of R1 R\u2032 = AVLTreeMergeWithRoot(R1.Right, R2, T) /* go down R1.right (bigger elements) untill you find a subtree with same hieght as R2. R\u2032 is the newly merged tree between R2 and r1.right */ R1.Right = R\u2032 // put R\u2032 as right of R1 R\u2032.Parent = R1 // assign R1 to be the parent of R\u2032 Rebalance(R1) // Rebalance return root of the newly merged rebalanced tree of R1 else if R1.Height < R2.Height: // if R2 is bigger, we merge R1 on subtree of R2 R\u2032 = AVLTreeMergeWithRoot(R1, R2.Right, T) R2.Right = R\u2032 R\u2032.Parent = R2 Rebalance(R2) return root of the newly merged rebalanced tree of R2 ```","title":"Merge AVL trees"},{"location":"knowledge-base/general/dataStructures/binary_trees/#split-avl-trees","text":"Split Breaks one binary search tree into two. we search for element x , then we merge all elements bigger than x into one tree, also merge all elements smaller than x into one another tree split(R: tree, X: element) function: javascript Split(R: tree, x: element to split over): if R = null: // tree is empty return (null, null) if x \u2264 R.Key: // we work on the left, Right keep untouched (R1, R2) = Split(R.Left, x) R3 = MergeWithRoot(R2, R.Right, R) // we merge all bigger element comes from down with the untouched part of the Right. return (R1, R3) if x > R.Key: (R1, R2) = Split(R.Right, x) // work on the right, left untouched R3 = MergeWithRoot(R2, R.Left, R) // we merge all smaller element comes from down with the untouched part of the Left. return (R1, R3) predecessor P of a node N is the node with the largest key smaller than the key of N","title":"split AVL trees"},{"location":"knowledge-base/general/dataStructures/binary_trees/#splay-tree","text":"animation: https://www.cs.usfca.edu/~galles/visualization/SplayTree.html","title":"splay tree"},{"location":"knowledge-base/general/dataStructures/data_structures/","text":"data structures course here: https://www.coursera.org/learn/data-structures/home/welcome week1: Arrays one contiguous area of memory. equal sized elements, indexed by contiguous integers. constant time access for each element. In column-major ordering, the first index changes most rapidly. In row-major ordering, the second index changes most rapidly. costs of operations on arrays depending on the position of the element:","title":"data structures"},{"location":"knowledge-base/general/dataStructures/data_structures/#data-structures","text":"course here: https://www.coursera.org/learn/data-structures/home/welcome","title":"data structures"},{"location":"knowledge-base/general/dataStructures/data_structures/#week1-arrays","text":"one contiguous area of memory. equal sized elements, indexed by contiguous integers. constant time access for each element. In column-major ordering, the first index changes most rapidly. In row-major ordering, the second index changes most rapidly. costs of operations on arrays depending on the position of the element:","title":"week1: Arrays"},{"location":"knowledge-base/general/dataStructures/disjoint_setes/","text":"Disjoint Sets Naive Implementations pdf docs A disjoint-set data structure supports the following operations: MakeSet(x) creates a singleton set {x} Find(x) returns ID of the set containing x: if x and y lie in the same set, then Find(x) = Find(y) otherwise, Find(x) \u0338= Find(y) Union(x, y) merges two sets containing x and y union psedo: javascript Union(i, j): i_id \u2190 Find(i) j_id \u2190 Find(j) if i_id = j_id: return m \u2190 min(i_id, j_id) for k from 1 to n: if smallest[k] in {i_id, j_id}: smallest[k] \u2190 m we can do the implementaion with: linked lists id is the tail of each set. with time, sets is going to be longer and longer. * better solution (chaeper) using: trees of linked lists * id (tail) is the same for the 2 sets, after calling union() . Disjoint Sets: Efficient Implementations when merging (calling union() ) on 2 trees, we choose to put the shortest(least hieght) tree under the longer tree, so the resulting tree as munch shallow as possible. unoin by Rank To quickly find a height of a tree, we will keep the height of each subtree in an array rank[1 . . . n] : rank[i] is the height of the subtree whose root is i. now we have 2 arrays: id : showing the root of each element in each subtree. rank : showing the hieght of the tree that this element belongs to. we also call this processure: union by rank heuristic union psedo with rank: javascript Union(i, j) i_id \u2190 Find(i) j_id \u2190 Find(j) if i_id = j_id: return if rank[i_id] > rank[j_id]: parent[j_id] \u2190 i_id else: parent[i_id] \u2190 j_id if rank[i_id] = rank[j_id]: rank[j_id] \u2190 rank[j_id] + 1 path compression we introduce another array, that will attatch every element to it's final root. so this will save us time in the future. now we have 3 arrays: id : showing the root of the subtree of each element, then the final root of each subtree. rank : showing the hieght of the tree that this element belongs to. roots : showing the final roots for each single element.","title":"Disjoint Sets"},{"location":"knowledge-base/general/dataStructures/disjoint_setes/#disjoint-sets","text":"","title":"Disjoint Sets"},{"location":"knowledge-base/general/dataStructures/disjoint_setes/#naive-implementations","text":"pdf docs A disjoint-set data structure supports the following operations: MakeSet(x) creates a singleton set {x} Find(x) returns ID of the set containing x: if x and y lie in the same set, then Find(x) = Find(y) otherwise, Find(x) \u0338= Find(y) Union(x, y) merges two sets containing x and y union psedo: javascript Union(i, j): i_id \u2190 Find(i) j_id \u2190 Find(j) if i_id = j_id: return m \u2190 min(i_id, j_id) for k from 1 to n: if smallest[k] in {i_id, j_id}: smallest[k] \u2190 m we can do the implementaion with: linked lists id is the tail of each set. with time, sets is going to be longer and longer. * better solution (chaeper) using: trees of linked lists * id (tail) is the same for the 2 sets, after calling union() .","title":"Naive Implementations"},{"location":"knowledge-base/general/dataStructures/disjoint_setes/#disjoint-sets-efficient-implementations","text":"when merging (calling union() ) on 2 trees, we choose to put the shortest(least hieght) tree under the longer tree, so the resulting tree as munch shallow as possible.","title":"Disjoint Sets: Efficient Implementations"},{"location":"knowledge-base/general/dataStructures/disjoint_setes/#unoin-by-rank","text":"To quickly find a height of a tree, we will keep the height of each subtree in an array rank[1 . . . n] : rank[i] is the height of the subtree whose root is i. now we have 2 arrays: id : showing the root of each element in each subtree. rank : showing the hieght of the tree that this element belongs to. we also call this processure: union by rank heuristic union psedo with rank: javascript Union(i, j) i_id \u2190 Find(i) j_id \u2190 Find(j) if i_id = j_id: return if rank[i_id] > rank[j_id]: parent[j_id] \u2190 i_id else: parent[i_id] \u2190 j_id if rank[i_id] = rank[j_id]: rank[j_id] \u2190 rank[j_id] + 1","title":"unoin by Rank"},{"location":"knowledge-base/general/dataStructures/disjoint_setes/#path-compression","text":"we introduce another array, that will attatch every element to it's final root. so this will save us time in the future. now we have 3 arrays: id : showing the root of the subtree of each element, then the final root of each subtree. rank : showing the hieght of the tree that this element belongs to. roots : showing the final roots for each single element.","title":"path compression"},{"location":"knowledge-base/general/dataStructures/hash_tables/","text":"Hash Tables used in: hashing passwords, connecting files on the os to their physical location, IP address. naiive solution: create an array Arr of all possible IPs, increment Ar[IP] ++; when a new visitor vistits your website, you need another array to deal with time. optimization: use list instead of array, the elements being added corresponding to the time (old element in the start, last elemnts to the end). every hour we delete the first list Nodes. hash function : a funtion that takes a universe and divide them into smaller universes. Maps : Store mapping from objects to other objects, Student ID \u2192 student name. Map from S to V is a data structure with methods HasKey(O), Get(O), Set(O, v), where O \u2208 S, v \u2208 V . Set is a data structure with methods: Add(O), Remove(O), Find(O). Two ways to implement a set using chaining: Set is equivalent to map from S to V = {true, false} Store just objects O instead of pairs (O, v) in chains. parameters in hash tables: n numer of elemnts in the universe m cardinality of the hash function (the keys) c length of the longest chain memory used O(n + m) \ud835\udefc = n /m is called load factor Operations run in time O(c + 1) Hash Functions univirsal family : javascript Let U be the universe , the set of all possible keys. A set of hash functions \u210b = {h : U \u2192 {0, 1, 2, . . . , m \u2212 1}} is called a universal family if for any two keys x, y \u2208 U, x \u0338= y the probability of collision Pr[h(x) = h(y)] \u2264 1/m pdf notes Hashing Integeres pdf notes Hashing strings pdf Notes hashing functions:","title":"Hash Tables"},{"location":"knowledge-base/general/dataStructures/hash_tables/#hash-tables","text":"used in: hashing passwords, connecting files on the os to their physical location, IP address. naiive solution: create an array Arr of all possible IPs, increment Ar[IP] ++; when a new visitor vistits your website, you need another array to deal with time. optimization: use list instead of array, the elements being added corresponding to the time (old element in the start, last elemnts to the end). every hour we delete the first list Nodes. hash function : a funtion that takes a universe and divide them into smaller universes. Maps : Store mapping from objects to other objects, Student ID \u2192 student name. Map from S to V is a data structure with methods HasKey(O), Get(O), Set(O, v), where O \u2208 S, v \u2208 V . Set is a data structure with methods: Add(O), Remove(O), Find(O). Two ways to implement a set using chaining: Set is equivalent to map from S to V = {true, false} Store just objects O instead of pairs (O, v) in chains. parameters in hash tables: n numer of elemnts in the universe m cardinality of the hash function (the keys) c length of the longest chain memory used O(n + m) \ud835\udefc = n /m is called load factor Operations run in time O(c + 1)","title":"Hash Tables"},{"location":"knowledge-base/general/dataStructures/hash_tables/#hash-functions","text":"univirsal family : javascript Let U be the universe , the set of all possible keys. A set of hash functions \u210b = {h : U \u2192 {0, 1, 2, . . . , m \u2212 1}} is called a universal family if for any two keys x, y \u2208 U, x \u0338= y the probability of collision Pr[h(x) = h(y)] \u2264 1/m pdf notes","title":"Hash Functions"},{"location":"knowledge-base/general/dataStructures/hash_tables/#hashing-integeres","text":"pdf notes","title":"Hashing Integeres"},{"location":"knowledge-base/general/dataStructures/hash_tables/#hashing-strings","text":"pdf Notes hashing functions:","title":"Hashing strings"},{"location":"knowledge-base/general/dataStructures/heap/","text":"Heap heap is a tree with special charechters. Binary max-heap is a binary tree (each node has zero, one, or two children) where the value of each node is at least the values of its children. operations on binary max-heap GetMax : return the root. Insert : attach a new node to any leaf, this may violate the heap property, so we do siftUp . siftUp : swap the problematic node with its parent until the property is satisfied. this edge gets closer to the root while sifting up. costs o(tree height) . ExtractMax : replace the root with any leaf. then we do SiftDown if nessecary. SiftDown : we swap the problematic node with larger child until the heap property is satisfied. ChangePriority : change the priority and let the changed element sift up or down depending on whether its priority decreased or increased. Remove : change the priority of the element to \u221e, let it sift up, and then extract maximum by calling ExtractMax() costs O(tree height) . compelete binary tree A binary tree is complete if all its levels are filled except possibly the last one which is filled from left to right. A complete binary tree with n nodes has height at most O(log n) . we cav store a copmplete binary tree in array as follows: parent index of node i = Arr[round(i/2)] leftchild(i) = Arr[2i] RightChild(i) = Arr[2i+1] siftUp and down does not change the tree completeness. insert and extractMax and remove can violate tree completeness. we have to maintain our tree complete. Keeping the Tree Complete: to extract the maximum value, replace the root by the last leaf (by the right leaf of the most left child 2i+1 ) and let it sift down. to insert an element, insert it as a leaf in the leftmost vacant position in the last level and let it sift up. binary heap psuedo code maxSize is the maximum number of elements in the heap size is the size of the heap H[1 . . . maxSize] is an array of length maxSize where the heap occupies the first size elements pdf docs sift Up: SiftUp(i): while i > 1 and H[Parent(i)] < H[i]: swap H[Parent(i)] and H[i] i \u2190 Parent(i) sift down: SiftDown(i) maxIndex \u2190 i \u2113 \u2190 LeftChild(i) if \u2113 \u2264 size and H[\u2113] > H[maxIndex]: maxIndex \u2190 \u2113 r \u2190 RightChild(i) if r \u2264 size and H[r] > H[maxIndex]: maxIndex \u2190 r if i \u0338= maxIndex: swap H[i] and H[maxIndex] SiftDown(maxIndex) insert: Insert(p) if size = maxSize: return ERROR size \u2190 size + 1 H[size] \u2190 p SiftUp(size) Extract max: ExtractMax() result \u2190 H[1] H[1] \u2190 H[size] size \u2190 size \u2212 1 SiftDown(1) return result remove: Remove(i) H[i] \u2190 \u221e SiftUp(i) ExtractMax() change priority: ChangePriority(i, p) oldp \u2190 H[i] H[i] \u2190 p if p > oldp: SiftUp(i) else: SiftDown(i) Heap sort psudo code: HeapSort(A[1 . . . n]) create an empty priority queue for i from 1 to n: Insert(A[i]) for i from n downto 1: A[i] \u2190 ExtractMax() cost : 0(n log n) intro-sort algorithm in practice: you start using quick sort algorithm, if you find it a bit slow: you stop and change to heap sort . 0-based array heap Parent(i): return Arr[i\u22121/2] LeftChild(i) : return Arr[2i + 1] RightChild(i): return Arr[2i + 2] Binary min-heap Binary min-heap is a binary tree (each node has zero, one, or two children) where the value of each node is at most the values of its children. d-ary Heap In a d-ary heap nodes on all levels except for possibly the last one have exactly d children. The height of such a tree is about logd n. The running time of SiftUp is O(logd n). The running time of SiftDown is O(d logd n): on each level, we \u001cnd the largest value among d children.","title":"Heap"},{"location":"knowledge-base/general/dataStructures/heap/#heap","text":"heap is a tree with special charechters. Binary max-heap is a binary tree (each node has zero, one, or two children) where the value of each node is at least the values of its children.","title":"Heap"},{"location":"knowledge-base/general/dataStructures/heap/#operations-on-binary-max-heap","text":"GetMax : return the root. Insert : attach a new node to any leaf, this may violate the heap property, so we do siftUp . siftUp : swap the problematic node with its parent until the property is satisfied. this edge gets closer to the root while sifting up. costs o(tree height) . ExtractMax : replace the root with any leaf. then we do SiftDown if nessecary. SiftDown : we swap the problematic node with larger child until the heap property is satisfied. ChangePriority : change the priority and let the changed element sift up or down depending on whether its priority decreased or increased. Remove : change the priority of the element to \u221e, let it sift up, and then extract maximum by calling ExtractMax() costs O(tree height) .","title":"operations on binary max-heap"},{"location":"knowledge-base/general/dataStructures/heap/#compelete-binary-tree","text":"A binary tree is complete if all its levels are filled except possibly the last one which is filled from left to right. A complete binary tree with n nodes has height at most O(log n) . we cav store a copmplete binary tree in array as follows: parent index of node i = Arr[round(i/2)] leftchild(i) = Arr[2i] RightChild(i) = Arr[2i+1] siftUp and down does not change the tree completeness. insert and extractMax and remove can violate tree completeness. we have to maintain our tree complete. Keeping the Tree Complete: to extract the maximum value, replace the root by the last leaf (by the right leaf of the most left child 2i+1 ) and let it sift down. to insert an element, insert it as a leaf in the leftmost vacant position in the last level and let it sift up.","title":"compelete binary tree"},{"location":"knowledge-base/general/dataStructures/heap/#binary-heap-psuedo-code","text":"maxSize is the maximum number of elements in the heap size is the size of the heap H[1 . . . maxSize] is an array of length maxSize where the heap occupies the first size elements pdf docs sift Up: SiftUp(i): while i > 1 and H[Parent(i)] < H[i]: swap H[Parent(i)] and H[i] i \u2190 Parent(i) sift down: SiftDown(i) maxIndex \u2190 i \u2113 \u2190 LeftChild(i) if \u2113 \u2264 size and H[\u2113] > H[maxIndex]: maxIndex \u2190 \u2113 r \u2190 RightChild(i) if r \u2264 size and H[r] > H[maxIndex]: maxIndex \u2190 r if i \u0338= maxIndex: swap H[i] and H[maxIndex] SiftDown(maxIndex) insert: Insert(p) if size = maxSize: return ERROR size \u2190 size + 1 H[size] \u2190 p SiftUp(size) Extract max: ExtractMax() result \u2190 H[1] H[1] \u2190 H[size] size \u2190 size \u2212 1 SiftDown(1) return result remove: Remove(i) H[i] \u2190 \u221e SiftUp(i) ExtractMax() change priority: ChangePriority(i, p) oldp \u2190 H[i] H[i] \u2190 p if p > oldp: SiftUp(i) else: SiftDown(i)","title":"binary heap psuedo code"},{"location":"knowledge-base/general/dataStructures/heap/#heap-sort","text":"psudo code: HeapSort(A[1 . . . n]) create an empty priority queue for i from 1 to n: Insert(A[i]) for i from n downto 1: A[i] \u2190 ExtractMax() cost : 0(n log n)","title":"Heap sort"},{"location":"knowledge-base/general/dataStructures/heap/#intro-sort-algorithm","text":"in practice: you start using quick sort algorithm, if you find it a bit slow: you stop and change to heap sort .","title":"intro-sort algorithm"},{"location":"knowledge-base/general/dataStructures/heap/#0-based-array-heap","text":"Parent(i): return Arr[i\u22121/2] LeftChild(i) : return Arr[2i + 1] RightChild(i): return Arr[2i + 2]","title":"0-based array heap"},{"location":"knowledge-base/general/dataStructures/heap/#binary-min-heap","text":"Binary min-heap is a binary tree (each node has zero, one, or two children) where the value of each node is at most the values of its children.","title":"Binary min-heap"},{"location":"knowledge-base/general/dataStructures/heap/#d-ary-heap","text":"In a d-ary heap nodes on all levels except for possibly the last one have exactly d children. The height of such a tree is about logd n. The running time of SiftUp is O(logd n). The running time of SiftDown is O(d logd n): on each level, we \u001cnd the largest value among d children.","title":"d-ary Heap"},{"location":"knowledge-base/general/dataStructures/linked_lists/","text":"Linked Lists intro Linked Lists is used for storing data when the size of the data can dynamically increase (is not known prior). pointers and strucures (classes) are critical in linked lists. Self Referential Structures A Self Referential Structure (we would call it SRS from now) is a special structure which contains a member variable that points to structure of its own kind [1]. ```c++ //c++ struct book{ member 1; member 2; // Other Members struct book* next; } ``` why linked lists ? we can use arrays of structures, but the array size should be predefined or give a big number to array size beforehand. defention the linked list is an array of structure objects where the structure needs to be self referential and the ith element in the list points to the (i+1)th element through its member pointer and the pointer of the last element of the list would point to NULL. The starting element will be called as the head node [1]. singley linked lists head pointer points to a node, whitch contains data (key) and another pointer to the next node. ops (read, add, delete) on the first node: cost o(1) . ops on the last: if the pointer of the last pointer is empty (no tail) : cost o(n) if there is a tail pointer : cost o(1) exept remove costs o(n) cause the pointers don't have a way to point backward. push front psuedo code: https://i.imgur.com/AICcQZm.png pop (remove) front psuedo: https://i.imgur.com/4OYm71r.png push back (last element): https://i.imgur.com/EbKamiz.png pop back : https://i.imgur.com/6NlFNAz.png Add After a node: https://i.imgur.com/hf9t89q.png head == tail -> the list contains only one node. double linked lists head pointer points to a node, whitch contains data (key) and 2 pointers to the next and previous node. popBack and addBefore is now cheaper o(1) . pushBack psuedo: https://i.imgur.com/iSbGeCB.png popBack : https://i.imgur.com/1TgK8Eu.png addAfter: https://i.imgur.com/s5PP86S.png addBefore: https://i.imgur.com/A2FsCHA.png References [1] https://courses.edx.org/courses/course-v1:IITBombayX+CS101.2x+1T2020/courseware/a71234edfd4f465e8d3e7e0082d04540/7565e9f168914c6cab4d54f9ba443bca/?child=first","title":"Linked Lists"},{"location":"knowledge-base/general/dataStructures/linked_lists/#linked-lists","text":"","title":"Linked Lists"},{"location":"knowledge-base/general/dataStructures/linked_lists/#intro","text":"Linked Lists is used for storing data when the size of the data can dynamically increase (is not known prior). pointers and strucures (classes) are critical in linked lists.","title":"intro"},{"location":"knowledge-base/general/dataStructures/linked_lists/#self-referential-structures","text":"A Self Referential Structure (we would call it SRS from now) is a special structure which contains a member variable that points to structure of its own kind [1]. ```c++ //c++ struct book{ member 1; member 2; // Other Members struct book* next; } ```","title":"Self Referential Structures"},{"location":"knowledge-base/general/dataStructures/linked_lists/#why-linked-lists","text":"we can use arrays of structures, but the array size should be predefined or give a big number to array size beforehand.","title":"why linked lists ?"},{"location":"knowledge-base/general/dataStructures/linked_lists/#defention","text":"the linked list is an array of structure objects where the structure needs to be self referential and the ith element in the list points to the (i+1)th element through its member pointer and the pointer of the last element of the list would point to NULL. The starting element will be called as the head node [1].","title":"defention"},{"location":"knowledge-base/general/dataStructures/linked_lists/#singley-linked-lists","text":"head pointer points to a node, whitch contains data (key) and another pointer to the next node. ops (read, add, delete) on the first node: cost o(1) . ops on the last: if the pointer of the last pointer is empty (no tail) : cost o(n) if there is a tail pointer : cost o(1) exept remove costs o(n) cause the pointers don't have a way to point backward. push front psuedo code: https://i.imgur.com/AICcQZm.png pop (remove) front psuedo: https://i.imgur.com/4OYm71r.png push back (last element): https://i.imgur.com/EbKamiz.png pop back : https://i.imgur.com/6NlFNAz.png Add After a node: https://i.imgur.com/hf9t89q.png head == tail -> the list contains only one node.","title":"singley linked lists"},{"location":"knowledge-base/general/dataStructures/linked_lists/#double-linked-lists","text":"head pointer points to a node, whitch contains data (key) and 2 pointers to the next and previous node. popBack and addBefore is now cheaper o(1) . pushBack psuedo: https://i.imgur.com/iSbGeCB.png popBack : https://i.imgur.com/1TgK8Eu.png addAfter: https://i.imgur.com/s5PP86S.png addBefore: https://i.imgur.com/A2FsCHA.png","title":"double linked lists"},{"location":"knowledge-base/general/dataStructures/linked_lists/#references","text":"[1] https://courses.edx.org/courses/course-v1:IITBombayX+CS101.2x+1T2020/courseware/a71234edfd4f465e8d3e7e0082d04540/7565e9f168914c6cab4d54f9ba443bca/?child=first","title":"References"},{"location":"knowledge-base/general/dataStructures/priority_queue/","text":"priority queue A priority queue is a generalization of a queue where each element is assigned a priority and elements come out in order by priority. Priority queue is an abstract data type supporting the following main operations: Insert(p) adds a new element with priority p ExtractMax() extracts an element with maximum priority. Remove(it) removes an element pointed by an iterator it GetMax() returns an element with maximum priority (without changing the set of elements) ChangePriority(it, p) changes the priority of an element pointed by it to p more info on pdf: pdf slides","title":"priority queue"},{"location":"knowledge-base/general/dataStructures/priority_queue/#priority-queue","text":"A priority queue is a generalization of a queue where each element is assigned a priority and elements come out in order by priority. Priority queue is an abstract data type supporting the following main operations: Insert(p) adds a new element with priority p ExtractMax() extracts an element with maximum priority. Remove(it) removes an element pointed by an iterator it GetMax() returns an element with maximum priority (without changing the set of elements) ChangePriority(it, p) changes the priority of an element pointed by it to p more info on pdf: pdf slides","title":"priority queue"},{"location":"knowledge-base/general/dataStructures/queue/","text":"queue first in, first out. FIFO same as stack, except it will remove the first added element. the longest waiting person in line, the next to be served. Queue: Abstract data type with the following operations: Enqueue(Key): adds key to collection Key Dequeue(): removes and returns least recently-added key Boolean Empty(): are there any elements? useful for servers we can do queues with arrays or linked lists. in a linked list queue : add using pushBack to the back (tail) of the list. enqueue remove using topFront to get the element, then popFront to remove e from the head of the list. dequeue queue with Arrays : normal array: adding is easy, removing first element costs o(n) to make dequeuing cheaper 0(1) : keep track of array as acercular array. we make a variablle read to track the index to remove from. variable write to track the index to add to. if read == write -> queue is empty. if write > arr.length && read != 0 -> read = 0 , start from the begining. if we start from the begining, we have to put a buffer of at least one index empty between the read and write indexes as in this example https://i.imgur.com/OYKISSU.png","title":"queue"},{"location":"knowledge-base/general/dataStructures/queue/#queue","text":"first in, first out. FIFO same as stack, except it will remove the first added element. the longest waiting person in line, the next to be served. Queue: Abstract data type with the following operations: Enqueue(Key): adds key to collection Key Dequeue(): removes and returns least recently-added key Boolean Empty(): are there any elements? useful for servers we can do queues with arrays or linked lists. in a linked list queue : add using pushBack to the back (tail) of the list. enqueue remove using topFront to get the element, then popFront to remove e from the head of the list. dequeue queue with Arrays : normal array: adding is easy, removing first element costs o(n) to make dequeuing cheaper 0(1) : keep track of array as acercular array. we make a variablle read to track the index to remove from. variable write to track the index to add to. if read == write -> queue is empty. if write > arr.length && read != 0 -> read = 0 , start from the begining. if we start from the begining, we have to put a buffer of at least one index empty between the read and write indexes as in this example https://i.imgur.com/OYKISSU.png","title":"queue"},{"location":"knowledge-base/general/dataStructures/stack/","text":"stack last in, first out. LIFO Stack: Abstract data type with the following operations: Push(Key): adds key to collection Key Top(): returns most recently-added key Key Pop(): removes and returns most recently-added key Boolean Empty(): are there any elements? solves balanced brackets problem : check if every prace has its own closing prace . psuedo code for balanced brackets: https://i.imgur.com/xIucIM7.png Stacks can be implemented with either an array or a linked list . Each stack operation is O(1) : Push, Pop, Top, Empty. Stacks are ocassionaly known as LIFO queues . in a Array stack : adding the new elemnt of the stack to the end of the array, remove the last e of the array. array is limmited to the number of elements initialized with (in some languages). add using pushBack remove with popBack in a linked list stack : adding the new element to the begining (head) of the linked list, remove the head. add with pushFront remove with popfront","title":"stack"},{"location":"knowledge-base/general/dataStructures/stack/#stack","text":"last in, first out. LIFO Stack: Abstract data type with the following operations: Push(Key): adds key to collection Key Top(): returns most recently-added key Key Pop(): removes and returns most recently-added key Boolean Empty(): are there any elements? solves balanced brackets problem : check if every prace has its own closing prace . psuedo code for balanced brackets: https://i.imgur.com/xIucIM7.png Stacks can be implemented with either an array or a linked list . Each stack operation is O(1) : Push, Pop, Top, Empty. Stacks are ocassionaly known as LIFO queues . in a Array stack : adding the new elemnt of the stack to the end of the array, remove the last e of the array. array is limmited to the number of elements initialized with (in some languages). add using pushBack remove with popBack in a linked list stack : adding the new element to the begining (head) of the linked list, remove the head. add with pushFront remove with popfront","title":"stack"},{"location":"knowledge-base/general/dataStructures/trees/","text":"trees A Tree is: empty, or a node with: a key, and a list of child trees. Root: top node in the tree. A child has a line down directly from a parent. Ancestor: parent, or parent of parent, etc Descendant: child, or child of child, etc. Leaf : node with no children. Interior node (non-leaf). Height: maximum depth of subtree node and farthest leaf Forest: collection of trees. binary tree : a tree with most 2 children, lift and right. Height(tree) if tree = nil: return 0 return 1 + Max(Height(tree.left), Height(tree.right)) Size(tree) if tree = nil return 0 return 1 + Size(tree.left) + Size(tree.right) Depth-first tree traversal (for binary trees) we use stack . we start from trees dont have children. tree = nill InOrderTraversal(tree): traverse lift then key then right tree. if tree = nil: return InOrderTraversal(tree.left) Print(tree.key) InOrderTraversal(tree.right) PreOrderTraversal(tree): we traverse the key then the left then right trees. if tree = nil: return Print(tree.key) PreOrderTraversal(tree.left) PreOrderTraversal(tree.right) PostOrderTraversal(tree) we traverse the left then the right trees and lastly the key. if tree = nil: return PostOrderTraversal(tree.left) PostOrderTraversal(tree.right) Print(tree.key) Breadth-first traversal we use queue LevelTraversal(tree) pre-order traversion level by level. if tree = nil: return Queue q q.Enqueue(tree) while not q.Empty() : node \u2190 q.Dequeue() Print(node) if node.left \u0338= nil: q.Enqueue(node.left) if node.right \u0338= nil: q.Enqueue(node.right)","title":"trees"},{"location":"knowledge-base/general/dataStructures/trees/#trees","text":"A Tree is: empty, or a node with: a key, and a list of child trees. Root: top node in the tree. A child has a line down directly from a parent. Ancestor: parent, or parent of parent, etc Descendant: child, or child of child, etc. Leaf : node with no children. Interior node (non-leaf). Height: maximum depth of subtree node and farthest leaf Forest: collection of trees. binary tree : a tree with most 2 children, lift and right. Height(tree) if tree = nil: return 0 return 1 + Max(Height(tree.left), Height(tree.right)) Size(tree) if tree = nil return 0 return 1 + Size(tree.left) + Size(tree.right)","title":"trees"},{"location":"knowledge-base/general/dataStructures/trees/#depth-first-tree-traversal-for-binary-trees","text":"we use stack . we start from trees dont have children. tree = nill InOrderTraversal(tree): traverse lift then key then right tree. if tree = nil: return InOrderTraversal(tree.left) Print(tree.key) InOrderTraversal(tree.right) PreOrderTraversal(tree): we traverse the key then the left then right trees. if tree = nil: return Print(tree.key) PreOrderTraversal(tree.left) PreOrderTraversal(tree.right) PostOrderTraversal(tree) we traverse the left then the right trees and lastly the key. if tree = nil: return PostOrderTraversal(tree.left) PostOrderTraversal(tree.right) Print(tree.key)","title":"Depth-first tree traversal (for binary trees)"},{"location":"knowledge-base/general/dataStructures/trees/#breadth-first-traversal","text":"we use queue LevelTraversal(tree) pre-order traversion level by level. if tree = nil: return Queue q q.Enqueue(tree) while not q.Empty() : node \u2190 q.Dequeue() Print(node) if node.left \u0338= nil: q.Enqueue(node.left) if node.right \u0338= nil: q.Enqueue(node.right)","title":"Breadth-first traversal"},{"location":"knowledge-base/general/databases/","text":"","title":"Index"},{"location":"knowledge-base/general/databases/mongo/","text":"MongoDB Reference: mongo shell quick reference list all dbs in the mongo shell: show dbs work with one db: use dbs extracting the date from ObjectId : javascript const date = new Date(parseInt(doc._id.substring(0, 8), 16) * 1000); // new date object when this object created. remove and element from a nested array: javascript { $pull: { workshops: { _id: workshopId } } } collection functions collection.find() alaways need .toArray() after it.","title":"MongoDB"},{"location":"knowledge-base/general/databases/mongo/#mongodb","text":"Reference: mongo shell quick reference list all dbs in the mongo shell: show dbs work with one db: use dbs extracting the date from ObjectId : javascript const date = new Date(parseInt(doc._id.substring(0, 8), 16) * 1000); // new date object when this object created. remove and element from a nested array: javascript { $pull: { workshops: { _id: workshopId } } }","title":"MongoDB"},{"location":"knowledge-base/general/databases/mongo/#collection-functions","text":"collection.find() alaways need .toArray() after it.","title":"collection functions"},{"location":"knowledge-base/general/databases/mongoose/","text":"Mongoose Notes convert objectId to string js doc._id.toHexString(); doc._id.toString();","title":"Mongoose"},{"location":"knowledge-base/general/databases/mongoose/#mongoose","text":"","title":"Mongoose"},{"location":"knowledge-base/general/databases/mongoose/#notes","text":"convert objectId to string js doc._id.toHexString(); doc._id.toString();","title":"Notes"},{"location":"knowledge-base/general/databases/redis/","text":"Redis redis on windows will never work with docker unless you bind the IP of the docker machine to match the ip of your local machine or vice-versa. redis on windows, you need to start the service manually by: ctrl + alt + del go to service tab search for Redis and start the service. resources https://redis.io/documentation","title":"Redis"},{"location":"knowledge-base/general/databases/redis/#redis","text":"redis on windows will never work with docker unless you bind the IP of the docker machine to match the ip of your local machine or vice-versa. redis on windows, you need to start the service manually by: ctrl + alt + del go to service tab search for Redis and start the service.","title":"Redis"},{"location":"knowledge-base/general/databases/redis/#resources","text":"https://redis.io/documentation","title":"resources"},{"location":"knowledge-base/general/databases/sequilize/","text":"Sequalize sequlize is an object object relational mapper. that maps the normal RDS (relational data bases) tables into objects so that it will go along with OOP languages. saves you fromm writting SQL commands or query. pros less and more consistent code. No SQl queries. abstract DB engines. does a lot of things automatically. Migrations are easier. cons complicated queries might be slow. you might loss your DB knolowedge with time. usage install Sequalize, AND , install DB engine like: mysql, sqlite ... 1 - connection ```js const Sequalize = require('sequalize'); // generator function const connection = new Sequalize(\"DB name\", \"username\", \"password\", { dialect: \"mysql as default\" / optional / }); ``` 2 -creating a model js const MyModel = connection.define(\"MyModel\", { // Model properties field1: Sequalize.STRING, field2: Sequalize.TEXT }) 3 - executing synchronization with DB: connecting to the DB automaticallu generate SQL and execute it to create the tables (if not already exists) From your defined Models. IMPORTANT: Sequalize will not create the DB automatically, you have to create the DB yourself. ```js const options = { logging: true, force: true, // forcing updat tables NOT RECOMMNDED FOR PRODUCTIO } connection.sync(options); // entry point for squakize work // this is async function, you have to await it or use promises ``` 4 - create a doc (row) js // you need to await connection.sync() first MyModel.create({ // executes INSERT query filed1: \"data\", field2: \"data .........\" }) 5- Find (SELECT) ```js // await synch // Find one MyModel.findById(id).then(function (result){ console.log(result.dataValues); // object // your results in results.dataValues }); // Find All MyModel.findAll().then(function (result){ console.log(result.dataValues); // Array<object> // your results in results.dataValues }); ``` 6- Advanced Models ```js const MyModel = connection.define(\"MyModel\", { // Model properties field1: Sequalize.STRING, field2: { type: Sequalize.STRING, // type of field allowNull: true, // true or false unique: true, // true or false defaultValue: \"default value ..\", // if no value is provided validate: { // validate data before inserting is : \"string or regex\", // is the data equals to a string or regex len: [2,10], // string length should be between 2 and 10 /* respond with custom error message */ len : { args: [2.10], // value of the validation msg: \"please enter stiri ng with length between 2 and 10\", // this msg will be sent in case of error here }, /* cutom validations */ myValidationRuleName : function(fieldValue){ var validation; /* do you checks on the field value and return boolean store it on validation */ if(!validation){ throw new Error(' validation failed, the value you have entered is not accepted'); } else { // don't do nothing, but you have to write this else, it is a syntax. // if no error thrown => the value is valid } } }, primaryKey: true, // this field2 key, id field is deleted automatically. }, { // model options timestamps: false, freezeTableName: true, // prevent sequalize from giving our table a plural name hooks:{ // middlewares or function to applied to every doc. // all hooks are here beforeCreate: function(){ }, beforeValidate: () => {}, afterValidate: () => {}, afterCreate: (result) => { console.log(result.dataValues); }, } } }) ``` VERY IMPORTANT: connection.sync() will never update a table structure if it's already created. If you want to update the table structure ( like adding or removing columns) you can do one of the following: you have to delete the table first. (table data will be lost ) create new model with different name, in order to not lost the data. apply Migrations. apply force as following: NOT RECOMMENDED For Production js connection.sync({ force: true }); // all data in the table will be deleted IMPORTANT: allowNull allowNull is true by default if you DID NOT specify allowNull: false , any validation to this field will not be applied (as if you have NO VALIDATION at all). 7- CRUD ```js connection.sync(options).then(() => { const createOptions = { // options for create function fields:[\"field1\", \"field2\"], // white listed fields, fields that allowed to be submitted by user request } MyModel.create({ /* my doc data */ }, createOptions); // creating a doc then save to the database var doc1 = MyModel.build({ /* my doc data */ }); // create doc, Don't save. interact with the doc sync without waiting db saving doc1.save(); // save the doc created by build method const bulkCreateOptions = { // options for bulk create fields:[\"field1\",\"field2\"], validate: true, // bydefault createBulk skip validation, you have to specify the validate to true to run them ignoreDuplicate: true, // skip duplication error if one the documents already exists, continue creating other documents } MyModel.bulkCreate([doc1, doc2], bulkCreateOptions); // create multiple documents at once }) ``` 8- Realationships between documents","title":"Sequalize"},{"location":"knowledge-base/general/databases/sequilize/#sequalize","text":"sequlize is an object object relational mapper. that maps the normal RDS (relational data bases) tables into objects so that it will go along with OOP languages. saves you fromm writting SQL commands or query.","title":"Sequalize"},{"location":"knowledge-base/general/databases/sequilize/#pros","text":"less and more consistent code. No SQl queries. abstract DB engines. does a lot of things automatically. Migrations are easier.","title":"pros"},{"location":"knowledge-base/general/databases/sequilize/#cons","text":"complicated queries might be slow. you might loss your DB knolowedge with time.","title":"cons"},{"location":"knowledge-base/general/databases/sequilize/#usage","text":"install Sequalize, AND , install DB engine like: mysql, sqlite ...","title":"usage"},{"location":"knowledge-base/general/databases/sequilize/#1-connection","text":"```js const Sequalize = require('sequalize'); // generator function const connection = new Sequalize(\"DB name\", \"username\", \"password\", { dialect: \"mysql as default\" / optional / }); ```","title":"1 - connection"},{"location":"knowledge-base/general/databases/sequilize/#2-creating-a-model","text":"js const MyModel = connection.define(\"MyModel\", { // Model properties field1: Sequalize.STRING, field2: Sequalize.TEXT })","title":"2 -creating a model"},{"location":"knowledge-base/general/databases/sequilize/#3-executing","text":"synchronization with DB: connecting to the DB automaticallu generate SQL and execute it to create the tables (if not already exists) From your defined Models. IMPORTANT: Sequalize will not create the DB automatically, you have to create the DB yourself. ```js const options = { logging: true, force: true, // forcing updat tables NOT RECOMMNDED FOR PRODUCTIO } connection.sync(options); // entry point for squakize work // this is async function, you have to await it or use promises ```","title":"3 - executing"},{"location":"knowledge-base/general/databases/sequilize/#4-create-a-doc-row","text":"js // you need to await connection.sync() first MyModel.create({ // executes INSERT query filed1: \"data\", field2: \"data .........\" })","title":"4 - create a doc (row)"},{"location":"knowledge-base/general/databases/sequilize/#5-find-select","text":"```js // await synch // Find one MyModel.findById(id).then(function (result){ console.log(result.dataValues); // object // your results in results.dataValues }); // Find All MyModel.findAll().then(function (result){ console.log(result.dataValues); // Array<object> // your results in results.dataValues }); ```","title":"5- Find (SELECT)"},{"location":"knowledge-base/general/databases/sequilize/#6-advanced-models","text":"```js const MyModel = connection.define(\"MyModel\", { // Model properties field1: Sequalize.STRING, field2: { type: Sequalize.STRING, // type of field allowNull: true, // true or false unique: true, // true or false defaultValue: \"default value ..\", // if no value is provided validate: { // validate data before inserting is : \"string or regex\", // is the data equals to a string or regex len: [2,10], // string length should be between 2 and 10 /* respond with custom error message */ len : { args: [2.10], // value of the validation msg: \"please enter stiri ng with length between 2 and 10\", // this msg will be sent in case of error here }, /* cutom validations */ myValidationRuleName : function(fieldValue){ var validation; /* do you checks on the field value and return boolean store it on validation */ if(!validation){ throw new Error(' validation failed, the value you have entered is not accepted'); } else { // don't do nothing, but you have to write this else, it is a syntax. // if no error thrown => the value is valid } } }, primaryKey: true, // this field2 key, id field is deleted automatically. }, { // model options timestamps: false, freezeTableName: true, // prevent sequalize from giving our table a plural name hooks:{ // middlewares or function to applied to every doc. // all hooks are here beforeCreate: function(){ }, beforeValidate: () => {}, afterValidate: () => {}, afterCreate: (result) => { console.log(result.dataValues); }, } } }) ```","title":"6- Advanced Models"},{"location":"knowledge-base/general/databases/sequilize/#very-important-connectionsync-will-never-update-a-table-structure-if-its-already-created","text":"If you want to update the table structure ( like adding or removing columns) you can do one of the following: you have to delete the table first. (table data will be lost ) create new model with different name, in order to not lost the data. apply Migrations. apply force as following: NOT RECOMMENDED For Production js connection.sync({ force: true }); // all data in the table will be deleted","title":"VERY IMPORTANT: connection.sync() will never update a table structure if it's already created."},{"location":"knowledge-base/general/databases/sequilize/#important-allownull","text":"allowNull is true by default if you DID NOT specify allowNull: false , any validation to this field will not be applied (as if you have NO VALIDATION at all).","title":"IMPORTANT: allowNull"},{"location":"knowledge-base/general/databases/sequilize/#7-crud","text":"```js connection.sync(options).then(() => { const createOptions = { // options for create function fields:[\"field1\", \"field2\"], // white listed fields, fields that allowed to be submitted by user request } MyModel.create({ /* my doc data */ }, createOptions); // creating a doc then save to the database var doc1 = MyModel.build({ /* my doc data */ }); // create doc, Don't save. interact with the doc sync without waiting db saving doc1.save(); // save the doc created by build method const bulkCreateOptions = { // options for bulk create fields:[\"field1\",\"field2\"], validate: true, // bydefault createBulk skip validation, you have to specify the validate to true to run them ignoreDuplicate: true, // skip duplication error if one the documents already exists, continue creating other documents } MyModel.bulkCreate([doc1, doc2], bulkCreateOptions); // create multiple documents at once }) ```","title":"7- CRUD"},{"location":"knowledge-base/general/databases/sequilize/#8-realationships-between-documents","text":"","title":"8- Realationships between documents"},{"location":"knowledge-base/general/design/","text":"","title":"Index"},{"location":"knowledge-base/general/design/css/","text":"CSS Notes 1 line layouts article: https://1linelayouts.glitch.me/ No select prevent users from selecting text => give the elemnt class of \"noselect\" : css .noselect { -webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Old versions of Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome, Opera and Firefox */ } one Third make all elements(divs) third of the screen with same height: ```css #wrapper { width: 100%; display: flex; flex-wrap: wrap; } .third { width: 33%; } ``` Flexbox flexbox: boxes = inner divs, parrent = parrent div. add display:flex to the parent => boxes will be same height ( EQUAL HEIGHT COLUMNS ). add display:flex to parent + add flex:1 to each box => boxes will take same width and height ( EQUAL HEIGHT + WIDTH COLUMNS ). add display:flex; justify-content: space-between; to parent + add width:32%; margin:1%; to each box => EQUAL HEIGHT + WIDTH COLUMNS WITH MARGINS add flex-wrap: wrap to the parent, with all previous code => EQUAL HEIGHT COLUMNS WITH MARGINS IN MULTIPLE ROWS for all text thing of those css rules as mandatory : css .form-header { font-weight: 300; font-size: 60px; line-height: 82px; letter-spacing: -0.5px; } super centered center everything with no problems, add this class to the parent element. css .parent{ display: grid; place-items: center; } The Deconstructed Pancake Elements beside each other on desktop, stacked on phone without meia queries flex: 0 1 <baseWidth> ; ```css .parent { display: flex; flex-wrap: wrap; justify-content: center; } .element { flex: 1 1 150px; /* Stretching: */ flex: 0 1 150px; /* No stretching: */ /* choose only one of this 2 rules */ } ``` sidebar width determain min and max width of sidebar. will not go down the min. the max is percentage, so it will change with the screen width css .parent { display: grid; grid-template-columns: minmax(150px, 25%) 1fr; /* minmax(min sidebar, percentage of width when we are over min width) prerecentage of width for the main view */ }","title":"Css"},{"location":"knowledge-base/general/design/css/#css","text":"","title":"CSS"},{"location":"knowledge-base/general/design/css/#notes","text":"1 line layouts article: https://1linelayouts.glitch.me/","title":"Notes"},{"location":"knowledge-base/general/design/css/#no-select","text":"prevent users from selecting text => give the elemnt class of \"noselect\" : css .noselect { -webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Old versions of Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome, Opera and Firefox */ }","title":"No select"},{"location":"knowledge-base/general/design/css/#one-third","text":"make all elements(divs) third of the screen with same height: ```css #wrapper { width: 100%; display: flex; flex-wrap: wrap; } .third { width: 33%; } ```","title":"one Third"},{"location":"knowledge-base/general/design/css/#flexbox","text":"flexbox: boxes = inner divs, parrent = parrent div. add display:flex to the parent => boxes will be same height ( EQUAL HEIGHT COLUMNS ). add display:flex to parent + add flex:1 to each box => boxes will take same width and height ( EQUAL HEIGHT + WIDTH COLUMNS ). add display:flex; justify-content: space-between; to parent + add width:32%; margin:1%; to each box => EQUAL HEIGHT + WIDTH COLUMNS WITH MARGINS add flex-wrap: wrap to the parent, with all previous code => EQUAL HEIGHT COLUMNS WITH MARGINS IN MULTIPLE ROWS for all text thing of those css rules as mandatory : css .form-header { font-weight: 300; font-size: 60px; line-height: 82px; letter-spacing: -0.5px; }","title":"Flexbox"},{"location":"knowledge-base/general/design/css/#super-centered","text":"center everything with no problems, add this class to the parent element. css .parent{ display: grid; place-items: center; }","title":"super centered"},{"location":"knowledge-base/general/design/css/#the-deconstructed-pancake","text":"Elements beside each other on desktop, stacked on phone without meia queries flex: 0 1 <baseWidth> ; ```css .parent { display: flex; flex-wrap: wrap; justify-content: center; } .element { flex: 1 1 150px; /* Stretching: */ flex: 0 1 150px; /* No stretching: */ /* choose only one of this 2 rules */ } ```","title":"The Deconstructed Pancake"},{"location":"knowledge-base/general/design/css/#sidebar-width","text":"determain min and max width of sidebar. will not go down the min. the max is percentage, so it will change with the screen width css .parent { display: grid; grid-template-columns: minmax(150px, 25%) 1fr; /* minmax(min sidebar, percentage of width when we are over min width) prerecentage of width for the main view */ }","title":"sidebar width"},{"location":"knowledge-base/general/frameworks/","text":"","title":"Index"},{"location":"knowledge-base/general/frameworks/bootstrap/","text":"Bootstrap bootsrap : <i class=\"material-icons\">Ahmad Ali</i> div .col-12 col-sm-6 : 12 on xs, 6 on sm and above. div .col : 12 on all. div .col-sm-4 , div .col-sm , div .col-sm-3 : from sm and above, first div 4, last div 3, middle div will take the rest. item .d-sm-none d-md-block : hide from sm and above, until find another d will show from md and above. class order : EX: .sm-order-first and .sm-order-last . center vertically: .align-items-center or align-self-center center Horizontally : text-center or justify-content-center navbar: nav: .navbar navbar-dark navbar-expand-sm bg-primary : dark blue nav, stacked on sm. nav > ul : .navbar-nav mr-auto : left side menu. nav > ul > li : .nav-item : nav > ul > li: .active : highlight current page link. nav > ul > li > a : .nav-link navbar menu button: <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#menu-id\" > menu button > span : .navbar-toggler-icon surround ul menu with div: <div class=\"collapse navbar-collapse\" id=\"#menu-id\"> push elemnt as much as you cant to the left (margin right): .mr-auto . push elemnt as much as you cant to the right (margin left): .ml-auto . bootsrap breadcrumbs: <ol class=\"col-12 breadcrumb\"> <li class=\"breadcrumb-item\"><a href=\"index.html\">Home</a></li> <li class=\"breadcrumb-item active\">About</li> </ol> .table-responsive : should added in a wrapper div, not applied to the table directly. addtional html tags: dl dt dd blockqoute embed object bootsrap images: .umg-fluid .rounded .rounded-corners .rounded-circle Bootstrap javascript: tabs and pills navigation. accordion navigation tooltips popover modals tooltips code: data-toggle=\"tooltip\" data-html=\"true\" title=\"string\" data-placement=\"bottom\"","title":"Bootstrap"},{"location":"knowledge-base/general/frameworks/bootstrap/#bootstrap","text":"bootsrap : <i class=\"material-icons\">Ahmad Ali</i> div .col-12 col-sm-6 : 12 on xs, 6 on sm and above. div .col : 12 on all. div .col-sm-4 , div .col-sm , div .col-sm-3 : from sm and above, first div 4, last div 3, middle div will take the rest. item .d-sm-none d-md-block : hide from sm and above, until find another d will show from md and above. class order : EX: .sm-order-first and .sm-order-last . center vertically: .align-items-center or align-self-center center Horizontally : text-center or justify-content-center navbar: nav: .navbar navbar-dark navbar-expand-sm bg-primary : dark blue nav, stacked on sm. nav > ul : .navbar-nav mr-auto : left side menu. nav > ul > li : .nav-item : nav > ul > li: .active : highlight current page link. nav > ul > li > a : .nav-link navbar menu button: <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#menu-id\" > menu button > span : .navbar-toggler-icon surround ul menu with div: <div class=\"collapse navbar-collapse\" id=\"#menu-id\"> push elemnt as much as you cant to the left (margin right): .mr-auto . push elemnt as much as you cant to the right (margin left): .ml-auto . bootsrap breadcrumbs: <ol class=\"col-12 breadcrumb\"> <li class=\"breadcrumb-item\"><a href=\"index.html\">Home</a></li> <li class=\"breadcrumb-item active\">About</li> </ol> .table-responsive : should added in a wrapper div, not applied to the table directly. addtional html tags: dl dt dd blockqoute embed object bootsrap images: .umg-fluid .rounded .rounded-corners .rounded-circle Bootstrap javascript: tabs and pills navigation. accordion navigation tooltips popover modals tooltips code: data-toggle=\"tooltip\" data-html=\"true\" title=\"string\" data-placement=\"bottom\"","title":"Bootstrap"},{"location":"knowledge-base/general/frameworks/react/","text":"React Intro JSX is a syntax extension to JavaScript that allows React Elements to be written inside JavaScript using HTML tags. ```js var element = Hello World! //jsx var element = React.createElement( // without jsx 'h1', null, 'Hello World!' ) // render ReactDOM.render( element, document.getElementById(\"root\") ) ``` A React Component is an independent reusable component that outputs a React Element based on its properties and state. General Notes when you design your routes, make sure that front end routes differe from back-end routes. especially when using react-node app. to apply a css file to one component only: wrap you component into <div className=\"Component-Name\"> . use that class before the css rules you want to apply for this component only as: .component-name p{ //css rules } handle 404 route: add this code as the last Route in the switch statement: javascript <Route path=\"*\" component={NotFound} />; { /* OR */ } <Route component={NotFound} />; component that will simplify your routes: usage <SimpleRoute path={path} component={component_to_render} / > import React from 'react' import { Route } from 'react-router-dom' const SimpleRoute({ component: Component, ...rest }) => ( <Route {...rest} render={props => { return ( <div> <Component {...props} /> </div> ) }} /> ) export default SimpleRoute component will recieve props check if we are still on the same component OR ifwe are coming from another component: ```javascript componentWillReceiveProps = newProps => { if (newProps.location !== this.props.location) { console.log('here should we gos') } /* * typical props.location at the first mount of the copmonent, where the props.location == newprops.location */ this.props.window = {pathname: \"/page\", search: \"\", hash: \"\", state: undefined, key: \"yooxfy\"} /* * if the component re-rendered in the same page, the { this.props.window.key } will change, * so they are no longer equal. */ ``` passing functions to the events should be by reference , but if we call the function inside the event listener it will be called imediatley and not waiting until the event is bieng fired. javascript <Component onClick={myFunction} /> // will wait untill you click to fire the function <Component onClick={myFunction()} /> // the function will be fired immediatley. <Component onClick={(e, someVar) => myFunction(someVar)} /> // this way we can pass parameters to that handlers passing functions as props should be by reference. Hide dom element by click outside of it componentWillMount() { document.addEventListener(\"mousedown\", this.handleClickOutside, false); } componentWillUnmount() { document.removeEventListener(\"mousedown\", this.handleClickOutside, false); } handleClickOutside = e => { if (this.node.contains(e.target)) { return; } if (this.state.divshow) { this.setState({ divshow: false }); } }; render() { return this.state.divshow ? ( <div ref={node => (this.node = node)} style={{ backgroundColor: \"red\", height: \"200px\" }} /> ) : ( \"Hided\" ); } hook that responds to changes In screen dementions ```js import React, { useLayoutEffect, useState } from 'react'; function useWindowSize() { const [size, setSize] = useState([0, 0]); useLayoutEffect(() => { function updateSize() { setSize([window.innerWidth, window.innerHeight]); } window.addEventListener('resize', updateSize); updateSize(); return () => window.removeEventListener('resize', updateSize); }, []); return size; } export default useWindowSize; ```","title":"React"},{"location":"knowledge-base/general/frameworks/react/#react","text":"","title":"React"},{"location":"knowledge-base/general/frameworks/react/#intro","text":"JSX is a syntax extension to JavaScript that allows React Elements to be written inside JavaScript using HTML tags. ```js var element =","title":"Intro"},{"location":"knowledge-base/general/frameworks/react/#general-notes","text":"when you design your routes, make sure that front end routes differe from back-end routes. especially when using react-node app. to apply a css file to one component only: wrap you component into <div className=\"Component-Name\"> . use that class before the css rules you want to apply for this component only as: .component-name p{ //css rules } handle 404 route: add this code as the last Route in the switch statement: javascript <Route path=\"*\" component={NotFound} />; { /* OR */ } <Route component={NotFound} />;","title":"General Notes"},{"location":"knowledge-base/general/frameworks/react/#component-that-will-simplify-your-routes","text":"usage <SimpleRoute path={path} component={component_to_render} / > import React from 'react' import { Route } from 'react-router-dom' const SimpleRoute({ component: Component, ...rest }) => ( <Route {...rest} render={props => { return ( <div> <Component {...props} /> </div> ) }} /> ) export default SimpleRoute","title":"component that will simplify your routes:"},{"location":"knowledge-base/general/frameworks/react/#component-will-recieve-props","text":"check if we are still on the same component OR ifwe are coming from another component: ```javascript componentWillReceiveProps = newProps => { if (newProps.location !== this.props.location) { console.log('here should we gos') } /* * typical props.location at the first mount of the copmonent, where the props.location == newprops.location */ this.props.window = {pathname: \"/page\", search: \"\", hash: \"\", state: undefined, key: \"yooxfy\"} /* * if the component re-rendered in the same page, the { this.props.window.key } will change, * so they are no longer equal. */ ``` passing functions to the events should be by reference , but if we call the function inside the event listener it will be called imediatley and not waiting until the event is bieng fired. javascript <Component onClick={myFunction} /> // will wait untill you click to fire the function <Component onClick={myFunction()} /> // the function will be fired immediatley. <Component onClick={(e, someVar) => myFunction(someVar)} /> // this way we can pass parameters to that handlers passing functions as props should be by reference.","title":"component will recieve props"},{"location":"knowledge-base/general/frameworks/react/#hide-dom-element-by-click-outside-of-it","text":"componentWillMount() { document.addEventListener(\"mousedown\", this.handleClickOutside, false); } componentWillUnmount() { document.removeEventListener(\"mousedown\", this.handleClickOutside, false); } handleClickOutside = e => { if (this.node.contains(e.target)) { return; } if (this.state.divshow) { this.setState({ divshow: false }); } }; render() { return this.state.divshow ? ( <div ref={node => (this.node = node)} style={{ backgroundColor: \"red\", height: \"200px\" }} /> ) : ( \"Hided\" ); }","title":"Hide dom element by click outside of it"},{"location":"knowledge-base/general/frameworks/react/#hook-that-responds-to-changes-in-screen-dementions","text":"```js import React, { useLayoutEffect, useState } from 'react'; function useWindowSize() { const [size, setSize] = useState([0, 0]); useLayoutEffect(() => { function updateSize() { setSize([window.innerWidth, window.innerHeight]); } window.addEventListener('resize', updateSize); updateSize(); return () => window.removeEventListener('resize', updateSize); }, []); return size; } export default useWindowSize; ```","title":"hook that responds to changes In screen dementions"},{"location":"knowledge-base/general/frameworks/redux/","text":"Redux redux articuture store all of our application state into one javascript object called store. the store is the single source of truth, and it is accessible by all parts of the ui. redux follows the functional programming principles. the store is immutable, so we need a function to mutate it, this function is the reducer . the reducer copies the store and returns a new updated version of this store. the reducer return the new updated store after applying an action to it. reducers are pure functions, they don't change any state or do any side effects. js function reducer ( store, action ) { const updatedStore = { ...store } // copy the store updatedStore.something = dispatch ( action , store.something); // update the copied store return updatedStore; // return the updated copied store } start with redux design the store. define the actions. create the reducer. set up the store. 1. design the store store is smiply an immutable object, that contains all of our state. js const store = { state1 : [], state2 : {}, state3 : false, ... } 2. define the actions action is an object with at least one single property called type . payload is an objct contains all the data associated with one action. js const action = { type: \"ACTION_TYPE\", payload : { id : 44, description: \" ... \", }, }, 3. create the reducer reducer is a function that takes a state and apply an action to it. js const id = 0; function reducer (state = store.state1, action ) { if (action.type === \"ACTION_TYPE1\") { return [ ...state, { id : ++id, description: action.payload.description, .... } ]; } else if (action.type === \"ACTION_TYPE2\") { return ...; } return state; // default } 4. set up the store lastly connecting everything together. ```js import { createStore } from \"redux\"; import reducer from \"./reducer\"; const reducers = combineReducers([reducer]); const store = createStore(reducers); export default store; ```","title":"Redux"},{"location":"knowledge-base/general/frameworks/redux/#redux","text":"","title":"Redux"},{"location":"knowledge-base/general/frameworks/redux/#redux-articuture","text":"store all of our application state into one javascript object called store. the store is the single source of truth, and it is accessible by all parts of the ui. redux follows the functional programming principles. the store is immutable, so we need a function to mutate it, this function is the reducer . the reducer copies the store and returns a new updated version of this store. the reducer return the new updated store after applying an action to it. reducers are pure functions, they don't change any state or do any side effects. js function reducer ( store, action ) { const updatedStore = { ...store } // copy the store updatedStore.something = dispatch ( action , store.something); // update the copied store return updatedStore; // return the updated copied store }","title":"redux articuture"},{"location":"knowledge-base/general/frameworks/redux/#start-with-redux","text":"design the store. define the actions. create the reducer. set up the store.","title":"start with redux"},{"location":"knowledge-base/general/frameworks/redux/#1-design-the-store","text":"store is smiply an immutable object, that contains all of our state. js const store = { state1 : [], state2 : {}, state3 : false, ... }","title":"1. design the store"},{"location":"knowledge-base/general/frameworks/redux/#2-define-the-actions","text":"action is an object with at least one single property called type . payload is an objct contains all the data associated with one action. js const action = { type: \"ACTION_TYPE\", payload : { id : 44, description: \" ... \", }, },","title":"2. define the actions"},{"location":"knowledge-base/general/frameworks/redux/#3-create-the-reducer","text":"reducer is a function that takes a state and apply an action to it. js const id = 0; function reducer (state = store.state1, action ) { if (action.type === \"ACTION_TYPE1\") { return [ ...state, { id : ++id, description: action.payload.description, .... } ]; } else if (action.type === \"ACTION_TYPE2\") { return ...; } return state; // default }","title":"3. create the reducer"},{"location":"knowledge-base/general/frameworks/redux/#4-set-up-the-store","text":"lastly connecting everything together. ```js import { createStore } from \"redux\"; import reducer from \"./reducer\"; const reducers = combineReducers([reducer]); const store = createStore(reducers); export default store; ```","title":"4. set up the store"},{"location":"knowledge-base/general/interviews/","text":"","title":"Index"},{"location":"knowledge-base/general/interviews/js_general/","text":"General Javascript Interview questions Index why do you use es6?, what\u2019re your favourite features of es6 functions declarations vs functions expressions 1. why do you use es6?, what\u2019re your favourite features of es6 JavaScript is a lightweight, interpreted, object-oriented programming language with first-class functions most commonly known as a scripting language for web pages. scripting language, which means that its code is interpreted instead of compiled. ES6 has Object-Oriented Classes. ES6 has Arrow Functions arrow functions don't have this so you don't need to rebind. Modules are built into ES6. ES6 has template literal strings. ES6 uses Yarn ES6 let, const over var. ES6 has spread operators. ES6 has Promises ES6 for..in, for..of 2. functions declarations vs functions expressions js function x (args) { /*code */ } //declaration const x = function (args) { /*code */ } //expression function expressions are not hoisted , so you can't use it before declaration. 3. Class declarations vs class expressions ```js class myClass { constructor() { } // class declaration } var myVar = class myClass { constructor() { } // class expression } ``` you can't use class (instanciate) a class before its declaration. 4. what's hoisting? hoisting: mechanism only moves the declaration. The assignments are left in place. if the variable is not declared: js console.log(type of myVar); // undefined console.log(myVar); // ReferenceError all variable and function declarations are hoisted to the top of their scope, efore any code execution. undeclared variables do not exist until code assigning them is executed. Therefore, assigning a value to an undeclared variable implicitly creates it as a global variable when the assignment is executed. This means that, all undeclared variables are global variables. ```js function hoist() { a = 20; var b = 100; } hoist(); console.log(a); // 20 // Accessible as a global variable outside hoist() function console.log(b); // ReferenceError /* Since it was declared, it is confined to the hoist() function scope. We can't print it out outside the confines of the hoist() function. Output: ReferenceError: b is not defined */ ``` always declare variables regardless of whether they are in a function or global scope. if the variable declared down the app, call its value on top will not give referenceError because its declaration has being hoisted before the execution , while its value still undefined untill you reach the assigment expression . then it will gets a value. ```js console.log(hoist); // Output: undefined var hoist = 'hoist'; console.log(hoist); // Output: hoist ``` whten using strict mode, no hoisting, using variables before their declaration will throw an error: ```js 'use strict'; console.log(hoist); // Output: ReferenceError: hoist is not defined hoist = 'Hoisted'; ``` when using let or const keyword, the variable is hoisted to the top of the block, using variables before their declaration will throw an error, as if it is a var in strict mode : ```js console.log(hoist); // Output: ReferenceError: hoist is not defined let hoist = 'Hoisted'; ``` constant variable must be both declared and initialised before use. function expressions are not hoisted , so you can't use it before declaration. while function declaration are hoisted . There's a bit of an argument to be made as to whether Javascript es6 let, const variables and classes are actually hoisted, roughly hoisted or not hoisted. Some argue that they are actually hoisted but uninitialised whilst some argue that they are not hoisted at all. 5. class hoisting class declarations are hoisted. However, they remain uninitialised until evaluation. class expressions are not hoisted. in both cases, you can't use a class before its declaration. ```js var x = new myClass(); // ReferenceError: myClass is not defined // class is hoisted, but uninitialized. class myClass { constructor() { } // class declaration } var y = new myNewClass(); // TypeError: myNewClass is not a constructor // class is not hoisted. var myVar = class myNewClass { constructor() { } // class expression } ``` 6. Order of precedence Variable assignment over function declaration ```js var double = 22; function double(num) { return (num*2); } console.log(typeof double); // Output: number ``` Function declarations over variable declarations ```js var double; function double(num) { return (num*2); } console.log(typeof double); // Output: function ``` Even if we reversed the position of the declarations, the JavaScript interpreter would still consider the Order of precedence . 7. shallow copying vs deep copying? A copy just looks like the old thing, but isn\u2019t. When you change the copy, you expect the original thing to stay the same, whereas the copy changes. deep copy means that all of the values of the new variable are copied and disconnected from the original variable. A shallow copy means that certain (sub-)values are still connected to the original variable. ```js let x = [1,2,3]; let y ={ x:1, z:2 } let n = x; // shallow copy, changing n values will change x values let m = y // shallow copy let c = []; for( i in x ) { c[i] = x[i] } // deep copy, c now is copmletely disconnected from x. let d = {}; for(j in y){ d[j] = y[j] } // deep copy // Also, deep copies // Arrays let a = [...x]; let a = Array.from(x); let a = x.map(el => el); let a = x.slice(); // Objects let b = { ...y }; let b = Object.assign({}, y); ``` if the object or the array yhat you'r copying contains another no-permative types like if they contains nested objects or arrays, those elements will get a shallow copy even if you do a deep copy to the main object ```js let x = { a: 1, b: [ 1,2 ], c:{ x:1, y:2 } }; let y = { ...x } // shallow copy for x.a and x.b let y = { ...x.b, ...x.c, ...x } // deep copy ``` if you don't know how deep your elements are, you can stringify the element first , then parse it to get deep copy. ```js let x = { a: 1, b: [ 1,2 ], c:{ x:1, y:2 } }; let y = JSON.parse(JSON.stringify(x)) // deep copy ``` 8. async vs sync? 5. when do you use promises vs Callbacks? 6. pros and cons of js? 7. why \"use strict\"? when using strict mode we opt into a restricted variant of JavaScript that will not tolerate the usage of variables before they are declared. Running our code in strict mode: Eliminates some silent JavaScript errors by changing them to explicit throw errors which will be spit out by the interpreter. Fixes mistakes that make it difficult for JavaScript engines to perform optimisations. Prohibits some syntax likely to be defined in future versions of JavaScript. 8. global scope vs block scope? 9. what's fe or functional expression?? 10. coding style; singilton pattern or factory patterns or revealing module pattern? 11. how do you right readable code? 12. const vs let? 13. var vs let? 14. document. cookie?? 15. null vs undefined? 16. attributes vs properties?? 17. session vs loacalstorage?, 18. Window vs document? 19. event bubbling?? 20. nan?? 21. primitive types passed to a function by value, others passed by reference. 22. by value: creating a copy of the original. 23. parseInt? 24. Prompt ? 25. func.call() vs func.apply() Call: pass the args individually as ..args Apply: pass the args as an array [args] 26. Empty an array arr = []; assigns a reference to a new array to a variable, while any other references are unaffected. which means that references to the contents of the previous array are still kept in memory, leading to memory leaks. arr.length = 0; deletes everything in the array, which does hit other references. arr.splice(0, arr.length); while(arr.length){ arr.pop(); } 27. Delete x delete opereator: deletes an entety from an object. will not affect any other types of vars. 28. Truthy and falsy values 29. delete an entity of an object will set it to undefined. 30. Object.create(obj) 31. const func = function(){ //code } reference error 32. First-class Functions JavaScript treats functions as first-class citizens, meaning you can pass functions as parameters to other functions just like you would any other variable. 33. JavaScript Is Prototype-based it supports classes and has some inheretance features similar to other kangs like c++ .. Prototype-based programming is a style of object-oriented programming in which behavior reuse (known as inheritance) is performed via a process of reusing existing objects via delegations that serve as prototypes. 34. JavaScript Event Loops event listener listening to an event, when the event is fired it goes to queue of events. the queue gets executed FIFO and sync. every element of the queue gets fully executed with its function before strating executing the second elemnt. if a function contains other function calls, they are all performed prior to processing a new message from the queue. This is called run-to-completion. JavaScript is non-blocking, meaning that when an asynchronous operation is being performed, the program is able to process other things, such as receiving user input, while waiting for the asynchronous operation to complete, not blocking the main execution thread. Design patterns 35. Constructor Pattern you define a constructor, then you get instances of this constructor. changing some of constructor properties will not change the already created instances, it will only change the instances that will be created after the change to the constructor. 36. Prototype pattern define a cornstructor with some prototype properties. instantiatipon of this constructor will lead to create a new instance, but the prototypes properties still holded in the constructor. changes to the constructor will be copied to all instnces of this constructor. 37. arrow funcs vs normal funcs ```js class myclass { y(){ this; // refers to the function y, not the class. } that = this; x(){ this; // refers to the function x that ;// refers to the class } z = () => { this; // refers to fnction z } } // OR var n = { x: function(){ console.log(this) }, // n that: this, // window y: function(){ console.log(this, this.that) }, //n , window z: () => console.log(this) // window } ``` references design patterens hoisting","title":"Js general"},{"location":"knowledge-base/general/interviews/js_general/#general-javascript-interview-questions","text":"","title":"General Javascript Interview questions"},{"location":"knowledge-base/general/interviews/js_general/#index","text":"why do you use es6?, what\u2019re your favourite features of es6 functions declarations vs functions expressions","title":"Index"},{"location":"knowledge-base/general/interviews/js_general/#1-why-do-you-use-es6-whatre-your-favourite-features-of-es6","text":"JavaScript is a lightweight, interpreted, object-oriented programming language with first-class functions most commonly known as a scripting language for web pages. scripting language, which means that its code is interpreted instead of compiled. ES6 has Object-Oriented Classes. ES6 has Arrow Functions arrow functions don't have this so you don't need to rebind. Modules are built into ES6. ES6 has template literal strings. ES6 uses Yarn ES6 let, const over var. ES6 has spread operators. ES6 has Promises ES6 for..in, for..of","title":"1. why do you use es6?, what\u2019re your favourite features of es6"},{"location":"knowledge-base/general/interviews/js_general/#2-functions-declarations-vs-functions-expressions","text":"js function x (args) { /*code */ } //declaration const x = function (args) { /*code */ } //expression function expressions are not hoisted , so you can't use it before declaration.","title":"2. functions declarations vs functions expressions"},{"location":"knowledge-base/general/interviews/js_general/#3-class-declarations-vs-class-expressions","text":"```js class myClass { constructor() { } // class declaration } var myVar = class myClass { constructor() { } // class expression } ``` you can't use class (instanciate) a class before its declaration.","title":"3. Class declarations vs class expressions"},{"location":"knowledge-base/general/interviews/js_general/#4-whats-hoisting","text":"hoisting: mechanism only moves the declaration. The assignments are left in place. if the variable is not declared: js console.log(type of myVar); // undefined console.log(myVar); // ReferenceError all variable and function declarations are hoisted to the top of their scope, efore any code execution. undeclared variables do not exist until code assigning them is executed. Therefore, assigning a value to an undeclared variable implicitly creates it as a global variable when the assignment is executed. This means that, all undeclared variables are global variables. ```js function hoist() { a = 20; var b = 100; } hoist(); console.log(a); // 20 // Accessible as a global variable outside hoist() function console.log(b); // ReferenceError /* Since it was declared, it is confined to the hoist() function scope. We can't print it out outside the confines of the hoist() function. Output: ReferenceError: b is not defined */ ``` always declare variables regardless of whether they are in a function or global scope. if the variable declared down the app, call its value on top will not give referenceError because its declaration has being hoisted before the execution , while its value still undefined untill you reach the assigment expression . then it will gets a value. ```js console.log(hoist); // Output: undefined var hoist = 'hoist'; console.log(hoist); // Output: hoist ``` whten using strict mode, no hoisting, using variables before their declaration will throw an error: ```js 'use strict'; console.log(hoist); // Output: ReferenceError: hoist is not defined hoist = 'Hoisted'; ``` when using let or const keyword, the variable is hoisted to the top of the block, using variables before their declaration will throw an error, as if it is a var in strict mode : ```js console.log(hoist); // Output: ReferenceError: hoist is not defined let hoist = 'Hoisted'; ``` constant variable must be both declared and initialised before use. function expressions are not hoisted , so you can't use it before declaration. while function declaration are hoisted . There's a bit of an argument to be made as to whether Javascript es6 let, const variables and classes are actually hoisted, roughly hoisted or not hoisted. Some argue that they are actually hoisted but uninitialised whilst some argue that they are not hoisted at all.","title":"4. what's hoisting?"},{"location":"knowledge-base/general/interviews/js_general/#5-class-hoisting","text":"class declarations are hoisted. However, they remain uninitialised until evaluation. class expressions are not hoisted. in both cases, you can't use a class before its declaration. ```js var x = new myClass(); // ReferenceError: myClass is not defined // class is hoisted, but uninitialized. class myClass { constructor() { } // class declaration } var y = new myNewClass(); // TypeError: myNewClass is not a constructor // class is not hoisted. var myVar = class myNewClass { constructor() { } // class expression } ```","title":"5. class hoisting"},{"location":"knowledge-base/general/interviews/js_general/#6-order-of-precedence","text":"Variable assignment over function declaration ```js var double = 22; function double(num) { return (num*2); } console.log(typeof double); // Output: number ``` Function declarations over variable declarations ```js var double; function double(num) { return (num*2); } console.log(typeof double); // Output: function ``` Even if we reversed the position of the declarations, the JavaScript interpreter would still consider the Order of precedence .","title":"6. Order of precedence"},{"location":"knowledge-base/general/interviews/js_general/#7-shallow-copying-vs-deep-copying","text":"A copy just looks like the old thing, but isn\u2019t. When you change the copy, you expect the original thing to stay the same, whereas the copy changes. deep copy means that all of the values of the new variable are copied and disconnected from the original variable. A shallow copy means that certain (sub-)values are still connected to the original variable. ```js let x = [1,2,3]; let y ={ x:1, z:2 } let n = x; // shallow copy, changing n values will change x values let m = y // shallow copy let c = []; for( i in x ) { c[i] = x[i] } // deep copy, c now is copmletely disconnected from x. let d = {}; for(j in y){ d[j] = y[j] } // deep copy // Also, deep copies // Arrays let a = [...x]; let a = Array.from(x); let a = x.map(el => el); let a = x.slice(); // Objects let b = { ...y }; let b = Object.assign({}, y); ``` if the object or the array yhat you'r copying contains another no-permative types like if they contains nested objects or arrays, those elements will get a shallow copy even if you do a deep copy to the main object ```js let x = { a: 1, b: [ 1,2 ], c:{ x:1, y:2 } }; let y = { ...x } // shallow copy for x.a and x.b let y = { ...x.b, ...x.c, ...x } // deep copy ``` if you don't know how deep your elements are, you can stringify the element first , then parse it to get deep copy. ```js let x = { a: 1, b: [ 1,2 ], c:{ x:1, y:2 } }; let y = JSON.parse(JSON.stringify(x)) // deep copy ```","title":"7. shallow copying vs deep copying?"},{"location":"knowledge-base/general/interviews/js_general/#8-async-vs-sync","text":"","title":"8. async vs sync?"},{"location":"knowledge-base/general/interviews/js_general/#5-when-do-you-use-promises-vs-callbacks","text":"","title":"5. when do you use promises vs Callbacks?"},{"location":"knowledge-base/general/interviews/js_general/#6-pros-and-cons-of-js","text":"","title":"6. pros and cons of js?"},{"location":"knowledge-base/general/interviews/js_general/#7-why-use-strict","text":"when using strict mode we opt into a restricted variant of JavaScript that will not tolerate the usage of variables before they are declared. Running our code in strict mode: Eliminates some silent JavaScript errors by changing them to explicit throw errors which will be spit out by the interpreter. Fixes mistakes that make it difficult for JavaScript engines to perform optimisations. Prohibits some syntax likely to be defined in future versions of JavaScript.","title":"7. why \"use strict\"?"},{"location":"knowledge-base/general/interviews/js_general/#8-global-scope-vs-block-scope","text":"","title":"8. global scope vs block scope?"},{"location":"knowledge-base/general/interviews/js_general/#9-whats-fe-or-functional-expression","text":"","title":"9. what's fe or functional expression??"},{"location":"knowledge-base/general/interviews/js_general/#10-coding-style-singilton-pattern-or-factory-patterns-or-revealing-module-pattern","text":"","title":"10. coding style; singilton pattern or factory patterns or revealing module pattern?"},{"location":"knowledge-base/general/interviews/js_general/#11-how-do-you-right-readable-code","text":"","title":"11. how do you right readable code?"},{"location":"knowledge-base/general/interviews/js_general/#12-const-vs-let","text":"","title":"12. const vs let?"},{"location":"knowledge-base/general/interviews/js_general/#13-var-vs-let","text":"","title":"13. var vs let?"},{"location":"knowledge-base/general/interviews/js_general/#14-document-cookie","text":"","title":"14. document. cookie??"},{"location":"knowledge-base/general/interviews/js_general/#15-null-vs-undefined","text":"","title":"15. null vs undefined?"},{"location":"knowledge-base/general/interviews/js_general/#16-attributes-vs-properties","text":"","title":"16. attributes vs properties??"},{"location":"knowledge-base/general/interviews/js_general/#17-session-vs-loacalstorage","text":"","title":"17. session vs loacalstorage?,"},{"location":"knowledge-base/general/interviews/js_general/#18-window-vs-document","text":"","title":"18. Window vs document?"},{"location":"knowledge-base/general/interviews/js_general/#19-event-bubbling","text":"","title":"19. event bubbling??"},{"location":"knowledge-base/general/interviews/js_general/#20-nan","text":"","title":"20. nan??"},{"location":"knowledge-base/general/interviews/js_general/#21-primitive-types-passed-to-a-function-by-value-others-passed-by-reference","text":"","title":"21. primitive types passed to a function by value, others passed by reference."},{"location":"knowledge-base/general/interviews/js_general/#22-by-value-creating-a-copy-of-the-original","text":"","title":"22. by value: creating a copy of the original."},{"location":"knowledge-base/general/interviews/js_general/#23-parseint","text":"","title":"23. parseInt?"},{"location":"knowledge-base/general/interviews/js_general/#24-prompt","text":"","title":"24. Prompt ?"},{"location":"knowledge-base/general/interviews/js_general/#25-funccall-vs-funcapply","text":"Call: pass the args individually as ..args Apply: pass the args as an array [args]","title":"25. func.call() vs func.apply()"},{"location":"knowledge-base/general/interviews/js_general/#26-empty-an-array","text":"arr = []; assigns a reference to a new array to a variable, while any other references are unaffected. which means that references to the contents of the previous array are still kept in memory, leading to memory leaks. arr.length = 0; deletes everything in the array, which does hit other references. arr.splice(0, arr.length); while(arr.length){ arr.pop(); }","title":"26. Empty an array"},{"location":"knowledge-base/general/interviews/js_general/#27-delete-x","text":"delete opereator: deletes an entety from an object. will not affect any other types of vars.","title":"27. Delete x"},{"location":"knowledge-base/general/interviews/js_general/#28-truthy-and-falsy-values","text":"","title":"28. Truthy and falsy values"},{"location":"knowledge-base/general/interviews/js_general/#29-delete-an-entity-of-an-object-will-set-it-to-undefined","text":"","title":"29. delete an entity of an object will set it to undefined."},{"location":"knowledge-base/general/interviews/js_general/#30-objectcreateobj","text":"","title":"30. Object.create(obj)"},{"location":"knowledge-base/general/interviews/js_general/#31-const-func-function-code","text":"reference error","title":"31. const func = function(){ //code }"},{"location":"knowledge-base/general/interviews/js_general/#32-first-class-functions","text":"JavaScript treats functions as first-class citizens, meaning you can pass functions as parameters to other functions just like you would any other variable.","title":"32. First-class Functions"},{"location":"knowledge-base/general/interviews/js_general/#33-javascript-is-prototype-based","text":"it supports classes and has some inheretance features similar to other kangs like c++ .. Prototype-based programming is a style of object-oriented programming in which behavior reuse (known as inheritance) is performed via a process of reusing existing objects via delegations that serve as prototypes.","title":"33. JavaScript Is Prototype-based"},{"location":"knowledge-base/general/interviews/js_general/#34-javascript-event-loops","text":"event listener listening to an event, when the event is fired it goes to queue of events. the queue gets executed FIFO and sync. every element of the queue gets fully executed with its function before strating executing the second elemnt. if a function contains other function calls, they are all performed prior to processing a new message from the queue. This is called run-to-completion. JavaScript is non-blocking, meaning that when an asynchronous operation is being performed, the program is able to process other things, such as receiving user input, while waiting for the asynchronous operation to complete, not blocking the main execution thread.","title":"34. JavaScript Event Loops"},{"location":"knowledge-base/general/interviews/js_general/#design-patterns","text":"","title":"Design patterns"},{"location":"knowledge-base/general/interviews/js_general/#35-constructor-pattern","text":"you define a constructor, then you get instances of this constructor. changing some of constructor properties will not change the already created instances, it will only change the instances that will be created after the change to the constructor.","title":"35. Constructor Pattern"},{"location":"knowledge-base/general/interviews/js_general/#36-prototype-pattern","text":"define a cornstructor with some prototype properties. instantiatipon of this constructor will lead to create a new instance, but the prototypes properties still holded in the constructor. changes to the constructor will be copied to all instnces of this constructor.","title":"36. Prototype pattern"},{"location":"knowledge-base/general/interviews/js_general/#37-arrow-funcs-vs-normal-funcs","text":"```js class myclass { y(){ this; // refers to the function y, not the class. } that = this; x(){ this; // refers to the function x that ;// refers to the class } z = () => { this; // refers to fnction z } } // OR var n = { x: function(){ console.log(this) }, // n that: this, // window y: function(){ console.log(this, this.that) }, //n , window z: () => console.log(this) // window } ```","title":"37. arrow funcs vs normal funcs"},{"location":"knowledge-base/general/interviews/js_general/#references","text":"design patterens hoisting","title":"references"},{"location":"knowledge-base/general/interviews/js_oop/","text":"OOP in JS 1. concepts of oop Abstraction Polymorphism Inheretance Encapsulation 2. procedural vs oop in procedural programming you write functions. change one function then you need to change everywhere spaggitti code functions have more parameters in oop: you write classes. functions have less params. change only the code in the class and it will changes every where simply. 3. Abstraction reduce the impact of change. hide un-necceary data. function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; let defaultLocation = {x:1, y:1} // private let defaultArea = function(){ // code, this method is private // we can call defaultLocation directly without this } } defaultLocation and defaultArea are private. you can't access them from the outer program. defaultLocation and defaultArea are local variables in the constructor function, so we can think of them as private but they are not . the square class interface does not contain defaultArea and defaultLocation and contain onlu x,y,area (the words with this). the square class is now abstracted, because we hide the default data so no body can miss around with them. 4. Inheretance eleminate redandant code. 5. polymorphism the object behaves differently depending on the class we are referincing. refactor ugly switch/case statments. 6. Encapsulation reduce complexity. increase reusability. 7. objects lterals const square = { x: 1, y: 2, area : function (){ console.log(this.x * this.y) } } object is collection of key value pairs. 8. Factory functions function createSquare(a,b){ return { x: a, y: b, area : function (){ console.log( a * b) } } } // so let q1 = createSquare(2,2); q1.area() //4 9. Constructors the first letter should be uppercase. it's like creating an instance of class, but in js there is no classes. function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; } // so q2 = new Square(2,2); // if we remove new, // 1) this will refer to the global object. // 2) q2 will be undefined. q2.area() //4 10. This by default this refers to the global object, eg. window . by using the new keyword before a constructor, this will refer to the new object. 11. every object has a constructor refers to the function that used to create this object. 12. Default constructors let q3 = new Object() q3.x = 2; q3.y = 2; q3.area = function(){ console.log(this.x * this.y) }; // OR let q4 = new Object({ x:2, y:2, area: function(){ console.log(this.x * this.y) } }) // so q3.area() //4 q4.area() //4 other default constructors: new String() , new Boolean() , new Number() ... 13. Functions are objects const square = new Function('a , b', ` this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; `) // So q5 = new square(2,2); q5.area() //4 14. Value Types (pirmiatives) vs Reference Types value types (pirimatives): Number String Boolean Symbol undefined null Reference types: Object Array Map Set Function copying a pirimative type will copy its value to the new variable. copying a refernce type will not copy its value to the new var, instead the memory address for the first var is stored in the new var. so copying a reference type is actually pointing to tits memory address. // value let x = 10; let y = x; x = 20; // x is 20, y still 10. // reference let x = { value: 10 }; let y = x; x.value = 20; // y.value = x.value = 20. passing a var by its value to a function will not change its original value. passing a var by its reference will change its original value directly. // primiatves (by value) let x = 10; function increase(num) { num++; } increase(x); console.log(x); // 10, copied by value, origin don't change. // Objects (by reference) let y = { value: 10 }; function increase(obj) { obj.value++; } increase(y); console.log(y); // { value: 11 }, copied by ref, origin changed directly. 15. add/remove properties let o = {x:1} // add o.y = 2; // o is now {x:1, y:2} o.x // 1, do notation 0[\"x\"] // 1, bracket notation // remove delete o.y; 16. enamurating objects // constructor function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; } // new object let o = new Square(1,2) // for .. in for (key in o){ console.log(key) // x , y , area console.log(o[key]) // 1, 2, funcion } // Object methods const keys = Object.keys(o); // [x, y, area] const values = Object.values(o); // [1, 2, function] // check if a key existed in an oject 'x' in o; // true 'area' in o; // true x in o; // false 17. setters and getters function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; let defaultLocation = {x:1, y:1} // private // 1) old way this.getDefaultLocation = function(){ return defaultLocation // getter } this.setDefaultLocation = function(obj){ defaultLocation.x = obj.x; defaultLocation.y = obj.y; // this is setter function } // to access it; // obj.getDefalutLocation() fo getter // obj.setDefalutLocation(objet) fo setter // 2) Another way Object.definePropoerty(this, 'defaultLocation', { get: function (){ return defaultLocation } set: function(obj){ defaultLocation.x = obj.x; defaultLocation.y = obj.y; // this is setter function } }); // to access it; // obj.defalutLocation fo getter // obj.defalutLocation = objet fo setter } accessing private properties should be only using methods setters and getters.","title":"OOP in JS"},{"location":"knowledge-base/general/interviews/js_oop/#oop-in-js","text":"","title":"OOP in JS"},{"location":"knowledge-base/general/interviews/js_oop/#1-concepts-of-oop","text":"Abstraction Polymorphism Inheretance Encapsulation","title":"1. concepts of oop"},{"location":"knowledge-base/general/interviews/js_oop/#2-procedural-vs-oop","text":"in procedural programming you write functions. change one function then you need to change everywhere spaggitti code functions have more parameters in oop: you write classes. functions have less params. change only the code in the class and it will changes every where simply.","title":"2. procedural vs oop"},{"location":"knowledge-base/general/interviews/js_oop/#3-abstraction","text":"reduce the impact of change. hide un-necceary data. function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; let defaultLocation = {x:1, y:1} // private let defaultArea = function(){ // code, this method is private // we can call defaultLocation directly without this } } defaultLocation and defaultArea are private. you can't access them from the outer program. defaultLocation and defaultArea are local variables in the constructor function, so we can think of them as private but they are not . the square class interface does not contain defaultArea and defaultLocation and contain onlu x,y,area (the words with this). the square class is now abstracted, because we hide the default data so no body can miss around with them.","title":"3. Abstraction"},{"location":"knowledge-base/general/interviews/js_oop/#4-inheretance","text":"eleminate redandant code.","title":"4. Inheretance"},{"location":"knowledge-base/general/interviews/js_oop/#5-polymorphism","text":"the object behaves differently depending on the class we are referincing. refactor ugly switch/case statments.","title":"5. polymorphism"},{"location":"knowledge-base/general/interviews/js_oop/#6-encapsulation","text":"reduce complexity. increase reusability.","title":"6. Encapsulation"},{"location":"knowledge-base/general/interviews/js_oop/#7-objects-lterals","text":"const square = { x: 1, y: 2, area : function (){ console.log(this.x * this.y) } } object is collection of key value pairs.","title":"7. objects lterals"},{"location":"knowledge-base/general/interviews/js_oop/#8-factory-functions","text":"function createSquare(a,b){ return { x: a, y: b, area : function (){ console.log( a * b) } } } // so let q1 = createSquare(2,2); q1.area() //4","title":"8. Factory functions"},{"location":"knowledge-base/general/interviews/js_oop/#9-constructors","text":"the first letter should be uppercase. it's like creating an instance of class, but in js there is no classes. function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; } // so q2 = new Square(2,2); // if we remove new, // 1) this will refer to the global object. // 2) q2 will be undefined. q2.area() //4","title":"9. Constructors"},{"location":"knowledge-base/general/interviews/js_oop/#10-this","text":"by default this refers to the global object, eg. window . by using the new keyword before a constructor, this will refer to the new object.","title":"10. This"},{"location":"knowledge-base/general/interviews/js_oop/#11-every-object-has-a-constructor-refers-to-the-function-that-used-to-create-this-object","text":"","title":"11. every object has a constructor refers to the function that used to create this object."},{"location":"knowledge-base/general/interviews/js_oop/#12-default-constructors","text":"let q3 = new Object() q3.x = 2; q3.y = 2; q3.area = function(){ console.log(this.x * this.y) }; // OR let q4 = new Object({ x:2, y:2, area: function(){ console.log(this.x * this.y) } }) // so q3.area() //4 q4.area() //4 other default constructors: new String() , new Boolean() , new Number() ...","title":"12. Default constructors"},{"location":"knowledge-base/general/interviews/js_oop/#13-functions-are-objects","text":"const square = new Function('a , b', ` this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; `) // So q5 = new square(2,2); q5.area() //4","title":"13. Functions are objects"},{"location":"knowledge-base/general/interviews/js_oop/#14-value-types-pirmiatives-vs-reference-types","text":"value types (pirimatives): Number String Boolean Symbol undefined null Reference types: Object Array Map Set Function copying a pirimative type will copy its value to the new variable. copying a refernce type will not copy its value to the new var, instead the memory address for the first var is stored in the new var. so copying a reference type is actually pointing to tits memory address. // value let x = 10; let y = x; x = 20; // x is 20, y still 10. // reference let x = { value: 10 }; let y = x; x.value = 20; // y.value = x.value = 20. passing a var by its value to a function will not change its original value. passing a var by its reference will change its original value directly. // primiatves (by value) let x = 10; function increase(num) { num++; } increase(x); console.log(x); // 10, copied by value, origin don't change. // Objects (by reference) let y = { value: 10 }; function increase(obj) { obj.value++; } increase(y); console.log(y); // { value: 11 }, copied by ref, origin changed directly.","title":"14. Value Types (pirmiatives) vs Reference Types"},{"location":"knowledge-base/general/interviews/js_oop/#15-addremove-properties","text":"let o = {x:1} // add o.y = 2; // o is now {x:1, y:2} o.x // 1, do notation 0[\"x\"] // 1, bracket notation // remove delete o.y;","title":"15. add/remove properties"},{"location":"knowledge-base/general/interviews/js_oop/#16-enamurating-objects","text":"// constructor function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; } // new object let o = new Square(1,2) // for .. in for (key in o){ console.log(key) // x , y , area console.log(o[key]) // 1, 2, funcion } // Object methods const keys = Object.keys(o); // [x, y, area] const values = Object.values(o); // [1, 2, function] // check if a key existed in an oject 'x' in o; // true 'area' in o; // true x in o; // false","title":"16. enamurating objects"},{"location":"knowledge-base/general/interviews/js_oop/#17-setters-and-getters","text":"function Square(a, b){ this.x = a; this.y = b; this.area = function (){ console.log(this.x * this.y) }; let defaultLocation = {x:1, y:1} // private // 1) old way this.getDefaultLocation = function(){ return defaultLocation // getter } this.setDefaultLocation = function(obj){ defaultLocation.x = obj.x; defaultLocation.y = obj.y; // this is setter function } // to access it; // obj.getDefalutLocation() fo getter // obj.setDefalutLocation(objet) fo setter // 2) Another way Object.definePropoerty(this, 'defaultLocation', { get: function (){ return defaultLocation } set: function(obj){ defaultLocation.x = obj.x; defaultLocation.y = obj.y; // this is setter function } }); // to access it; // obj.defalutLocation fo getter // obj.defalutLocation = objet fo setter } accessing private properties should be only using methods setters and getters.","title":"17. setters and getters"},{"location":"knowledge-base/general/interviews/references/","text":"Interview Preperation References https://www.fullstack.cafe/javascript/what-is-coercion-in-javascript https://www.fullstack.cafe/design%20patterns https://medium.com/basecs https://github.com/kdn251/interviews perfect plan and scedule to master algorithms and data structures common behavioral questions, reply with STAR method questions to ask algorithms What I Wish I'd Known About Equity Before Joining A Unicorn leet code more algorithms","title":"Interview Preperation"},{"location":"knowledge-base/general/interviews/references/#interview-preperation","text":"","title":"Interview Preperation"},{"location":"knowledge-base/general/interviews/references/#references","text":"https://www.fullstack.cafe/javascript/what-is-coercion-in-javascript https://www.fullstack.cafe/design%20patterns https://medium.com/basecs https://github.com/kdn251/interviews perfect plan and scedule to master algorithms and data structures common behavioral questions, reply with STAR method questions to ask algorithms What I Wish I'd Known About Equity Before Joining A Unicorn leet code more algorithms","title":"References"},{"location":"knowledge-base/general/interviews/self_introduction/","text":"Self Introduction make it short, direct, attention grapping. you should mention the following: name, past companies, noteworthy projects (best if it's a public consumer product that they might have heard of). KISS (Keep It Simple and Sweet). Tell the interviewer why you would make a good hire. Format sentence about your current or most recent role. few sentences about your (academic) background. What did you focus on? Some sentences about your professional experience after school/university. Where did you work? What projects did you deal with? What were the typical challenges and tasks? Which technologies did you use? Finish with a statement saying why you are seeking a new job opportunity and why you are interested in the role you applied for. cuases or motivatio to like this role - create products for users to improve their life.","title":"Self Introduction"},{"location":"knowledge-base/general/interviews/self_introduction/#self-introduction","text":"make it short, direct, attention grapping. you should mention the following: name, past companies, noteworthy projects (best if it's a public consumer product that they might have heard of). KISS (Keep It Simple and Sweet). Tell the interviewer why you would make a good hire.","title":"Self Introduction"},{"location":"knowledge-base/general/interviews/self_introduction/#format","text":"sentence about your current or most recent role. few sentences about your (academic) background. What did you focus on? Some sentences about your professional experience after school/university. Where did you work? What projects did you deal with? What were the typical challenges and tasks? Which technologies did you use? Finish with a statement saying why you are seeking a new job opportunity and why you are interested in the role you applied for.","title":"Format"},{"location":"knowledge-base/general/interviews/self_introduction/#cuases-or-motivatio-to-like-this-role","text":"","title":"cuases or motivatio to like this role"},{"location":"knowledge-base/general/interviews/self_introduction/#-create-products-for-users-to-improve-their-life","text":"","title":"- create products for users to improve their life."},{"location":"knowledge-base/general/javascript/","text":"","title":"Index"},{"location":"knowledge-base/general/javascript/arrays/","text":"Arrays notes create an array of length n filled with random numbers less than max: javascript Array.from({ length: n }, () => Math.floor(Math.random() * max)); use localCompare() to sort nested structures. example: javascript arr3 = arr3.sort((a, b) => { return a[1].localeCompare(b[1]); //a and b are both arrays. }); updating arrays with immutability in mind we don't change the original array, we deep copy the array, then update the copy. ```js const arr = [1,2,3]; // add to the first or the end of an array const newArr = [...arr, 4] / OR / [4, ...arr]; // add at a specific position const x = arr.indexOf(2); const newArr [...arr.slice(0,x), 4, ...arr.slice(x)]; // [1,4,2,3] // removing a specific element const newArr = arr.filter(e => e !== 2); // [1,3]; // updating const newArr = arr.map(e => {if (e === 2) {return e = 20 }else { return e } } ); // [ 1,20,3] const newArr = arr.map( e => e === 2 ? 20 : e ); // [1,20,3] // arr.map() will create a new copy, arr.forEach() will update the original array. ``` - if the array contains objects, u need to deep copy them to comply with the immutabilty princible.","title":"Arrays"},{"location":"knowledge-base/general/javascript/arrays/#arrays","text":"","title":"Arrays"},{"location":"knowledge-base/general/javascript/arrays/#notes","text":"create an array of length n filled with random numbers less than max: javascript Array.from({ length: n }, () => Math.floor(Math.random() * max)); use localCompare() to sort nested structures. example: javascript arr3 = arr3.sort((a, b) => { return a[1].localeCompare(b[1]); //a and b are both arrays. });","title":"notes"},{"location":"knowledge-base/general/javascript/arrays/#updating-arrays-with-immutability-in-mind","text":"we don't change the original array, we deep copy the array, then update the copy. ```js const arr = [1,2,3]; // add to the first or the end of an array const newArr = [...arr, 4] / OR / [4, ...arr]; // add at a specific position const x = arr.indexOf(2); const newArr [...arr.slice(0,x), 4, ...arr.slice(x)]; // [1,4,2,3] // removing a specific element const newArr = arr.filter(e => e !== 2); // [1,3]; // updating const newArr = arr.map(e => {if (e === 2) {return e = 20 }else { return e } } ); // [ 1,20,3] const newArr = arr.map( e => e === 2 ? 20 : e ); // [1,20,3] // arr.map() will create a new copy, arr.forEach() will update the original array. ``` - if the array contains objects, u need to deep copy them to comply with the immutabilty princible.","title":"updating arrays with immutability in mind"},{"location":"knowledge-base/general/javascript/cli/","text":"CLI to grap key from user command in your cli, use proccess.argv witch gives you an array and your first arg is at index 2 . tricky chain of functions : take user input, convert to string, split over ' ', extract numbers from str and assign them to item1 and item2. javascript const [item1, item2] = input.toString().split(\" \").map(Number);","title":"CLI"},{"location":"knowledge-base/general/javascript/cli/#cli","text":"to grap key from user command in your cli, use proccess.argv witch gives you an array and your first arg is at index 2 . tricky chain of functions : take user input, convert to string, split over ' ', extract numbers from str and assign them to item1 and item2. javascript const [item1, item2] = input.toString().split(\" \").map(Number);","title":"CLI"},{"location":"knowledge-base/general/javascript/datetime/","text":"Date and Time Notes get the date as number: Date.parse(ddate); get a readable date: Date(ddate).toLocalString() basic Date Time operations // you can pass a date or duration (number) or empty to get the time now > x = new Date(\"2020-05-26T12:19:38.430Z\") //Tue May 26 2020 13:19:38 GMT+0100 (British Summer Time) > x.getFullYear() // 2020 > x.getMonth() //4 > const month = x.toLocaleString('default', { month: 'long' }); // May > let duration = ( new Date() ).getTime() - x.getTime(); //208426207 // distance between 2 dates > duration.toLocaleString() // \"208,426,207\" > duration.toString() //\"208426207\" > x.getDay() // 2 // second day on the week Tuesday > x.getDate() // 26 // day of the month Duration display the distance between a date and the moment ```javascript const calculateDuration = (num) => { let durationDate = new Date(num); var epoch = new Date('1970-01-01 00:00:00-0600'); var diff_years = durationDate.getYear() - epoch.getYear(); var diff_month = durationDate.getMonth() - epoch.getMonth(); var diff_days = durationDate.getDate() - epoch.getDate(); let yy = diff_years ? diff_years + ' years ' : ''; let mm = diff_month ? diff_month + ' months ' : ''; let dd = diff_days ? diff_days + ' days ' : ''; return `${yy} ${mm} ${dd}` } /* * if num = \"208426207\" => calculateDuration is `2 days`. */ ``` using day.js: ```javascript // duration from now dayjs(date).fromNow() // 2 years ago dayjs(date).fromNow(true) // 2 years dayjs(date).fromNow() // 2 days ago // time from now up to ${date} // duration between 2 dates dayjs(date1).from(date2) // 2 years ago daysjs(date1).from(date2, true) // 2 years //format date dayjs(date).format('DD MMMM YYYY') // 20 May 2020 ``` resources https://day.js.org/docs/en/display/display","title":"Date and Time"},{"location":"knowledge-base/general/javascript/datetime/#date-and-time","text":"","title":"Date and Time"},{"location":"knowledge-base/general/javascript/datetime/#notes","text":"get the date as number: Date.parse(ddate); get a readable date: Date(ddate).toLocalString()","title":"Notes"},{"location":"knowledge-base/general/javascript/datetime/#basic-date-time-operations","text":"// you can pass a date or duration (number) or empty to get the time now > x = new Date(\"2020-05-26T12:19:38.430Z\") //Tue May 26 2020 13:19:38 GMT+0100 (British Summer Time) > x.getFullYear() // 2020 > x.getMonth() //4 > const month = x.toLocaleString('default', { month: 'long' }); // May > let duration = ( new Date() ).getTime() - x.getTime(); //208426207 // distance between 2 dates > duration.toLocaleString() // \"208,426,207\" > duration.toString() //\"208426207\" > x.getDay() // 2 // second day on the week Tuesday > x.getDate() // 26 // day of the month","title":"basic Date Time operations"},{"location":"knowledge-base/general/javascript/datetime/#duration","text":"display the distance between a date and the moment ```javascript const calculateDuration = (num) => { let durationDate = new Date(num); var epoch = new Date('1970-01-01 00:00:00-0600'); var diff_years = durationDate.getYear() - epoch.getYear(); var diff_month = durationDate.getMonth() - epoch.getMonth(); var diff_days = durationDate.getDate() - epoch.getDate(); let yy = diff_years ? diff_years + ' years ' : ''; let mm = diff_month ? diff_month + ' months ' : ''; let dd = diff_days ? diff_days + ' days ' : ''; return `${yy} ${mm} ${dd}` } /* * if num = \"208426207\" => calculateDuration is `2 days`. */ ``` using day.js: ```javascript // duration from now dayjs(date).fromNow() // 2 years ago dayjs(date).fromNow(true) // 2 years dayjs(date).fromNow() // 2 days ago // time from now up to ${date} // duration between 2 dates dayjs(date1).from(date2) // 2 years ago daysjs(date1).from(date2, true) // 2 years //format date dayjs(date).format('DD MMMM YYYY') // 20 May 2020 ```","title":"Duration"},{"location":"knowledge-base/general/javascript/datetime/#resources","text":"https://day.js.org/docs/en/display/display","title":"resources"},{"location":"knowledge-base/general/javascript/functions/","text":"Functions hiegher oreder functions function that take another function as an argument or return it or both js function func1 ( func ) { func() } // as an argument function func2 () { return function func(){} } // return a func function func3 ( func ) { func(); return function(){} } // both handle function arguments get all arguments to a function if you don't know the number of args in advance: javascript let argss = [...arguments]; //args will not work in all cases. //OR let argss = [].slice.call(arguments); Functional Composition combining two or more functions to produce a new function. Composing functions together is like snapping together a series of pipes for our data to flow through. ``javascript const func1 = str => str.trim(); const func2 = str => str.toLowerCase (); const func3 = str => ${str} `; const result = func3 ( func2 ( func1 ( \" hello \" ) ) ); // compostion ``` problems: you need to read code from right to left you ended up with a lot of pranctecess. so there is a cleaner way to compose functions, compose using lodash: ``js import { compose, pipe } from \"lodash\"; const func1 = str => str.trim(); const func2 = str => str.toLowerCase (); const func3 = str => ${str} `; // composing the 3 functions const funcCompose = compose( func3 , func2, func1 ); // most right will be applyed first ( func1 ), then it goes left (func2) and so on const result = funcCompose(\" hello \"); // no parentecess, but we still read from right // OR const funcCompose = pipe (func1, func2, func3 ); // most left function will be applied first, then to the right const result = funcCompose(\" hello \"); // no parentecess, reading from left. ``` Function currying technique to reduces the number of arguments that a function needs. ``js const func1 = str => ${str} ; const func2 = str => ${str} `; // we can write them in one function const func = ( str, htmlEle ) => { return `<${htmlEle}>${str}<!--${htmlEle}-->` }; // 2 args const func1 = str => func(str, \"div\"); // 1 argument only, currying const func2 = str => func (str, \"span\"); const result = func1(\" hello \"); // OR const func = htmleEle => str => { return `<${htmlEle}>${str}<!--${htmlEle}-->` }; const result = func ( \"div\" )( \" hello \" ); // currying ``` pure functions a function that alaways give us the same results if we gave it the same arguments. js const func = x => x * Math.random(); // not pure, random const func = x => x * 2; // pure const func = x => x + Date().toLocalString(); // not pure, contains date const func = x => x = X * 2; // NOT pure, it mutate its value, change the value of x. const func = x => x > y; // NOT pure, y is global, if y changes the func result changes as well. const func = ( x, y ) => x > y; // pure, x and y specified, so it alaways give us the same result. pure functions don't contain: random date or time global state (DOM, file, DB ..) pure function DO NOT change (mutate) the value of its arguments. benifits of pure funcs: self documenting: every thin is existed in the func. easily testable concurrency: since we don't need global state we can call these funcs in parrallel. cachable: sice we know that result will not change, we can cache the result of this function, and when the result needed again we can retrive this result from cache rather than do the computation one more time, this is useful when the pure func do heavy computation to compute the result.","title":"Functions"},{"location":"knowledge-base/general/javascript/functions/#functions","text":"","title":"Functions"},{"location":"knowledge-base/general/javascript/functions/#hiegher-oreder-functions","text":"function that take another function as an argument or return it or both js function func1 ( func ) { func() } // as an argument function func2 () { return function func(){} } // return a func function func3 ( func ) { func(); return function(){} } // both","title":"hiegher oreder functions"},{"location":"knowledge-base/general/javascript/functions/#handle-function-arguments","text":"get all arguments to a function if you don't know the number of args in advance: javascript let argss = [...arguments]; //args will not work in all cases. //OR let argss = [].slice.call(arguments);","title":"handle function arguments"},{"location":"knowledge-base/general/javascript/functions/#functional-composition","text":"combining two or more functions to produce a new function. Composing functions together is like snapping together a series of pipes for our data to flow through. ``javascript const func1 = str => str.trim(); const func2 = str => str.toLowerCase (); const func3 = str => ${str} `; const result = func3 ( func2 ( func1 ( \" hello \" ) ) ); // compostion ``` problems: you need to read code from right to left you ended up with a lot of pranctecess. so there is a cleaner way to compose functions, compose using lodash: ``js import { compose, pipe } from \"lodash\"; const func1 = str => str.trim(); const func2 = str => str.toLowerCase (); const func3 = str => ${str} `; // composing the 3 functions const funcCompose = compose( func3 , func2, func1 ); // most right will be applyed first ( func1 ), then it goes left (func2) and so on const result = funcCompose(\" hello \"); // no parentecess, but we still read from right // OR const funcCompose = pipe (func1, func2, func3 ); // most left function will be applied first, then to the right const result = funcCompose(\" hello \"); // no parentecess, reading from left. ```","title":"Functional Composition"},{"location":"knowledge-base/general/javascript/functions/#function-currying","text":"technique to reduces the number of arguments that a function needs. ``js const func1 = str => ${str} ; const func2 = str => ${str} `; // we can write them in one function const func = ( str, htmlEle ) => { return `<${htmlEle}>${str}<!--${htmlEle}-->` }; // 2 args const func1 = str => func(str, \"div\"); // 1 argument only, currying const func2 = str => func (str, \"span\"); const result = func1(\" hello \"); // OR const func = htmleEle => str => { return `<${htmlEle}>${str}<!--${htmlEle}-->` }; const result = func ( \"div\" )( \" hello \" ); // currying ```","title":"Function currying"},{"location":"knowledge-base/general/javascript/functions/#pure-functions","text":"a function that alaways give us the same results if we gave it the same arguments. js const func = x => x * Math.random(); // not pure, random const func = x => x * 2; // pure const func = x => x + Date().toLocalString(); // not pure, contains date const func = x => x = X * 2; // NOT pure, it mutate its value, change the value of x. const func = x => x > y; // NOT pure, y is global, if y changes the func result changes as well. const func = ( x, y ) => x > y; // pure, x and y specified, so it alaways give us the same result. pure functions don't contain: random date or time global state (DOM, file, DB ..) pure function DO NOT change (mutate) the value of its arguments. benifits of pure funcs: self documenting: every thin is existed in the func. easily testable concurrency: since we don't need global state we can call these funcs in parrallel. cachable: sice we know that result will not change, we can cache the result of this function, and when the result needed again we can retrive this result from cache rather than do the computation one more time, this is useful when the pure func do heavy computation to compute the result.","title":"pure functions"},{"location":"knowledge-base/general/javascript/generaljs/","text":"General JS js functions index Boolean(any) arr.find() Number() arr.every() str.startsWith() str.endsWith() Notes arr.pop() and arr.unshift() returns the single Elemnt that they worked on. if you are returning a single element from an array, use arr.find() instead of arr.filter() make a new promise ```javascript function sleep(ms = 0) { return new Promise((resolve) => setTimeout(resolve, ms)); } //get the result after a second sleep(1000).then((data) => console.log(\"data\", data)); ``` this and that this and that in js, that refering to the main this in a scope, while you are going deeper into a scope this will refer to the deeper element, while that will refer to the parent: ```javascript function MyConstructor(options) { let that = this; this.someprop = options.someprop || \"defaultprop\"; document.addEventListener(\"click\", (event) => { alert(that.someprop); }); } new MyConstructor({ someprop: \"Hello World\", }); ``` swap quickly js x = 1; y = 240; [x,y] = [y,x] >>> x, y // 240 , 1 double '!!' we can use double exclamation points !! to get a boolean value from non-boolean: javascript let x = \"abc\"; // x is truthy; !x = false; !!x = true; let y = null; // y is falsey; !y = true; !!y= false; show Nice json ```js {JSON.stringify(values, null, 2)} ```","title":"General JS"},{"location":"knowledge-base/general/javascript/generaljs/#general-js","text":"","title":"General JS"},{"location":"knowledge-base/general/javascript/generaljs/#js-functions-index","text":"Boolean(any) arr.find() Number() arr.every() str.startsWith() str.endsWith()","title":"js functions index"},{"location":"knowledge-base/general/javascript/generaljs/#notes","text":"arr.pop() and arr.unshift() returns the single Elemnt that they worked on. if you are returning a single element from an array, use arr.find() instead of arr.filter()","title":"Notes"},{"location":"knowledge-base/general/javascript/generaljs/#make-a-new-promise","text":"```javascript function sleep(ms = 0) { return new Promise((resolve) => setTimeout(resolve, ms)); } //get the result after a second sleep(1000).then((data) => console.log(\"data\", data)); ```","title":"make a new promise"},{"location":"knowledge-base/general/javascript/generaljs/#this-and-that","text":"this and that in js, that refering to the main this in a scope, while you are going deeper into a scope this will refer to the deeper element, while that will refer to the parent: ```javascript function MyConstructor(options) { let that = this; this.someprop = options.someprop || \"defaultprop\"; document.addEventListener(\"click\", (event) => { alert(that.someprop); }); } new MyConstructor({ someprop: \"Hello World\", }); ```","title":"this and that"},{"location":"knowledge-base/general/javascript/generaljs/#swap-quickly","text":"js x = 1; y = 240; [x,y] = [y,x] >>> x, y // 240 , 1","title":"swap quickly"},{"location":"knowledge-base/general/javascript/generaljs/#double","text":"we can use double exclamation points !! to get a boolean value from non-boolean: javascript let x = \"abc\"; // x is truthy; !x = false; !!x = true; let y = null; // y is falsey; !y = true; !!y= false;","title":"double '!!'"},{"location":"knowledge-base/general/javascript/generaljs/#show-nice-json","text":"```js {JSON.stringify(values, null, 2)} ```","title":"show Nice json"},{"location":"knowledge-base/general/javascript/numbers/","text":"Numbers e == 0 will return true if e = flase or any other falsey value, e === 0 strict for 0 only. useful number formatter (espesially for currency) javascript /** * initializing currency formatter */ const formatter = Intl.NumberFormat(\"en-US\", { style: \"currency\", currency: \"GBP\", }); find Min and Max elemnt of an Array: ```javascript var numbers = [1, 2, 3, 4]; Math.max.apply(null, numbers); // 4 Math.min.apply(null, numbers); // 1 //OR Math.max(...numbers); // 4 Math.min(...numbers); // 1 ``` generating random number between 0 and max: javascript Math.floor(Math.random() * Math.floor(max));","title":"Numbers"},{"location":"knowledge-base/general/javascript/numbers/#numbers","text":"e == 0 will return true if e = flase or any other falsey value, e === 0 strict for 0 only. useful number formatter (espesially for currency) javascript /** * initializing currency formatter */ const formatter = Intl.NumberFormat(\"en-US\", { style: \"currency\", currency: \"GBP\", }); find Min and Max elemnt of an Array: ```javascript var numbers = [1, 2, 3, 4]; Math.max.apply(null, numbers); // 4 Math.min.apply(null, numbers); // 1 //OR Math.max(...numbers); // 4 Math.min(...numbers); // 1 ``` generating random number between 0 and max: javascript Math.floor(Math.random() * Math.floor(max));","title":"Numbers"},{"location":"knowledge-base/general/javascript/objects/","text":"Objects notes looping throgh an object: - for (let el in Obj) will loop over the keys. - for (let el of bj) will loop over the valuse ?? Immutabilty once we create an object we can not change it. and if we want to change it we have to copy it and mutate the copy. ex: strings is immutable, whan u change a string u actually create a new string. ex: objects in js are mutable. pros of immutability: makes our programs more predictable. faster in change detection. concurrency. cons of immutability: copying every elemnt in order to change it can slow ur performance. memory proplems: also associated with copying. the solution for this is structural sharing , when copying the elemnt only the changed elemnts will be copied, others will be shared, like shared by reference . updating objects updating an object with immutability priciples in mind: ```js const obj = { name: \"john\" }; obj.name = \"Ahmad\"; // wrong, we shouldn't do that, we need to creaete a copy first. // Object.assign() const newObj = Object.assign({}, obj, { name: \"Ahmad\", age: 27 }); // copy obj into newObj, and then update newObj with the new values. // spread operator const newObj = { ...obj } // make a copy newObj.name = \"Ahmad\"; update the copy. ``` spraed operator will make a shallow copy of any nested object, we need to create a new deep copy to apply our changes to the copy only ```js const obj1 = { name: \"ahmad\", address: { country: \"UK\", city: \"London\" } }; const newObj = { ...obj1 } //copy, shallow copy for address. newObj.address.city = \"Bristol\"; // the address of obj will changed as well. obj.address.city // Bristol. // To solve the problem const newObj = { ...obj, address: { ...obj.address }}; newObj.address.city = \"Bristol\"; // the address of obj will NOT changed becaue we deep copied obj. obj.address.city // London. ``` update object keys ```js const changeKey = (obj, old_key, new_key) => { // if the key will change if (old_key !== new_key) { Object.defineProperty(obj, new_key, // add a new property to obj with the obj[new_key] = same value. Object.getOwnPropertyDescriptor(obj, old_key)); // descriptor contains the valeu of the property delete obj[old_key]; // delete old key and its value. } } ``` Delete object key //1 delete obj.keyName; //2 obj.keyName = undefined; check if object js const isObject = obj => !!obj && typeof obj === 'object';","title":"Objects"},{"location":"knowledge-base/general/javascript/objects/#objects","text":"","title":"Objects"},{"location":"knowledge-base/general/javascript/objects/#notes","text":"looping throgh an object: - for (let el in Obj) will loop over the keys. - for (let el of bj) will loop over the valuse ??","title":"notes"},{"location":"knowledge-base/general/javascript/objects/#immutabilty","text":"once we create an object we can not change it. and if we want to change it we have to copy it and mutate the copy. ex: strings is immutable, whan u change a string u actually create a new string. ex: objects in js are mutable. pros of immutability: makes our programs more predictable. faster in change detection. concurrency. cons of immutability: copying every elemnt in order to change it can slow ur performance. memory proplems: also associated with copying. the solution for this is structural sharing , when copying the elemnt only the changed elemnts will be copied, others will be shared, like shared by reference .","title":"Immutabilty"},{"location":"knowledge-base/general/javascript/objects/#updating-objects","text":"updating an object with immutability priciples in mind: ```js const obj = { name: \"john\" }; obj.name = \"Ahmad\"; // wrong, we shouldn't do that, we need to creaete a copy first. // Object.assign() const newObj = Object.assign({}, obj, { name: \"Ahmad\", age: 27 }); // copy obj into newObj, and then update newObj with the new values. // spread operator const newObj = { ...obj } // make a copy newObj.name = \"Ahmad\"; update the copy. ``` spraed operator will make a shallow copy of any nested object, we need to create a new deep copy to apply our changes to the copy only ```js const obj1 = { name: \"ahmad\", address: { country: \"UK\", city: \"London\" } }; const newObj = { ...obj1 } //copy, shallow copy for address. newObj.address.city = \"Bristol\"; // the address of obj will changed as well. obj.address.city // Bristol. // To solve the problem const newObj = { ...obj, address: { ...obj.address }}; newObj.address.city = \"Bristol\"; // the address of obj will NOT changed becaue we deep copied obj. obj.address.city // London. ```","title":"updating objects"},{"location":"knowledge-base/general/javascript/objects/#update-object-keys","text":"```js const changeKey = (obj, old_key, new_key) => { // if the key will change if (old_key !== new_key) { Object.defineProperty(obj, new_key, // add a new property to obj with the obj[new_key] = same value. Object.getOwnPropertyDescriptor(obj, old_key)); // descriptor contains the valeu of the property delete obj[old_key]; // delete old key and its value. } } ```","title":"update object keys"},{"location":"knowledge-base/general/javascript/objects/#delete-object-key","text":"//1 delete obj.keyName; //2 obj.keyName = undefined;","title":"Delete object key"},{"location":"knowledge-base/general/javascript/objects/#check-if-object","text":"js const isObject = obj => !!obj && typeof obj === 'object';","title":"check if object"},{"location":"knowledge-base/general/javascript/strings/","text":"Strings if you use string.split(/(regex)/) will split the str keeping the regex match element. use this to pass variables to the regex. javascript let viraible_passes_to_regex = new RegExp ( `string contains a ${ var }` , 'gi' );","title":"Strings"},{"location":"knowledge-base/general/javascript/strings/#strings","text":"if you use string.split(/(regex)/) will split the str keeping the regex match element. use this to pass variables to the regex. javascript let viraible_passes_to_regex = new RegExp ( `string contains a ${ var }` , 'gi' );","title":"Strings"},{"location":"knowledge-base/general/node/","text":"","title":"Index"},{"location":"knowledge-base/general/node/argv/","text":"process.argv using this variable, we can grab the all vars and flags passed to the current process. in this example, we will create a function to grab a specific flag when passed to a process. when passed to a process means that you specify the flag when calling node filename -flag flagValue // grab content of a specific flag const grab = (flag) => { let indexAfterFlag = process.argv.indexOf(flag) + 1; // calculate the indexAfterFlag return process.argv[indexAfterFlag]; }; // in our file const myFlagContent1 = grab(\"-flag1\"); // grab content of `-flag1` const myFlagContent2 = grab(\"--flag2\"); console.log(myFlagContent1, myFlagContent2); grab content of flags passed from terminal this function will grab the particular flag, no matter the order of the flags is. js // grab content of a specific flag const grab = flag => { let indexAfterFlag = process.argv.indexOf(flag) +1; return process.argv[indexAfterFlag]; } ```js // in our file const myFlagContent1 = grab('-flag1'); const myFlagContent2 = grab('--flag2'); console.log(myFlagContent1, myFlagContent2); ``` js // in terminal >> node file.js -flag1 test --flag2 \"test with spaces\" /* logs */ test test with space","title":"Argv"},{"location":"knowledge-base/general/node/argv/#processargv","text":"using this variable, we can grab the all vars and flags passed to the current process. in this example, we will create a function to grab a specific flag when passed to a process. when passed to a process means that you specify the flag when calling node filename -flag flagValue // grab content of a specific flag const grab = (flag) => { let indexAfterFlag = process.argv.indexOf(flag) + 1; // calculate the indexAfterFlag return process.argv[indexAfterFlag]; }; // in our file const myFlagContent1 = grab(\"-flag1\"); // grab content of `-flag1` const myFlagContent2 = grab(\"--flag2\"); console.log(myFlagContent1, myFlagContent2);","title":"process.argv"},{"location":"knowledge-base/general/node/argv/#grab-content-of-flags-passed-from-terminal","text":"this function will grab the particular flag, no matter the order of the flags is. js // grab content of a specific flag const grab = flag => { let indexAfterFlag = process.argv.indexOf(flag) +1; return process.argv[indexAfterFlag]; } ```js // in our file const myFlagContent1 = grab('-flag1'); const myFlagContent2 = grab('--flag2'); console.log(myFlagContent1, myFlagContent2); ``` js // in terminal >> node file.js -flag1 test --flag2 \"test with spaces\" /* logs */ test test with space","title":"grab content of flags passed from terminal"},{"location":"knowledge-base/general/node/node/","text":"Node.js notes if your request is empty, check if you have body-parser res.send() can't send a number, you should respond with object { result: number } post request with fetch javascript fetch(\"https://cyf-chat-server--ahmadali5.repl.co/messages/newMessage\", { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(newMsg) }) Get the full url of the route js var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl; error anatomy js var err = { message: \"error message\", // accessed by err or err.message stack: \"c:\\pth\\to\\file\", errors: { /* more error data */ } } global object global object contains functions, vars and objects we can use without requiring any external module. and it contains: console: console.log(any) __dirname: gives us the absolute path to the current directory. __filename: gives us the absolute path to the current file. require() function : import other modules. process object : contains info about the current process. Require() function node core modules. our own modules. third party modules path module path.basename(): get the file name only. path.basename(__filename) process object process.pid : get current process id. process.versions.node : get current node version. get environment information and vars. communicate with the terminal or parent processes through standard input and standard output. process.argv : get an array of all arguments passed to this process. process.stdout, process.stdin : regulates interactions between terminal and our program. exit the current process. process.exit()","title":"Node"},{"location":"knowledge-base/general/node/node/#nodejs","text":"","title":"Node.js"},{"location":"knowledge-base/general/node/node/#notes","text":"if your request is empty, check if you have body-parser res.send() can't send a number, you should respond with object { result: number }","title":"notes"},{"location":"knowledge-base/general/node/node/#post-request-with-fetch","text":"javascript fetch(\"https://cyf-chat-server--ahmadali5.repl.co/messages/newMessage\", { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(newMsg) })","title":"post request with fetch"},{"location":"knowledge-base/general/node/node/#get-the-full-url-of-the-route","text":"js var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;","title":"Get the full url of the route"},{"location":"knowledge-base/general/node/node/#error-anatomy","text":"js var err = { message: \"error message\", // accessed by err or err.message stack: \"c:\\pth\\to\\file\", errors: { /* more error data */ } }","title":"error anatomy"},{"location":"knowledge-base/general/node/node/#global-object","text":"global object contains functions, vars and objects we can use without requiring any external module. and it contains: console: console.log(any) __dirname: gives us the absolute path to the current directory. __filename: gives us the absolute path to the current file. require() function : import other modules. process object : contains info about the current process.","title":"global object"},{"location":"knowledge-base/general/node/node/#require-function","text":"node core modules. our own modules. third party modules","title":"Require() function"},{"location":"knowledge-base/general/node/node/#path-module","text":"path.basename(): get the file name only. path.basename(__filename)","title":"path module"},{"location":"knowledge-base/general/node/node/#process-object","text":"process.pid : get current process id. process.versions.node : get current node version. get environment information and vars. communicate with the terminal or parent processes through standard input and standard output. process.argv : get an array of all arguments passed to this process. process.stdout, process.stdin : regulates interactions between terminal and our program. exit the current process. process.exit()","title":"process object"},{"location":"knowledge-base/general/node/stdout/","text":"process.stdout, process.stdin stdout and stdin regulate communications between terminal and program. console.log is actually uses the process.stdout to print out messages. here is a complete example of program to ask a set of questions and record answers and print them back to the terminal. const questions = [ \"what's your name?\", \"what's your favorite language?\", \"where do you live?\", \"are you happy?\", ]; const ask = (index = null) => { if (index === null) { index = Math.floor(Math.random() * Math.floor(questions.length)); // generate random index no greater than questions.length } process.stdout.write(`${questions[index]} \\n`); // write a question to stdout process.stdout.write(\">\"); // prompting for answer }; ask(0); const answers = []; process.stdin.on(\"data\", (data) => { answers.push(data.toString().trim()); // adding answer to answers array if (answers.length < questions.length) { ask(answers.length); } if (answers.length === questions.length) { process.exit(0); // exit the process when we answered all questions, firing exit event } }); process.on(\"exit\", () => { // listening to exit event const [name, fav, live, happy] = answers; process.stdout.write(` Thank you ${name} For your answers you are living in ${live} and you like coding in ${fav} you are ${happy === \"yes\" ? \"happy\" : \"NOT happy\"} `); }); another Example: Async functions with timers, and progress bar const waitTime = 3000; const intervalTime = 500; let currentTime = 0; const incTime = () => { currentTime += intervalTime; const p = Math.floor((currentTime / waitTime) * 100); // calculate done percentage process.stdout.clearLine(); // delete the previous line in the stdout process.stdout.cursorTo(0); // move the cursor to the beginning of the line process.stdout.write(`waiting .. ${p} %`); }; console.log(`setting wait of ${waitTime / 1000} seconds`); const timerFinished = () => { clearInterval(interval); process.stdout.clearLine(); // delete the waiting percentage log line process.stdout.cursorTo(0); console.log(`done`); }; setTimeout(timerFinished, waitTime); // call timerFinished after waitTime milliseconds const interval = setInterval(incTime, intervalTime); // returns an interval var we can use it when clearing","title":"process.stdout, process.stdin"},{"location":"knowledge-base/general/node/stdout/#processstdout-processstdin","text":"stdout and stdin regulate communications between terminal and program. console.log is actually uses the process.stdout to print out messages. here is a complete example of program to ask a set of questions and record answers and print them back to the terminal. const questions = [ \"what's your name?\", \"what's your favorite language?\", \"where do you live?\", \"are you happy?\", ]; const ask = (index = null) => { if (index === null) { index = Math.floor(Math.random() * Math.floor(questions.length)); // generate random index no greater than questions.length } process.stdout.write(`${questions[index]} \\n`); // write a question to stdout process.stdout.write(\">\"); // prompting for answer }; ask(0); const answers = []; process.stdin.on(\"data\", (data) => { answers.push(data.toString().trim()); // adding answer to answers array if (answers.length < questions.length) { ask(answers.length); } if (answers.length === questions.length) { process.exit(0); // exit the process when we answered all questions, firing exit event } }); process.on(\"exit\", () => { // listening to exit event const [name, fav, live, happy] = answers; process.stdout.write(` Thank you ${name} For your answers you are living in ${live} and you like coding in ${fav} you are ${happy === \"yes\" ? \"happy\" : \"NOT happy\"} `); });","title":"process.stdout, process.stdin"},{"location":"knowledge-base/general/node/stdout/#another-example-async-functions-with-timers-and-progress-bar","text":"const waitTime = 3000; const intervalTime = 500; let currentTime = 0; const incTime = () => { currentTime += intervalTime; const p = Math.floor((currentTime / waitTime) * 100); // calculate done percentage process.stdout.clearLine(); // delete the previous line in the stdout process.stdout.cursorTo(0); // move the cursor to the beginning of the line process.stdout.write(`waiting .. ${p} %`); }; console.log(`setting wait of ${waitTime / 1000} seconds`); const timerFinished = () => { clearInterval(interval); process.stdout.clearLine(); // delete the waiting percentage log line process.stdout.cursorTo(0); console.log(`done`); }; setTimeout(timerFinished, waitTime); // call timerFinished after waitTime milliseconds const interval = setInterval(incTime, intervalTime); // returns an interval var we can use it when clearing","title":"another Example: Async functions with timers, and progress bar"},{"location":"knowledge-base/general/programming-languages/","text":"","title":"Index"},{"location":"knowledge-base/general/programming-languages/go/","text":"GoLang Docs commands go version go env : lists all en variables. run go run file.go : will compile and build then execute your file $GOPATH/bin/<file> : execute file.exe file after file.go being compiled. compile go install : build (compile) all apps into GOPATH/bin go install <dir>/<file> compile that file into GOPATH/bin go build : build (compile) this project inside this folder init go mod init <projectName> : create go.mod file for you, similar to package.json test go test -cover ./... will run all the tests around the project. Definitions GOROOT : the folder where goLang is installed GOPATH : the folder or workspace that contains all your go code. by default, on widows, GOPATH =C:/Users/<user>/go , GOROOT=C:/Go package clause the first line of the package: package main : entry point package <packageName> : package name should match the directory they are in, multiple files can form one package. notes will not run if unused var. prettier will remove the unsued imports automatically. if you want to compile with unuseed var, rename it to _ makefile is similar to npm scripts when importing local package, never start with / , alawyas start with the project name. when appending a struct or slice or map with a new item, never pass the added item by reference, alaways exeplicitly pass its value. only capitalized functions or Vars are exported from packages. Math math.sqrt2 >>> 1.4142135623730951 math.Floor(2.7) >>> round down // 2 math.Ceil(2.7) >>>> round up // 3 maps key/value pairs (like objects) use map of maps: ```go var mapOfMaps = make(map[string]map[string]string) } // { \"_key1\" : { \"key1\" : \"value1\", \"key2\":\"value2\" } } ``` slices array with no predefined length Functions strconv.Itoa : convert to string fmt.Sprintln(a,b) : converting to one string a + \" \" + b \\n fmt.Sprint(a,b) : return one s a+b pointers with go Go: javascript var x int; // assign var named x &x // give us the memory addres where x stored, &x is of type pointer to T of x (*int) *(&x) // give us the value that stored in address (&x) x == *(&x) //true Example: ```go var x int; fmt.Printf(\"%T\", &x) // int, type of pointer to int, Reserves 4 bytes in memory. fmt.Printf(\"%p\", &x) // 0xc00002c008, momory address for the the pointer to x fmt.Printf(\"%T\", x) // int, type of int. fmt.Printf(\"%p\", x) // 0, value of x fmt.Printf(\"%T\", (&x)) // int, type of the value that stored in the momory address (&x) // writtin to memory using memory addres *(&x) = 4; fmt.Printf(\"%v\\n\", x) // x is now 4; ``` pass pointers to functions you can pass vars to functions in go : 1. by pointers: 1. the function gets access to the memory address (location) to the passed var, so it can directly change it's value. 2. in the function declaration: specify the type of var as *varType . 3. when calling the function: pass the var as &varName . pass by value: just pass a normal var, There is no passing variables by reference. because there are no 2 variables pointing to the same memory address. you can store the value of a specific address in more than one address but you can't have 2 varaibles pointing to the same memory address. ```go func main() { var x, y int = 5,6; SwapByPointers(&x,&y) // call the swapper passing memory addreses of x and y. fmt.Println(x,\"\\n\",y) // x now 6, y is 5 SwapByValue(x,y) // call the swapper passing reference for x and y. fmt.Println(x,\"\\n\",y) // x now 6, y is 5 } // passing *int which is a pointer to int func SwapByPointers(a *int, b *int){ var temp int = *(a) // storing the value in the stored memory (&a) into temp. *(a) = *(b) // swapping the values existed in the memory. *(b) = temp; } // passing the var, and then use its reference to do the swap func SwapByValue(a int, b int){ var temp int = *(&a) *(&a) = *(&b) *(&b) = temp; } ``` stack allocation is cheap, heap allocation is expensive. Packages log : logging to the cosole. net/http : create a server encoding/json : stringify, destringify json github.com/gorilla/mux : lite weight server strconv : handle strings web Apps read request body in pure net/http: ```go router.HandleFunc(\"/test\", func(res http.ResponseWriter, req *http.Request) { d, _ := ioutil.ReadAll(req.Body) log.Printf(\"data passed is %s\", d) }) ```` references https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/#:~:text=Go%20allocates%20memory%20in%20two,will%20be%20on%20the%20stack. https://blog.golang.org/pprof","title":"GoLang Docs"},{"location":"knowledge-base/general/programming-languages/go/#golang-docs","text":"","title":"GoLang Docs"},{"location":"knowledge-base/general/programming-languages/go/#commands","text":"go version go env : lists all en variables.","title":"commands"},{"location":"knowledge-base/general/programming-languages/go/#run","text":"go run file.go : will compile and build then execute your file $GOPATH/bin/<file> : execute file.exe file after file.go being compiled.","title":"run"},{"location":"knowledge-base/general/programming-languages/go/#compile","text":"go install : build (compile) all apps into GOPATH/bin go install <dir>/<file> compile that file into GOPATH/bin go build : build (compile) this project inside this folder","title":"compile"},{"location":"knowledge-base/general/programming-languages/go/#init","text":"go mod init <projectName> : create go.mod file for you, similar to package.json","title":"init"},{"location":"knowledge-base/general/programming-languages/go/#test","text":"go test -cover ./... will run all the tests around the project.","title":"test"},{"location":"knowledge-base/general/programming-languages/go/#definitions","text":"GOROOT : the folder where goLang is installed GOPATH : the folder or workspace that contains all your go code. by default, on widows, GOPATH =C:/Users/<user>/go , GOROOT=C:/Go","title":"Definitions"},{"location":"knowledge-base/general/programming-languages/go/#package-clause","text":"the first line of the package: package main : entry point package <packageName> : package name should match the directory they are in, multiple files can form one package.","title":"package clause"},{"location":"knowledge-base/general/programming-languages/go/#notes","text":"will not run if unused var. prettier will remove the unsued imports automatically. if you want to compile with unuseed var, rename it to _ makefile is similar to npm scripts when importing local package, never start with / , alawyas start with the project name. when appending a struct or slice or map with a new item, never pass the added item by reference, alaways exeplicitly pass its value. only capitalized functions or Vars are exported from packages.","title":"notes"},{"location":"knowledge-base/general/programming-languages/go/#math","text":"math.sqrt2 >>> 1.4142135623730951 math.Floor(2.7) >>> round down // 2 math.Ceil(2.7) >>>> round up // 3","title":"Math"},{"location":"knowledge-base/general/programming-languages/go/#maps","text":"key/value pairs (like objects) use map of maps: ```go var mapOfMaps = make(map[string]map[string]string) } // { \"_key1\" : { \"key1\" : \"value1\", \"key2\":\"value2\" } } ```","title":"maps"},{"location":"knowledge-base/general/programming-languages/go/#slices","text":"array with no predefined length","title":"slices"},{"location":"knowledge-base/general/programming-languages/go/#functions","text":"strconv.Itoa : convert to string fmt.Sprintln(a,b) : converting to one string a + \" \" + b \\n fmt.Sprint(a,b) : return one s a+b","title":"Functions"},{"location":"knowledge-base/general/programming-languages/go/#pointers-with-go","text":"Go: javascript var x int; // assign var named x &x // give us the memory addres where x stored, &x is of type pointer to T of x (*int) *(&x) // give us the value that stored in address (&x) x == *(&x) //true Example: ```go var x int; fmt.Printf(\"%T\", &x) // int, type of pointer to int, Reserves 4 bytes in memory. fmt.Printf(\"%p\", &x) // 0xc00002c008, momory address for the the pointer to x fmt.Printf(\"%T\", x) // int, type of int. fmt.Printf(\"%p\", x) // 0, value of x fmt.Printf(\"%T\", (&x)) // int, type of the value that stored in the momory address (&x) // writtin to memory using memory addres *(&x) = 4; fmt.Printf(\"%v\\n\", x) // x is now 4; ```","title":"pointers with go"},{"location":"knowledge-base/general/programming-languages/go/#pass-pointers-to-functions","text":"you can pass vars to functions in go : 1. by pointers: 1. the function gets access to the memory address (location) to the passed var, so it can directly change it's value. 2. in the function declaration: specify the type of var as *varType . 3. when calling the function: pass the var as &varName . pass by value: just pass a normal var, There is no passing variables by reference. because there are no 2 variables pointing to the same memory address. you can store the value of a specific address in more than one address but you can't have 2 varaibles pointing to the same memory address. ```go func main() { var x, y int = 5,6; SwapByPointers(&x,&y) // call the swapper passing memory addreses of x and y. fmt.Println(x,\"\\n\",y) // x now 6, y is 5 SwapByValue(x,y) // call the swapper passing reference for x and y. fmt.Println(x,\"\\n\",y) // x now 6, y is 5 } // passing *int which is a pointer to int func SwapByPointers(a *int, b *int){ var temp int = *(a) // storing the value in the stored memory (&a) into temp. *(a) = *(b) // swapping the values existed in the memory. *(b) = temp; } // passing the var, and then use its reference to do the swap func SwapByValue(a int, b int){ var temp int = *(&a) *(&a) = *(&b) *(&b) = temp; } ``` stack allocation is cheap, heap allocation is expensive.","title":"pass pointers to functions"},{"location":"knowledge-base/general/programming-languages/go/#packages","text":"log : logging to the cosole. net/http : create a server encoding/json : stringify, destringify json github.com/gorilla/mux : lite weight server strconv : handle strings","title":"Packages"},{"location":"knowledge-base/general/programming-languages/go/#web-apps","text":"read request body in pure net/http: ```go router.HandleFunc(\"/test\", func(res http.ResponseWriter, req *http.Request) { d, _ := ioutil.ReadAll(req.Body) log.Printf(\"data passed is %s\", d) }) ````","title":"web Apps"},{"location":"knowledge-base/general/programming-languages/go/#references","text":"https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/#:~:text=Go%20allocates%20memory%20in%20two,will%20be%20on%20the%20stack. https://blog.golang.org/pprof","title":"references"},{"location":"knowledge-base/general/programming-languages/python/","text":"python ternary operations: state = \"nice\" if is_nice else \"not nice\" import files from fileName import module # same root directory from folder.fileName import module # if the file existed in a sub directory General function description print(any, sep=\"\\t\") print any number of arguments separated by Tab pprint(any) pretty print Dictionary function description d = dict() create empty dict d.get(key, defaultValue) get the value of a key in dictionary, if not found will assign defaultValue to it d.keys() return a list of all keys in dictionary d.values() return a list of all values in dictionary d.items() return a list of items as key, value Tuple Random function description access random by import random random.random() generates random real (float) numbers between 0.0 and 1.0 (not included) random.randint(low, high) generates random integer between low and high (both included) random.choice(list) selects a random element from the list. List function description t = list() create empty list t.sort( reverse=True ) sort list descending order t.extend(list) take every element of list and add it to end of t by order","title":"python"},{"location":"knowledge-base/general/programming-languages/python/#python","text":"","title":"python"},{"location":"knowledge-base/general/programming-languages/python/#ternary-operations","text":"state = \"nice\" if is_nice else \"not nice\"","title":"ternary operations:"},{"location":"knowledge-base/general/programming-languages/python/#import-files","text":"from fileName import module # same root directory from folder.fileName import module # if the file existed in a sub directory","title":"import files"},{"location":"knowledge-base/general/programming-languages/python/#general","text":"function description print(any, sep=\"\\t\") print any number of arguments separated by Tab pprint(any) pretty print","title":"General"},{"location":"knowledge-base/general/programming-languages/python/#dictionary","text":"function description d = dict() create empty dict d.get(key, defaultValue) get the value of a key in dictionary, if not found will assign defaultValue to it d.keys() return a list of all keys in dictionary d.values() return a list of all values in dictionary d.items() return a list of items as key, value Tuple","title":"Dictionary"},{"location":"knowledge-base/general/programming-languages/python/#random","text":"function description access random by import random random.random() generates random real (float) numbers between 0.0 and 1.0 (not included) random.randint(low, high) generates random integer between low and high (both included) random.choice(list) selects a random element from the list.","title":"Random"},{"location":"knowledge-base/general/programming-languages/python/#list","text":"function description t = list() create empty list t.sort( reverse=True ) sort list descending order t.extend(list) take every element of list and add it to end of t by order","title":"List"},{"location":"knowledge-base/general/software-development/","text":"software_development","title":"software\\_development"},{"location":"knowledge-base/general/software-development/#software_development","text":"","title":"software_development"},{"location":"knowledge-base/general/software-development/agile/","text":"Agile process Working software is a key aspect of Agile. software development is all about iterations, if you succeed or failed this week does not mean that the things will be the same next week. so we need to be adaptable. quotes General George S. Patton once said, tell people where to go, but not how to get there, and you'll be amazed by the results. Henrik Kniberg, an Agile trainer and author, said: \u201cThe important thing is not your process. The important thing is your process for improving your process.\u201d Alan Lakein, author og famous books on personal time management. He says, \"Planning is bringing the future into the present so you can do something about it now.\" terminology verified product : means that the product was \"done right\" and meets the standards laid out by the development team. validated product : meets the needs of the client. We say that a validated product is the \"right product\". hacking : getting the things work without propper pre-planning. Ad hoc development: coding from your mind without a specific plan. Agile Manifesto team of developers gathered to come up with better ways to manage the process of producing great software. They established foGeneral George S. Patton once said, tell people where to go, but not how to get there, and you'll be amazed by the results.ur core value statements about what is most important in software development. To further expand on the core values, the Alliance also agreed on 12 supporting principles. 4 core values of Agile: Individuals and interactions over processes and tools. Working software over comprehensive documentation. Customer collaboration over contract negotiation. Responding to change over following a plan. from these 4 core vluaes we can say: Your developers and clients will be more productive and effective in a collaborative relationship. You need to facilitate communication between the people wanting the product and the people producing the product. documentation should still be created constantly throughout the project. But when tough choices have to be made, a piece of working software is a lot more valuable than a document that outlines what the software should do. you need to foster a positive relationship with your customer that is more concerned with what they want and not as concerned with what is laid out in some contract. The client is the center of design and it is important to make sure that their vision is what is being developed. Software is constantly changing and it is important to develop your software in such a way that changes are easy to respond to. Agile 12 principles: Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Deliver working software frequently, from a couple of weeks to a couple of months with a preference to the shorter timescale. Working software is the primary measure of progress. welcome changing requirements even late in development. Agile processes harness change for the customer's competitive advantage. continuous attention to technical excellence and good design enhances agility. Having readable, simple code and more flexible designs will allow changes to be easily implemented. Having a good design can let you know what components are dependent on each other. agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. simplicity, the art of maximizing the amount of work not done, is essential. This does not mean that Agile is about delivering less. It means that Agile is about delivering what is essential and reducing unnecessary work. build projects around motivated individuals. Give them the environment and support that they need, and trust them to get the job done. the best architectures, requirements, and designs emerge from self-organizing teams client-developer communication, business people and developers must work together daily throughout the project. the most efficient and effective method for conveying information to and within a development team is face-to-face conversation. reviewing what's been done, at regular intervals, the team reflects on how to become more effective, then tunes and adjusts it's behavior accordingly. good ways to make your software product more change friendly Frequent client communication. Neat, commented source code. Continuously reviewing and improving your project. Updated, prioritized list of features. Development team that is open to change. practices follow the concept of simplicity from the Agile Manifesto minimal code that satisfies the desired functionality. essential documentation over elaborate documentation. those are NOT following the simplicity: 1. no comments at all in the code. 2. only developing essential features : he team should develop features not based on their own criteria of what is important, but what is going to satisfy the client. problems will be solved through monitoring Adapting to changing product requirements. Meeting project plan deadlines. those are NOT solved by monitoring: 1. Avoiding having to fire his least productive developer: monitoring should not be seen as a way to assess the career progress. Keep it light. 2. Working without interruptions from the client: monitoring should not be a substitute for good communication with your client. resources what is exactly a product manager Tedx: the first secret of design Tedx: how to manage for collective creativity survey result comparng software engenniring methodologies Agile manifesto website","title":"Agile process"},{"location":"knowledge-base/general/software-development/agile/#agile-process","text":"Working software is a key aspect of Agile. software development is all about iterations, if you succeed or failed this week does not mean that the things will be the same next week. so we need to be adaptable.","title":"Agile process"},{"location":"knowledge-base/general/software-development/agile/#quotes","text":"General George S. Patton once said, tell people where to go, but not how to get there, and you'll be amazed by the results. Henrik Kniberg, an Agile trainer and author, said: \u201cThe important thing is not your process. The important thing is your process for improving your process.\u201d Alan Lakein, author og famous books on personal time management. He says, \"Planning is bringing the future into the present so you can do something about it now.\"","title":"quotes"},{"location":"knowledge-base/general/software-development/agile/#terminology","text":"verified product : means that the product was \"done right\" and meets the standards laid out by the development team. validated product : meets the needs of the client. We say that a validated product is the \"right product\". hacking : getting the things work without propper pre-planning. Ad hoc development: coding from your mind without a specific plan.","title":"terminology"},{"location":"knowledge-base/general/software-development/agile/#agile-manifesto","text":"team of developers gathered to come up with better ways to manage the process of producing great software. They established foGeneral George S. Patton once said, tell people where to go, but not how to get there, and you'll be amazed by the results.ur core value statements about what is most important in software development. To further expand on the core values, the Alliance also agreed on 12 supporting principles. 4 core values of Agile: Individuals and interactions over processes and tools. Working software over comprehensive documentation. Customer collaboration over contract negotiation. Responding to change over following a plan. from these 4 core vluaes we can say: Your developers and clients will be more productive and effective in a collaborative relationship. You need to facilitate communication between the people wanting the product and the people producing the product. documentation should still be created constantly throughout the project. But when tough choices have to be made, a piece of working software is a lot more valuable than a document that outlines what the software should do. you need to foster a positive relationship with your customer that is more concerned with what they want and not as concerned with what is laid out in some contract. The client is the center of design and it is important to make sure that their vision is what is being developed. Software is constantly changing and it is important to develop your software in such a way that changes are easy to respond to.","title":"Agile Manifesto"},{"location":"knowledge-base/general/software-development/agile/#agile-12-principles","text":"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Deliver working software frequently, from a couple of weeks to a couple of months with a preference to the shorter timescale. Working software is the primary measure of progress. welcome changing requirements even late in development. Agile processes harness change for the customer's competitive advantage. continuous attention to technical excellence and good design enhances agility. Having readable, simple code and more flexible designs will allow changes to be easily implemented. Having a good design can let you know what components are dependent on each other. agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. simplicity, the art of maximizing the amount of work not done, is essential. This does not mean that Agile is about delivering less. It means that Agile is about delivering what is essential and reducing unnecessary work. build projects around motivated individuals. Give them the environment and support that they need, and trust them to get the job done. the best architectures, requirements, and designs emerge from self-organizing teams client-developer communication, business people and developers must work together daily throughout the project. the most efficient and effective method for conveying information to and within a development team is face-to-face conversation. reviewing what's been done, at regular intervals, the team reflects on how to become more effective, then tunes and adjusts it's behavior accordingly.","title":"Agile 12 principles:"},{"location":"knowledge-base/general/software-development/agile/#good-ways-to-make-your-software-product-more-change-friendly","text":"Frequent client communication. Neat, commented source code. Continuously reviewing and improving your project. Updated, prioritized list of features. Development team that is open to change.","title":"good ways to make your software product more change friendly"},{"location":"knowledge-base/general/software-development/agile/#practices-follow-the-concept-of-simplicity-from-the-agile-manifesto","text":"minimal code that satisfies the desired functionality. essential documentation over elaborate documentation. those are NOT following the simplicity: 1. no comments at all in the code. 2. only developing essential features : he team should develop features not based on their own criteria of what is important, but what is going to satisfy the client.","title":"practices follow the concept of simplicity from the Agile Manifesto"},{"location":"knowledge-base/general/software-development/agile/#problems-will-be-solved-through-monitoring","text":"Adapting to changing product requirements. Meeting project plan deadlines. those are NOT solved by monitoring: 1. Avoiding having to fire his least productive developer: monitoring should not be seen as a way to assess the career progress. Keep it light. 2. Working without interruptions from the client: monitoring should not be a substitute for good communication with your client.","title":"problems will be solved through monitoring"},{"location":"knowledge-base/general/software-development/agile/#resources","text":"what is exactly a product manager Tedx: the first secret of design Tedx: how to manage for collective creativity survey result comparng software engenniring methodologies Agile manifesto website","title":"resources"},{"location":"knowledge-base/general/software-development/requirments/","text":"Requirments understanding of the problems anser what rather than how distingush right system from 'wrong` system. Resources http://www.agilemodeling.com/essays/costOfChange.htm http://www.agile-process.org/change.html","title":"Requirments"},{"location":"knowledge-base/general/software-development/requirments/#requirments","text":"understanding of the problems anser what rather than how distingush right system from 'wrong` system.","title":"Requirments"},{"location":"knowledge-base/general/software-development/requirments/#resources","text":"http://www.agilemodeling.com/essays/costOfChange.htm http://www.agile-process.org/change.html","title":"Resources"},{"location":"knowledge-base/general/software-development/terminology/","text":"programming terminoloy Programming Paradigms various standard techniques used in programming [2]. 1. imperative oldeset style. functions are built out of statements which are generally phrased as imperative commands [1]. disadvantges: code reusability. unsafe nature of goto statements for implementing iterative blocks of code [2]. 2. procedural procedures (functions) are stitched together to form a program solves the problems that were encountered in the imperative programming. all programs can be seen as composed of the following control-structures [2]: sequential - ordered statements executed in a sequence selective - execute a selected block of statements based on the state of a program (Eg. if then else... ) iterative - execute a block repeatedly till some state is reached (Eg. while/for loop...) recursion - a statement is executed by repeatedly calling itself until some termination conditions are met 3. functional programming use pure functions. Pure functions are those that do not use any state from other entities. Every function is a self-sufficient entity that just performs a complex transformation on given inputs to produce outputs. It doesn't modify the input and is practically isolated from rest of the program [2]. The need of this pure functions arose from the fact that impure functions lead to various problems. Since they don't produce the same output on the same input, it makes the code harder for others to understand, debug and extend. advantages [2]: Lazy Evaluations: Since pure functions directly operate on input and behave like a transformation, one can actually remember transformations and apply them only when needed. So, when an input goes through series of pure functions sequentially, one can evaluate all those later only when the result is asked for. Parallelization: Pure functions can be easily parallelized as they are independent of each other. 4. Object-oriented Programming OOP is a programming paradigm based on a concept of entities (objects), which contains data (member variables) and behaviors (member functions) [2]. In OOP, computer programs are designed by making them out of objects interacting with one another. Every behavior of an object can possibly change the state ( member variables) of that object [2]. advantages Code reusability - Features like classes and inheritance make a lot of code reusable Encapsulation - Objects have abilities to hide a certain part of themselves from programmers. This prevents programmers tampering with things they shouldn't. Also, classes are designed to group related data implementing encapsulation [2]. Intuitiveness and Easy Design - It allows programmers to intuitively create large programs in a structured fashion. Extensible - Code in OOP is readable and much easier to maintain and modify compared to other paradigms programming languge features a programming language can described as [1]: modular : programs are made up of packages, which are made up of files. program broken into many modules which are independent of each other and interact only through a well-defined interface. 3. object-oriented statically-typed garbage-collected compiled: compiler takes the source code and translate it into machine language before execution. imperative. procedural. general statment : sequence of instructions. expression : the computation of a value by applying operators and functions to operands . functions parameters: vars in between parcanteces when you define the function. arguments: vars inside parantheces when you call the function. Memory and pointers Main memory is a sequence of storage locations Each location contains a value (content) and has a unique address A pointer is an address of a location allocated in main memory to store a value Pointer valued variables can store addresses of memory locations when a program sart executing, enough ammount of memory is reserved to this program. these reserved memory is bieng segmented to 3 segments 1 (segmentation) : stack segment. data segment code segment trying to access address of memory that is not bieng reserved to this program will give you segmentaion fault or error use of activation records in the stack to manage all local variables in this program. all local vars of all functions will be saved or reserved in the stack segment. Example: Dynamic vs Static static var: the var defined and has its own value before the program starts executing, therefor it will be placed in the stack when the program starts executing. dynamic: the var is not defined or has no value when the program starts executing, therefor the program will dynamically allocate memory for this var, this var will be placed in the heap. References [1] https://courses.edx.org/courses/course-v1:IITBombayX+CS101.2x+1T2020/course/ [2] https://courses.edx.org/courses/course-v1:IITBombayX+CS101.2x+1T2020/courseware/0bedc4e4756c42a9a704850dc93cffcf/ccab98a4b067400dabfe1ba3fd53a694/?activate_block_id=block-v1%3AIITBombayX%2BCS101.2x%2B1T2020%2Btype%40sequential%2Bblock%40ccab98a4b067400dabfe1ba3fd53a694","title":"programming terminoloy"},{"location":"knowledge-base/general/software-development/terminology/#programming-terminoloy","text":"","title":"programming terminoloy"},{"location":"knowledge-base/general/software-development/terminology/#programming-paradigms","text":"various standard techniques used in programming [2].","title":"Programming Paradigms"},{"location":"knowledge-base/general/software-development/terminology/#1-imperative","text":"oldeset style. functions are built out of statements which are generally phrased as imperative commands [1]. disadvantges: code reusability. unsafe nature of goto statements for implementing iterative blocks of code [2].","title":"1. imperative"},{"location":"knowledge-base/general/software-development/terminology/#2-procedural","text":"procedures (functions) are stitched together to form a program solves the problems that were encountered in the imperative programming. all programs can be seen as composed of the following control-structures [2]: sequential - ordered statements executed in a sequence selective - execute a selected block of statements based on the state of a program (Eg. if then else... ) iterative - execute a block repeatedly till some state is reached (Eg. while/for loop...) recursion - a statement is executed by repeatedly calling itself until some termination conditions are met","title":"2. procedural"},{"location":"knowledge-base/general/software-development/terminology/#3-functional-programming","text":"use pure functions. Pure functions are those that do not use any state from other entities. Every function is a self-sufficient entity that just performs a complex transformation on given inputs to produce outputs. It doesn't modify the input and is practically isolated from rest of the program [2]. The need of this pure functions arose from the fact that impure functions lead to various problems. Since they don't produce the same output on the same input, it makes the code harder for others to understand, debug and extend. advantages [2]: Lazy Evaluations: Since pure functions directly operate on input and behave like a transformation, one can actually remember transformations and apply them only when needed. So, when an input goes through series of pure functions sequentially, one can evaluate all those later only when the result is asked for. Parallelization: Pure functions can be easily parallelized as they are independent of each other.","title":"3. functional programming"},{"location":"knowledge-base/general/software-development/terminology/#4-object-oriented-programming","text":"OOP is a programming paradigm based on a concept of entities (objects), which contains data (member variables) and behaviors (member functions) [2]. In OOP, computer programs are designed by making them out of objects interacting with one another. Every behavior of an object can possibly change the state ( member variables) of that object [2]. advantages Code reusability - Features like classes and inheritance make a lot of code reusable Encapsulation - Objects have abilities to hide a certain part of themselves from programmers. This prevents programmers tampering with things they shouldn't. Also, classes are designed to group related data implementing encapsulation [2]. Intuitiveness and Easy Design - It allows programmers to intuitively create large programs in a structured fashion. Extensible - Code in OOP is readable and much easier to maintain and modify compared to other paradigms","title":"4. Object-oriented Programming"},{"location":"knowledge-base/general/software-development/terminology/#programming-languge-features","text":"a programming language can described as [1]: modular : programs are made up of packages, which are made up of files. program broken into many modules which are independent of each other and interact only through a well-defined interface. 3. object-oriented statically-typed garbage-collected compiled: compiler takes the source code and translate it into machine language before execution. imperative. procedural.","title":"programming languge features"},{"location":"knowledge-base/general/software-development/terminology/#general","text":"statment : sequence of instructions. expression : the computation of a value by applying operators and functions to operands .","title":"general"},{"location":"knowledge-base/general/software-development/terminology/#functions","text":"parameters: vars in between parcanteces when you define the function. arguments: vars inside parantheces when you call the function.","title":"functions"},{"location":"knowledge-base/general/software-development/terminology/#memory-and-pointers","text":"Main memory is a sequence of storage locations Each location contains a value (content) and has a unique address A pointer is an address of a location allocated in main memory to store a value Pointer valued variables can store addresses of memory locations when a program sart executing, enough ammount of memory is reserved to this program. these reserved memory is bieng segmented to 3 segments 1 (segmentation) : stack segment. data segment code segment trying to access address of memory that is not bieng reserved to this program will give you segmentaion fault or error use of activation records in the stack to manage all local variables in this program. all local vars of all functions will be saved or reserved in the stack segment. Example:","title":"Memory and pointers"},{"location":"knowledge-base/general/software-development/terminology/#dynamic-vs-static","text":"static var: the var defined and has its own value before the program starts executing, therefor it will be placed in the stack when the program starts executing. dynamic: the var is not defined or has no value when the program starts executing, therefor the program will dynamically allocate memory for this var, this var will be placed in the heap.","title":"Dynamic vs Static"},{"location":"knowledge-base/general/software-development/terminology/#references","text":"[1] https://courses.edx.org/courses/course-v1:IITBombayX+CS101.2x+1T2020/course/ [2] https://courses.edx.org/courses/course-v1:IITBombayX+CS101.2x+1T2020/courseware/0bedc4e4756c42a9a704850dc93cffcf/ccab98a4b067400dabfe1ba3fd53a694/?activate_block_id=block-v1%3AIITBombayX%2BCS101.2x%2B1T2020%2Btype%40sequential%2Bblock%40ccab98a4b067400dabfe1ba3fd53a694","title":"References"},{"location":"knowledge-base/general/think/","text":"","title":"Index"},{"location":"knowledge-base/general/think/general/","text":"General keyword Description Markov Analysis clacualtes the propability of the next word after a specific word","title":"General"},{"location":"knowledge-base/general/think/general/#general","text":"keyword Description Markov Analysis clacualtes the propability of the next word after a specific word","title":"General"},{"location":"knowledge-base/general/think/thinking_logically_games/","text":"thinking_logically_games These interactive puzzles are taken from the Introduction to Discrete Mathematics for Computer Science specialization . They are optional, but we strongly encourage you to solve them: they will help you to \"invent\" the key algorithmic ideas on your own and will help you to solve the programming challenges. Even if you fail to solve some puzzles, the time will not be lost as you will better appreciate the beauty and power of the underlying ideas. games list: Balls in Boxes : Distribute N black balls among 10 boxes so that every two boxes have different number of balls (you can put 0 balls in some box if you want to). Fill in numbers of black balls in each box below. http://dm.compsciclub.ru/app/quiz-balls-in-boxes Activity selection Select as many non-overlapping segments as possible http://dm.compsciclub.ru/app/quiz-activity-selection Touch all segments Touch the given k segments with minimum number of vertical lines http://dm.compsciclub.ru/app/quiz-touch-all-segments Two Adjacent Cells of Opposite Colors You are given 20 black and white cells. The leftmost one is white, the rightmost one is black, the colors of all other cells are hidden. You can reveal the color of a cell by clicking on it. Your goal is to find two adjacent cells of different colors by using at most 5 clicks. http://dm.compsciclub.ru/app/quiz-opposite-colors","title":"thinking\\_logically\\_games"},{"location":"knowledge-base/general/think/thinking_logically_games/#thinking_logically_games","text":"These interactive puzzles are taken from the Introduction to Discrete Mathematics for Computer Science specialization . They are optional, but we strongly encourage you to solve them: they will help you to \"invent\" the key algorithmic ideas on your own and will help you to solve the programming challenges. Even if you fail to solve some puzzles, the time will not be lost as you will better appreciate the beauty and power of the underlying ideas.","title":"thinking_logically_games"},{"location":"knowledge-base/general/think/thinking_logically_games/#games-list","text":"","title":"games list:"},{"location":"knowledge-base/general/think/thinking_logically_games/#balls-in-boxes","text":"Distribute N black balls among 10 boxes so that every two boxes have different number of balls (you can put 0 balls in some box if you want to). Fill in numbers of black balls in each box below. http://dm.compsciclub.ru/app/quiz-balls-in-boxes","title":"Balls in Boxes :"},{"location":"knowledge-base/general/think/thinking_logically_games/#activity-selection","text":"Select as many non-overlapping segments as possible http://dm.compsciclub.ru/app/quiz-activity-selection","title":"Activity selection"},{"location":"knowledge-base/general/think/thinking_logically_games/#touch-all-segments","text":"Touch the given k segments with minimum number of vertical lines http://dm.compsciclub.ru/app/quiz-touch-all-segments","title":"Touch all segments"},{"location":"knowledge-base/general/think/thinking_logically_games/#two-adjacent-cells-of-opposite-colors","text":"You are given 20 black and white cells. The leftmost one is white, the rightmost one is black, the colors of all other cells are hidden. You can reveal the color of a cell by clicking on it. Your goal is to find two adjacent cells of different colors by using at most 5 clicks. http://dm.compsciclub.ru/app/quiz-opposite-colors","title":"Two Adjacent Cells of Opposite Colors"},{"location":"knowledge-base/general/tools/","text":"","title":"Index"},{"location":"knowledge-base/general/tools/bash/","text":"Bash shell intro intro ```js time // show the time date // show the date dd/mm/yyyy echo \"\" // print something path // show env vars path which // show the path for this program pwd // print working directory tail // show the last 10 lines of file tail -n1 // show the last line of file tee // open interactive to write to file line by line ``` cd js cd < relative path | absolute path > // move to that path cd ~ // go home cd - // go to previous path clear the terminal js clear // clear the terminal Ctrl + l // clear the console. File Tree ls js ls --help // ls help ls // show all files. ls -a // show all files, including hiddens. ls -l // show all files with details tree js tree // show only folder structure tree /f // show folders with files Handle files open files ```js cat file.ext // open file in the terminal ``` delete file js rm <file_name> // delete a file rm -r <directory_name> // delete a directory move, copy, rename files java mv <path1/file> <path2/file> // move file from path1 to path2 mv <path/file1> <path/file2> // rename file1 to be file2 cp <path1> <path2> // copy file from path to path cat < file1 > file2 // extract file1 content and store it in file2, copy file1 into file 2 edit files java echo \"something\" > file // create file and write something in it. symbol ( > file ) // bind the input stream to something, store something in file symbol ( < file) // bind the output stream to something, extract something from file cat file // print file content to the terminal cat < file // extract the content of file, and handle it as input to cat. cat < file1 > file2 // extract file1 content and store it in file2, copy file1 into file 2 cat < file1 >> file2 // extract file1 content and \"append\" it in file2, append file 2 symbol ( | ) // take the output of command to the left, make it input to the right ls -l | tail -n1 // show the last line only of the ls command, ls -l output will be input to tail -n1 Curl curl <url> : make get to url curl -v <url> : make get to the url with the request info curl -v -d \"<data>\" <url> : passing data to your request References [1] CAMBRIDGE: bash","title":"Bash"},{"location":"knowledge-base/general/tools/bash/#bash-shell","text":"","title":"Bash shell"},{"location":"knowledge-base/general/tools/bash/#intro","text":"intro ```js time // show the time date // show the date dd/mm/yyyy echo \"\" // print something path // show env vars path which // show the path for this program pwd // print working directory tail // show the last 10 lines of file tail -n1 // show the last line of file tee // open interactive to write to file line by line ``` cd js cd < relative path | absolute path > // move to that path cd ~ // go home cd - // go to previous path clear the terminal js clear // clear the terminal Ctrl + l // clear the console.","title":"intro"},{"location":"knowledge-base/general/tools/bash/#file-tree","text":"ls js ls --help // ls help ls // show all files. ls -a // show all files, including hiddens. ls -l // show all files with details tree js tree // show only folder structure tree /f // show folders with files","title":"File Tree"},{"location":"knowledge-base/general/tools/bash/#handle-files","text":"open files ```js cat file.ext // open file in the terminal ``` delete file js rm <file_name> // delete a file rm -r <directory_name> // delete a directory move, copy, rename files java mv <path1/file> <path2/file> // move file from path1 to path2 mv <path/file1> <path/file2> // rename file1 to be file2 cp <path1> <path2> // copy file from path to path cat < file1 > file2 // extract file1 content and store it in file2, copy file1 into file 2 edit files java echo \"something\" > file // create file and write something in it. symbol ( > file ) // bind the input stream to something, store something in file symbol ( < file) // bind the output stream to something, extract something from file cat file // print file content to the terminal cat < file // extract the content of file, and handle it as input to cat. cat < file1 > file2 // extract file1 content and store it in file2, copy file1 into file 2 cat < file1 >> file2 // extract file1 content and \"append\" it in file2, append file 2 symbol ( | ) // take the output of command to the left, make it input to the right ls -l | tail -n1 // show the last line only of the ls command, ls -l output will be input to tail -n1","title":"Handle files"},{"location":"knowledge-base/general/tools/bash/#curl","text":"curl <url> : make get to url curl -v <url> : make get to the url with the request info curl -v -d \"<data>\" <url> : passing data to your request","title":"Curl"},{"location":"knowledge-base/general/tools/bash/#references","text":"[1] CAMBRIDGE: bash","title":"References"},{"location":"knowledge-base/general/tools/docker/","text":"Docker alawys start by this command to start the defaul machine bash docker-machine start default Resource: Brad Traversy Help General if your using docker virtualbox make sure you open virtualbox and the machine is working while you are using the cmd you will not find your server on http://localhost:port or 0.0.0.0:port . you will find it on http://192.168.99.100:port docker images are like environments. ex: node.js docker containers are your own projects that are built on a specific image. when you create a container, if the image is not preveously downloaded on your machine it's going to be downloaded from docker hub . docker container run <-d | -it> -p <our_local_port>:<virtual_port_for_this_image> <image> docker volume is a way to pull a continer into your local file system and start editing it. commands docker version : show docker version docker info : show server and client info docker container run -it -p 80:80 <nginx> : create and run and publish docker container of enginx server on port 80 (default) in the foreground. docker container run -d -p 8080:80 --name <container_name> <image> : create and run a container in the background docker container < ls | ps > : list all running containers. docker container ls -a : list all containers wether they are running or not docker container rm <container_id> : delete a container with the id of :container_id from your system. docker images : list all images on your machine docker pull <image_name> : download the <image_name> from docker hub` docker stop <container_id> : stop a running container. docker ps : list all running containers. docker container run -d -p 3306:3306 --name <my_name> --env MYSQL_ROOT_PASSWORD=<pass> mysql : create mysql container with env variables which is password . docker container rm <contaier_name | container_id> -f : remove a running container. docker container exec -it mynginx bash : open the container file system interactively into bash command line create a volume and grap the files into your local machine docker container run -d -p 8080:80 -v /${pwd}://usr/share/nginx/html --name nginxwebsite nginx make sure to use extra / before your 2 paths as /${pwd} and //usr/share/nginx/hhtml on windows. push the current container to docker hub: bash docker push <username>/<repo_name> Edit contianer files Edit files of nginx container on the fly bash > docker container exec -it mynginx bash > ls > cd usr/share/nginx create a volume and grap the files into your local machine bash docker container run -d -p 8080:80 -v /${pwd}://usr/share/nginx/html --name nginxwebsite nginx make sure to use extra / before your 2 paths as /${pwd} and //usr/share/nginx/hhtml on windows. Docker-machine commands: ```javascript docker-machine ls // list all machines docker-machine start default // starts the default machine docker-machine stop default //stops the default machine ```","title":"Docker"},{"location":"knowledge-base/general/tools/docker/#docker","text":"alawys start by this command to start the defaul machine bash docker-machine start default Resource: Brad Traversy Help","title":"Docker"},{"location":"knowledge-base/general/tools/docker/#general","text":"if your using docker virtualbox make sure you open virtualbox and the machine is working while you are using the cmd you will not find your server on http://localhost:port or 0.0.0.0:port . you will find it on http://192.168.99.100:port docker images are like environments. ex: node.js docker containers are your own projects that are built on a specific image. when you create a container, if the image is not preveously downloaded on your machine it's going to be downloaded from docker hub . docker container run <-d | -it> -p <our_local_port>:<virtual_port_for_this_image> <image> docker volume is a way to pull a continer into your local file system and start editing it.","title":"General"},{"location":"knowledge-base/general/tools/docker/#commands","text":"docker version : show docker version docker info : show server and client info docker container run -it -p 80:80 <nginx> : create and run and publish docker container of enginx server on port 80 (default) in the foreground. docker container run -d -p 8080:80 --name <container_name> <image> : create and run a container in the background docker container < ls | ps > : list all running containers. docker container ls -a : list all containers wether they are running or not docker container rm <container_id> : delete a container with the id of :container_id from your system. docker images : list all images on your machine docker pull <image_name> : download the <image_name> from docker hub` docker stop <container_id> : stop a running container. docker ps : list all running containers. docker container run -d -p 3306:3306 --name <my_name> --env MYSQL_ROOT_PASSWORD=<pass> mysql : create mysql container with env variables which is password . docker container rm <contaier_name | container_id> -f : remove a running container. docker container exec -it mynginx bash : open the container file system interactively into bash command line create a volume and grap the files into your local machine docker container run -d -p 8080:80 -v /${pwd}://usr/share/nginx/html --name nginxwebsite nginx make sure to use extra / before your 2 paths as /${pwd} and //usr/share/nginx/hhtml on windows. push the current container to docker hub: bash docker push <username>/<repo_name>","title":"commands"},{"location":"knowledge-base/general/tools/docker/#edit-contianer-files","text":"Edit files of nginx container on the fly bash > docker container exec -it mynginx bash > ls > cd usr/share/nginx create a volume and grap the files into your local machine bash docker container run -d -p 8080:80 -v /${pwd}://usr/share/nginx/html --name nginxwebsite nginx make sure to use extra / before your 2 paths as /${pwd} and //usr/share/nginx/hhtml on windows. Docker-machine commands: ```javascript docker-machine ls // list all machines docker-machine start default // starts the default machine docker-machine stop default //stops the default machine ```","title":"Edit contianer files"},{"location":"knowledge-base/general/tools/git/","text":"Git Theory [1]: data types in git system: ```java / 1 / type blob = array // file = blob, contain text as bytes /* 2 */ type tree = map<string><tree | blog> // tree = folder, the string (name of folder) points to the //contents ( can be files or folders) (blobs or another tree) /* 3 */ type commit = struct { parents : array <commits> // the actual commit, snapchot of the whole contnet of the repo author : string message : string snapshot: commit } /* 4 */ type object = blob | tree | commit // we refer to any type with object /* 5 */ type objects = map <string><object> // the string (object name) points to the actual object /* 6 */ function store (object){ id = hash(object); // hash the object then store this hash in objects map, where it points to the actual object objects[id] = object; } /* 7 */ function load (id){ return objects[id]; // it retrives the actual object by its id (or hash) } /* 8 */ type references = map <string> <string> // maps the names I give to the hashes that git gives, // so I can access eather by hash or my name. ``` logging loging info about repo status: javascript git log --oneline --graph // list all commits, line for every commit git log --all --graph --decorate // more visual representation. log more data on a specific commit [1]: git git cat-file -p <commit hash> commits unstage last commit: javascript git reset --soft HEAD~1 // unstage last commit and keep the changes git reset --hard HEAD~1 // unstage last commit and discard the changes ** careful show diff: ```javascript git diff // shows diff between HEAD commit, and your files now for entire repo git diff // shows diff between HEAD commit, and your files now for specific file git diff / diff between commit1/branch1 and commit2/branch2 for all files / git diff / diff between commit1/branch1 and commit2/branch2 for specifi file. / git diff --cached // show the staged chunks ``` delete un staged changes : javascript git checkout <file name> // through away all un stagged changes git commit --amend // edit a commit\u2019s contents/message stage only part of the changes to one file (stage chunk of a file): js git add -p <file name> // open interactive terminal to choose which parts u want to commit git diff --cached // show the staged chunks show js git show <commit hash> // show deatailed info for that commit Undo changes discard all changes before staging or commiting them git git reset --hard - discard changes in one file: git git checkout -- <file> Branches list all branches: javascript git branch // all branches git branch -a // list local and remote branches git branch -r // list remote branches only git show-branch // list branches and their last commit git branch -vv // list all branches that my env is aware of in details. create Branches javascript git branch <branch name>; git checkout <branch name>; // create new branch, checkout to its git checkout -b <branch name> // create new branch, checkout to its delete branches javascript git branch -d <branch name> //delete branch locally git branch -D <branch name> // force delete branch locally, if the branch did not merged (force) git push origin --delete <branch name> // delete remote branch remove all deleted remote branches from local environment (list of branches in VS code)s: javascript git fetch --prune //rmove deleted branches from VS list merge branches: ```javascript git merge // merges brannc_name with the current branch you are in. git merge --abort // aborting merge command git merge --continue // continuing merge process after we resolve conflicts. ``` reslove conflicts: javascript git mergetool // opens interactive command line tool to resolve conflicts, or open your editor remote clone ```javascript git clone // clone remote repo to ur env with all version control history git clone --shallow // clone only the latest snapshot of remote repo to ur env. ``` fetch and pull: js git push // if u set upstream, u can push directly to the origin. git fetch <remote> <branch> // fetch changes in the remote branch, but don't merge them. git fetch <remote> <branch>; git merge; // fetch remote branch, merge it with the current branches git pull <remote> <branch> // fetch remote branch and merge it. handle remote branches: javascript git remote // list all remote repos git remote add <name> <url> // add remote repo, u can access it by name. git push <remote name> <local branch>:<remote branch> // push local branch content into remote branch. \"git branch --set-upstream-to=<remote_name>\" // setting the upstream as remote repo gitconfig git blame show whose and which commits resposible for particular challenges js git blame <file name> // show whose and which commits resposible for every line in the file git stash save changes temporarly without staging them, then retrive those changes later js git stash // save changes temprarly git stash pop // retrive stashed changes git rebase [2] The second way of combining work between branches is rebasing (first is merging). Rebasing takes a set of commits, \"copies\" them, and plops them down somewhere else. rebasing can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed. we have this situation: git rebase master the commit C3 still exists somewhere (it has a faded appearance in the tree), and C3' is the \"copy\" that we rebased onto master. git rebase bugfix Since master was an ancestor of bugFix, git simply moved the master branch reference forward in history. rebase commands: js git rebase <branch name> // rebase the parrelel branch into the main backbone of changes git rebase -i // interactive rebasing git bisect manually search history for something useful in find the first commit where something broke do binary search in the history references [1] CAMBRIDGE: lecture 6 : version control [2] learnbranching.js.org [3] successful git branching model","title":"Git"},{"location":"knowledge-base/general/tools/git/#git","text":"","title":"Git"},{"location":"knowledge-base/general/tools/git/#theory-1","text":"data types in git system: ```java / 1 / type blob = array // file = blob, contain text as bytes /* 2 */ type tree = map<string><tree | blog> // tree = folder, the string (name of folder) points to the //contents ( can be files or folders) (blobs or another tree) /* 3 */ type commit = struct { parents : array <commits> // the actual commit, snapchot of the whole contnet of the repo author : string message : string snapshot: commit } /* 4 */ type object = blob | tree | commit // we refer to any type with object /* 5 */ type objects = map <string><object> // the string (object name) points to the actual object /* 6 */ function store (object){ id = hash(object); // hash the object then store this hash in objects map, where it points to the actual object objects[id] = object; } /* 7 */ function load (id){ return objects[id]; // it retrives the actual object by its id (or hash) } /* 8 */ type references = map <string> <string> // maps the names I give to the hashes that git gives, // so I can access eather by hash or my name. ```","title":"Theory [1]:"},{"location":"knowledge-base/general/tools/git/#logging","text":"loging info about repo status: javascript git log --oneline --graph // list all commits, line for every commit git log --all --graph --decorate // more visual representation. log more data on a specific commit [1]: git git cat-file -p <commit hash>","title":"logging"},{"location":"knowledge-base/general/tools/git/#commits","text":"unstage last commit: javascript git reset --soft HEAD~1 // unstage last commit and keep the changes git reset --hard HEAD~1 // unstage last commit and discard the changes ** careful show diff: ```javascript git diff // shows diff between HEAD commit, and your files now for entire repo git diff // shows diff between HEAD commit, and your files now for specific file git diff / diff between commit1/branch1 and commit2/branch2 for all files / git diff / diff between commit1/branch1 and commit2/branch2 for specifi file. / git diff --cached // show the staged chunks ``` delete un staged changes : javascript git checkout <file name> // through away all un stagged changes git commit --amend // edit a commit\u2019s contents/message stage only part of the changes to one file (stage chunk of a file): js git add -p <file name> // open interactive terminal to choose which parts u want to commit git diff --cached // show the staged chunks show js git show <commit hash> // show deatailed info for that commit","title":"commits"},{"location":"knowledge-base/general/tools/git/#undo-changes","text":"discard all changes before staging or commiting them git git reset --hard - discard changes in one file: git git checkout -- <file>","title":"Undo changes"},{"location":"knowledge-base/general/tools/git/#branches","text":"list all branches: javascript git branch // all branches git branch -a // list local and remote branches git branch -r // list remote branches only git show-branch // list branches and their last commit git branch -vv // list all branches that my env is aware of in details. create Branches javascript git branch <branch name>; git checkout <branch name>; // create new branch, checkout to its git checkout -b <branch name> // create new branch, checkout to its delete branches javascript git branch -d <branch name> //delete branch locally git branch -D <branch name> // force delete branch locally, if the branch did not merged (force) git push origin --delete <branch name> // delete remote branch remove all deleted remote branches from local environment (list of branches in VS code)s: javascript git fetch --prune //rmove deleted branches from VS list merge branches: ```javascript git merge // merges brannc_name with the current branch you are in. git merge --abort // aborting merge command git merge --continue // continuing merge process after we resolve conflicts. ``` reslove conflicts: javascript git mergetool // opens interactive command line tool to resolve conflicts, or open your editor","title":"Branches"},{"location":"knowledge-base/general/tools/git/#remote","text":"clone ```javascript git clone // clone remote repo to ur env with all version control history git clone --shallow // clone only the latest snapshot of remote repo to ur env. ``` fetch and pull: js git push // if u set upstream, u can push directly to the origin. git fetch <remote> <branch> // fetch changes in the remote branch, but don't merge them. git fetch <remote> <branch>; git merge; // fetch remote branch, merge it with the current branches git pull <remote> <branch> // fetch remote branch and merge it. handle remote branches: javascript git remote // list all remote repos git remote add <name> <url> // add remote repo, u can access it by name. git push <remote name> <local branch>:<remote branch> // push local branch content into remote branch. \"git branch --set-upstream-to=<remote_name>\" // setting the upstream as remote repo","title":"remote"},{"location":"knowledge-base/general/tools/git/#gitconfig","text":"","title":"gitconfig"},{"location":"knowledge-base/general/tools/git/#git-blame","text":"show whose and which commits resposible for particular challenges js git blame <file name> // show whose and which commits resposible for every line in the file","title":"git blame"},{"location":"knowledge-base/general/tools/git/#git-stash","text":"save changes temporarly without staging them, then retrive those changes later js git stash // save changes temprarly git stash pop // retrive stashed changes","title":"git stash"},{"location":"knowledge-base/general/tools/git/#git-rebase-2","text":"The second way of combining work between branches is rebasing (first is merging). Rebasing takes a set of commits, \"copies\" them, and plops them down somewhere else. rebasing can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed. we have this situation: git rebase master the commit C3 still exists somewhere (it has a faded appearance in the tree), and C3' is the \"copy\" that we rebased onto master. git rebase bugfix Since master was an ancestor of bugFix, git simply moved the master branch reference forward in history. rebase commands: js git rebase <branch name> // rebase the parrelel branch into the main backbone of changes git rebase -i // interactive rebasing","title":"git rebase [2]"},{"location":"knowledge-base/general/tools/git/#git-bisect","text":"manually search history for something useful in find the first commit where something broke do binary search in the history","title":"git bisect"},{"location":"knowledge-base/general/tools/git/#references","text":"[1] CAMBRIDGE: lecture 6 : version control [2] learnbranching.js.org [3] successful git branching model","title":"references"},{"location":"knowledge-base/general/tools/grunt/","text":"Grunt task runners : simplfiy the pre-proccesses of deployment: grunt gulp . grunt : - npm i grunt - touch Gruntfile.js - npm i grunt-contrib-less time-grunt jit-grunt - npm i grunt-contrib-watch grunt-browser-sync - simple grunt file for watching and compieling .less files: ```javascript module.exports = function (grunt) { // Time how long tasks take. Can help when optimizing build times require(\"time-grunt\")(grunt); // Automatically load required Grunt tasks require(\"jit-grunt\")(grunt); // Define the configuration for all the tasks grunt.initConfig({ less: { css: { files: { \"css/styles.css\": \"css/styles.less\", }, }, }, watch: { files: \"css/*.less\", tasks: [\"less\"], }, browserSync: { dev: { bsFiles: { src: [\"css/*.css\", \"*.html\", \"js/*.js\"], }, options: { watchTask: true, server: { baseDir: \"./\", }, }, }, }, }); grunt.registerTask(\"css\", [\"less\"]); grunt.registerTask(\"default\", [\"browserSync\", \"watch\"]); }; ``` Grunt: at the cmd : grunt less => All .less files compiling into css. at the cmd : grunt => watching and compiling automatically for pre-deploy process we need: - grunt-contrib-copy : copying files to dist folder. grunt-contrib-clean : clean dist each time before run build grunt-contrib-imagemin : minimizing images. - grunt-contrib-concat : concat files. - grunt-contrib-cssmin : min css. grunt-contrib-htmlmin : min html. grunt-contrib-uglify : min js. grunt-filerev . - grunt-usemin : use all min files. Best resource for Grunt : https://www.coursera.org/learn/bootstrap-4/supplement/SIHkS/exercise-instructions-grunt-part-2","title":"Grunt"},{"location":"knowledge-base/general/tools/grunt/#grunt","text":"task runners : simplfiy the pre-proccesses of deployment: grunt gulp . grunt : - npm i grunt - touch Gruntfile.js - npm i grunt-contrib-less time-grunt jit-grunt - npm i grunt-contrib-watch grunt-browser-sync - simple grunt file for watching and compieling .less files: ```javascript module.exports = function (grunt) { // Time how long tasks take. Can help when optimizing build times require(\"time-grunt\")(grunt); // Automatically load required Grunt tasks require(\"jit-grunt\")(grunt); // Define the configuration for all the tasks grunt.initConfig({ less: { css: { files: { \"css/styles.css\": \"css/styles.less\", }, }, }, watch: { files: \"css/*.less\", tasks: [\"less\"], }, browserSync: { dev: { bsFiles: { src: [\"css/*.css\", \"*.html\", \"js/*.js\"], }, options: { watchTask: true, server: { baseDir: \"./\", }, }, }, }, }); grunt.registerTask(\"css\", [\"less\"]); grunt.registerTask(\"default\", [\"browserSync\", \"watch\"]); }; ``` Grunt: at the cmd : grunt less => All .less files compiling into css. at the cmd : grunt => watching and compiling automatically for pre-deploy process we need: - grunt-contrib-copy : copying files to dist folder. grunt-contrib-clean : clean dist each time before run build grunt-contrib-imagemin : minimizing images. - grunt-contrib-concat : concat files. - grunt-contrib-cssmin : min css. grunt-contrib-htmlmin : min html. grunt-contrib-uglify : min js. grunt-filerev . - grunt-usemin : use all min files. Best resource for Grunt : https://www.coursera.org/learn/bootstrap-4/supplement/SIHkS/exercise-instructions-grunt-part-2","title":"Grunt"},{"location":"knowledge-base/general/tools/linux/","text":"linux Notes Kill process on port 3000 fuser -k -n tcp 3000 sudo kill -9 `sudo lsof -t -i:3000` Show most consuming process top Show memory usage free -m Show file system df -h Kill all node process Killall node Check if there is node working netstat -an","title":"linux"},{"location":"knowledge-base/general/tools/linux/#linux","text":"","title":"linux"},{"location":"knowledge-base/general/tools/linux/#notes","text":"Kill process on port 3000 fuser -k -n tcp 3000 sudo kill -9 `sudo lsof -t -i:3000` Show most consuming process top Show memory usage free -m Show file system df -h Kill all node process Killall node Check if there is node working netstat -an","title":"Notes"},{"location":"knowledge-base/general/tools/shel_scripting/","text":"shell scripting intro intro ```java file.sh // file extention for shel files. $foo = \"bar\" // define foo echo $foo // print foo value echo \"something $foo\" // $foo is a variable, this won't work with single quote. echo \"something $( )\" // cmnd will be executed, and its value will be addeed to the string. $# // number of arguments $0 // comand name $1 - $9 // first - 9th argument $$ // Process identification number (PID) for the current script -ne // not equal convert image.{png,jpg} // convert image.png or image.jpg ``` comments .cmd files: shell @echo off rem your comment here rem another comment line .sh files: shell # your comment here # another comment line Execute run .sh files in cmd or powershell: shell Bash <file.sh> <args> sh <file.sh> <args> handy shell scripts create private github repo from the terminal: shell create=curl -H \"Authorization: token <token>\" -H \"Contnet-Type: application/json\" https://api.github.com/user/repos -d \"{ \\\"name\\\": \\\"$1\\\", \\\"private\\\": true }\" create private github repo and add it to the existing project: shell create-add=curl -H \"Authorization: token <token>\" -H \"Contnet-Type: application/json\" https://api.github.com/user/repos -d \"{ \\\"name\\\": \\\"$1\\\", \\\"private\\\": true }\" && git remote add origin https://github.com/<your github user name>/$1.git create folder and cd into it: shell mcd=mkdir $1 && cd $1 references: [1] CAMBRIDGE: shell scripting","title":"Shel scripting"},{"location":"knowledge-base/general/tools/shel_scripting/#shell-scripting","text":"","title":"shell scripting"},{"location":"knowledge-base/general/tools/shel_scripting/#intro","text":"intro ```java file.sh // file extention for shel files. $foo = \"bar\" // define foo echo $foo // print foo value echo \"something $foo\" // $foo is a variable, this won't work with single quote. echo \"something $( )\" // cmnd will be executed, and its value will be addeed to the string. $# // number of arguments $0 // comand name $1 - $9 // first - 9th argument $$ // Process identification number (PID) for the current script -ne // not equal convert image.{png,jpg} // convert image.png or image.jpg ```","title":"intro"},{"location":"knowledge-base/general/tools/shel_scripting/#comments","text":".cmd files: shell @echo off rem your comment here rem another comment line .sh files: shell # your comment here # another comment line","title":"comments"},{"location":"knowledge-base/general/tools/shel_scripting/#execute","text":"run .sh files in cmd or powershell: shell Bash <file.sh> <args> sh <file.sh> <args>","title":"Execute"},{"location":"knowledge-base/general/tools/shel_scripting/#handy-shell-scripts","text":"create private github repo from the terminal: shell create=curl -H \"Authorization: token <token>\" -H \"Contnet-Type: application/json\" https://api.github.com/user/repos -d \"{ \\\"name\\\": \\\"$1\\\", \\\"private\\\": true }\" create private github repo and add it to the existing project: shell create-add=curl -H \"Authorization: token <token>\" -H \"Contnet-Type: application/json\" https://api.github.com/user/repos -d \"{ \\\"name\\\": \\\"$1\\\", \\\"private\\\": true }\" && git remote add origin https://github.com/<your github user name>/$1.git create folder and cd into it: shell mcd=mkdir $1 && cd $1","title":"handy shell scripts"},{"location":"knowledge-base/general/tools/shel_scripting/#references","text":"[1] CAMBRIDGE: shell scripting","title":"references:"},{"location":"knowledge-base/general/tools/vim/","text":"vim intro vim modes normal : useful for navigating between files insert : type code replace: code you are writting replaces the previous visual select : 1. line 2. block command line mode : command shell from inside vim buttons in normal mode: ```js i // insert mode esc // back to normal mode r // replace mode v // visual mode Shift + v // select line ctrl + v // select block : // command line mode ``` Basic movement: hjkl (left, down, up, right) Words: w (next word), b (beginning of word), e (end of word) Lines: 0 (beginning of line), ^ (first non-blank character), $ (end of line) Screen: H (top of screen), M (middle of screen), L (bottom of screen) Scroll: Ctrl-u (up), Ctrl-d (down) File: gg (beginning of file), G (end of file) Line numbers: :{number} <CR> or {number}G (line {number}) Misc: % (corresponding item) Find: f{character}, t{character}, F{character}, T{character} find/to forward/backward {character} on the current line , / ; for navigating matches Search: /{regex}, n / N for navigating matches buttons in command line mode: js :q // quit without saving :w // save, don't exit Vim in VS Code you start in Normal mode: ```js / button / I, i // insert mode, type normally H // top of the Screen L // end of Screen M // middle of the Screen esc // back to normal mode j // next line k // previous line l // right one letter h // left one letter w // move one word e // end of the next word g > e // move to the previous word f > { char } // move to specific char in the line 0 // Moves to the first character of a line ^ // Moves to the first non-blank character of a line $ // Moves to the end of a line g_ // Moves to the non-blank character at the end of a line } // jumps entire paragraphs downwards { // similarly but upwards CTRL-D // let\u2019s you move down half a page CTRL-U // let\u2019s you move up half a page /{pattern} // to search forward inside a file ?{pattern} // to search backwards * // searchfor the word under the cursor { number } > { pattern } // execute the pattern n times like: 2 > j : moves down 2 lines. g > d // to jump to definition of whatever is under your cursor g > f // to jump to a file in an import g > g // to go to the top of the file {line} > g > g // to go to a specific line G // to go to the end of the file % // jump to matching ({[]}) ``` References [1] Cambridge: Vim","title":"Vim"},{"location":"knowledge-base/general/tools/vim/#vim","text":"","title":"vim"},{"location":"knowledge-base/general/tools/vim/#intro","text":"vim modes normal : useful for navigating between files insert : type code replace: code you are writting replaces the previous visual select : 1. line 2. block command line mode : command shell from inside vim","title":"intro"},{"location":"knowledge-base/general/tools/vim/#buttons-in-normal-mode","text":"```js i // insert mode esc // back to normal mode r // replace mode v // visual mode Shift + v // select line ctrl + v // select block : // command line mode ``` Basic movement: hjkl (left, down, up, right) Words: w (next word), b (beginning of word), e (end of word) Lines: 0 (beginning of line), ^ (first non-blank character), $ (end of line) Screen: H (top of screen), M (middle of screen), L (bottom of screen) Scroll: Ctrl-u (up), Ctrl-d (down) File: gg (beginning of file), G (end of file) Line numbers: :{number} <CR> or {number}G (line {number}) Misc: % (corresponding item) Find: f{character}, t{character}, F{character}, T{character} find/to forward/backward {character} on the current line , / ; for navigating matches Search: /{regex}, n / N for navigating matches","title":"buttons in normal mode:"},{"location":"knowledge-base/general/tools/vim/#buttons-in-command-line-mode","text":"js :q // quit without saving :w // save, don't exit","title":"buttons in command line mode:"},{"location":"knowledge-base/general/tools/vim/#vim-in-vs-code","text":"you start in Normal mode: ```js / button / I, i // insert mode, type normally H // top of the Screen L // end of Screen M // middle of the Screen esc // back to normal mode j // next line k // previous line l // right one letter h // left one letter w // move one word e // end of the next word g > e // move to the previous word f > { char } // move to specific char in the line 0 // Moves to the first character of a line ^ // Moves to the first non-blank character of a line $ // Moves to the end of a line g_ // Moves to the non-blank character at the end of a line } // jumps entire paragraphs downwards { // similarly but upwards CTRL-D // let\u2019s you move down half a page CTRL-U // let\u2019s you move up half a page /{pattern} // to search forward inside a file ?{pattern} // to search backwards * // searchfor the word under the cursor { number } > { pattern } // execute the pattern n times like: 2 > j : moves down 2 lines. g > d // to jump to definition of whatever is under your cursor g > f // to jump to a file in an import g > g // to go to the top of the file {line} > g > g // to go to a specific line G // to go to the end of the file % // jump to matching ({[]}) ```","title":"Vim in VS Code"},{"location":"knowledge-base/general/tools/vim/#references","text":"[1] Cambridge: Vim","title":"References"},{"location":"knowledge-base/general/tools/windows/","text":"Windows General notes it's fine to delete files that are no more than 24 hours old from c/windows/users/username/AppData/Temp freeing memory using cleanManager open task runner windowsIcon + R . type cleanmgr.exe then hit run. windows Powershell env path ```java $env:path // shows env path variables $env:Path -split ';' // show env path vars, single line for each var ``` ## UEFI and secure boot some new computers onlly allow windows to run, through their uefi settings. secure boot is the feature that prevent other system from runing. IMPORTANT: if you want in any case to change the boot path, you need to disable secuer boot from: start_computer > F2 > uefi settings.","title":"Windows"},{"location":"knowledge-base/general/tools/windows/#windows","text":"","title":"Windows"},{"location":"knowledge-base/general/tools/windows/#general-notes","text":"it's fine to delete files that are no more than 24 hours old from c/windows/users/username/AppData/Temp","title":"General notes"},{"location":"knowledge-base/general/tools/windows/#freeing-memory-using-cleanmanager","text":"open task runner windowsIcon + R . type cleanmgr.exe then hit run.","title":"freeing memory using cleanManager"},{"location":"knowledge-base/general/tools/windows/#windows-powershell","text":"env path ```java $env:path // shows env path variables $env:Path -split ';' // show env path vars, single line for each var ``` ## UEFI and secure boot some new computers onlly allow windows to run, through their uefi settings. secure boot is the feature that prevent other system from runing. IMPORTANT: if you want in any case to change the boot path, you need to disable secuer boot from: start_computer > F2 > uefi settings.","title":"windows Powershell"},{"location":"knowledge-base/general/web/","text":"","title":"Index"},{"location":"knowledge-base/general/web/dom/","text":"DOM input.value is alaways string, event if its type was number. client side temporary storage: javascript window.x = value; => window.x; window.localStorage.x = value; => window.loacalStorage.x; add event listener to the key and use the key name intead of key code. javascript window.addEventListener(\"key-event\", (event) => { event.key == \"arrowLeft\"; //you can use key name instead of key code. }); make textarea with inly one line and disable multilines: js <textarea rows=\"1\" value ={ value } > { value } </textare> textarea.onChange = (e) => { let x = e.target.value; // deleting every new line signs from textarea value x.replace(/(\\r\\n|\\n|\\r)/gm, \"\"); } sanitize third party code before inject it into your website using innerHTML javascript var sanitizeHTML = function (str) { var temp = document.createElement(\"div\"); temp.textContent = str; return temp.innerHTML; }; quickly check existance of a file using vanilla js: ```javascript function doesFileExist(urlToFile) { var xhr = new XMLHttpRequest(); xhr.open(\"HEAD\", urlToFile, false); xhr.send(); if (xhr.status == \"404\") { return false; } else { return true; } } ``` control scrolling: window.scrollTo(x, y); // x,y are the window cordinates. /* Using options: */ window.scrollTo({ top: x, left: y, behavior: 'smooth' }); browser hsitory: let x = window.history // Array of the nubmer of pages in the window history // you can go back and forth between pages x.goBack() x.foreward() // you can never extract the path from window.history extract the url that you are coming from: ```javascript let x = document.referrer // \"https://www.google.com/\" // you were in google page and they refer you to here ``` window location: javascript // typical window.location object Location = { href: \"https://www.w3schools.com/js/js_window_location.asp\", ancestorOrigins: DOMStringList, origin: \"https://www.w3schools.com\", protocol: \"https:\", host: \"www.w3schools.com\", pathname: \"/js/js_window_location.asp\" } respondWith() The respondWith() method of FetchEvent prevents the browser's default fetch handling, and allows you to provide a promise for a Response yourself. javascript addEventListener('fetch', event => { // Prevent the default, and handle the request ourselves. event.respondWith(async function() { // Try to get the response from a cache. const cachedResponse = await caches.match(event.request); // Return it if we found one. if (cachedResponse) return cachedResponse; // If we didn't find a match in the cache, use the network. return fetch(event.request); }()); }); window.localStorage save data into 'localStorage' object. saved data will be available on the client side, will stay if the tab closed or the session ended. no Expiary date. can be cleared only by javascript or clearing browser data for this website. data can be stored only as strings, so you need to use JSON.stringify() before saving. to retrieve the stringified saved data you need to use JSON.Parse() more: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage window.sessionStorage save data into sessionStorage objec. if the tab closed or session ended the data will be deleted . at most 5MB more: https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage window.IndexedDB clinet side SQL-like temporary storage. allows you to save a significant amount of data, including files/blobs more: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API FetchEvent.respondWith() more: https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith javascript fetchEvent.respondWith( // Promise that resolves to a Response. \u200b); Get list of all Dom elements var all = document.getElementsByTagName(\"*\"); Make post Request from the browser instead of postman js // you don't need the full url, the end point is fine. await fetch('/endpoint', { method: 'POST', Headers: { \"Content-Type\":\"application/json\" }, body: JSON.stringify({ Title: \"post0\", Post: \"first post req from browser\" }) }); Input Event after user finish typing instead of onChange ```js //setup before functions var typingTimer; //timer identifier var doneTypingInterval = 1000; //time in ms, 5 second for example //on keyup, start the countdown const waitAbitOnKeyUp = (e, i) => { clearTimeout(typingTimer); typingTimer = setTimeout(() => doneTyping(e, i), doneTypingInterval); }; //on keydown, clear the countdown const waitAbitOnKeyDown = () => { clearTimeout(typingTimer); }; //user is \"finished typing,\" do something function doneTyping(e, i) { //do something } ``` Resources Add to homescreen button form mobiles and new chrome desktop","title":"DOM"},{"location":"knowledge-base/general/web/dom/#dom","text":"input.value is alaways string, event if its type was number. client side temporary storage: javascript window.x = value; => window.x; window.localStorage.x = value; => window.loacalStorage.x; add event listener to the key and use the key name intead of key code. javascript window.addEventListener(\"key-event\", (event) => { event.key == \"arrowLeft\"; //you can use key name instead of key code. }); make textarea with inly one line and disable multilines: js <textarea rows=\"1\" value ={ value } > { value } </textare> textarea.onChange = (e) => { let x = e.target.value; // deleting every new line signs from textarea value x.replace(/(\\r\\n|\\n|\\r)/gm, \"\"); } sanitize third party code before inject it into your website using innerHTML javascript var sanitizeHTML = function (str) { var temp = document.createElement(\"div\"); temp.textContent = str; return temp.innerHTML; }; quickly check existance of a file using vanilla js: ```javascript function doesFileExist(urlToFile) { var xhr = new XMLHttpRequest(); xhr.open(\"HEAD\", urlToFile, false); xhr.send(); if (xhr.status == \"404\") { return false; } else { return true; } } ```","title":"DOM"},{"location":"knowledge-base/general/web/dom/#control-scrolling","text":"window.scrollTo(x, y); // x,y are the window cordinates. /* Using options: */ window.scrollTo({ top: x, left: y, behavior: 'smooth' });","title":"control scrolling:"},{"location":"knowledge-base/general/web/dom/#browser-hsitory","text":"let x = window.history // Array of the nubmer of pages in the window history // you can go back and forth between pages x.goBack() x.foreward() // you can never extract the path from window.history extract the url that you are coming from: ```javascript let x = document.referrer // \"https://www.google.com/\" // you were in google page and they refer you to here ``` window location: javascript // typical window.location object Location = { href: \"https://www.w3schools.com/js/js_window_location.asp\", ancestorOrigins: DOMStringList, origin: \"https://www.w3schools.com\", protocol: \"https:\", host: \"www.w3schools.com\", pathname: \"/js/js_window_location.asp\" } respondWith() The respondWith() method of FetchEvent prevents the browser's default fetch handling, and allows you to provide a promise for a Response yourself. javascript addEventListener('fetch', event => { // Prevent the default, and handle the request ourselves. event.respondWith(async function() { // Try to get the response from a cache. const cachedResponse = await caches.match(event.request); // Return it if we found one. if (cachedResponse) return cachedResponse; // If we didn't find a match in the cache, use the network. return fetch(event.request); }()); }); window.localStorage save data into 'localStorage' object. saved data will be available on the client side, will stay if the tab closed or the session ended. no Expiary date. can be cleared only by javascript or clearing browser data for this website. data can be stored only as strings, so you need to use JSON.stringify() before saving. to retrieve the stringified saved data you need to use JSON.Parse() more: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage","title":"browser hsitory:"},{"location":"knowledge-base/general/web/dom/#windowsessionstorage","text":"save data into sessionStorage objec. if the tab closed or session ended the data will be deleted . at most 5MB more: https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage","title":"window.sessionStorage"},{"location":"knowledge-base/general/web/dom/#windowindexeddb","text":"clinet side SQL-like temporary storage. allows you to save a significant amount of data, including files/blobs more: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API","title":"window.IndexedDB"},{"location":"knowledge-base/general/web/dom/#fetcheventrespondwith","text":"more: https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith javascript fetchEvent.respondWith( // Promise that resolves to a Response. \u200b);","title":"FetchEvent.respondWith()"},{"location":"knowledge-base/general/web/dom/#get-list-of-all-dom-elements","text":"var all = document.getElementsByTagName(\"*\");","title":"Get list of all Dom elements"},{"location":"knowledge-base/general/web/dom/#make-post-request-from-the-browser-instead-of-postman","text":"js // you don't need the full url, the end point is fine. await fetch('/endpoint', { method: 'POST', Headers: { \"Content-Type\":\"application/json\" }, body: JSON.stringify({ Title: \"post0\", Post: \"first post req from browser\" }) });","title":"Make post Request from the browser instead of postman"},{"location":"knowledge-base/general/web/dom/#input-event-after-user-finish-typing-instead-of-onchange","text":"```js //setup before functions var typingTimer; //timer identifier var doneTypingInterval = 1000; //time in ms, 5 second for example //on keyup, start the countdown const waitAbitOnKeyUp = (e, i) => { clearTimeout(typingTimer); typingTimer = setTimeout(() => doneTyping(e, i), doneTypingInterval); }; //on keydown, clear the countdown const waitAbitOnKeyDown = () => { clearTimeout(typingTimer); }; //user is \"finished typing,\" do something function doneTyping(e, i) { //do something } ```","title":"Input Event after user finish typing instead of onChange"},{"location":"knowledge-base/general/web/dom/#resources","text":"Add to homescreen button form mobiles and new chrome desktop","title":"Resources"},{"location":"knowledge-base/general/web/fonts/","text":"Fonts I like 1- Roboto 2- Raleway light 3- prompt bold","title":"Fonts I like"},{"location":"knowledge-base/general/web/fonts/#fonts-i-like","text":"1- Roboto 2- Raleway light 3- prompt bold","title":"Fonts I like"},{"location":"knowledge-base/general/web/meta/","text":"Meta check if your client using mobile or not: javascript function isMobile() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( window.navigator.userAgent ); } dowonloading a file without user approval **: javascript function downloadFile(url, name) { const elink = document.createElement(\"a\"); elink.style.display = \"none\"; elink.href = url; elink.download = name; document.body.appendChild(elink); elink.click(); document.body.removeChild(elink); }","title":"Meta"},{"location":"knowledge-base/general/web/meta/#meta","text":"check if your client using mobile or not: javascript function isMobile() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( window.navigator.userAgent ); } dowonloading a file without user approval **: javascript function downloadFile(url, name) { const elink = document.createElement(\"a\"); elink.style.display = \"none\"; elink.href = url; elink.download = name; document.body.appendChild(elink); elink.click(); document.body.removeChild(elink); }","title":"Meta"},{"location":"knowledge-base/general/web/pwa/","text":"Progressive Web Apps PWA start here https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers follow this checklist to make sure you have PWA https://web.dev/pwa-checklist/ Regeister worker life cycle Regester => Install => Activate => fetch you can add event listener to each one of them. caching statc files happens in install caching dynamically happens in fetch Register inside main html file. markup <script> if ('serviceWorker' in navigator) { window.addEventListener('load', function() { navigator.serviceWorker .register('dynamicWorker.js') .then( function(registration) { // Registration was successful console.log( 'ServiceWorker registration successful with scope: ', registration.scope ) }, function(err) { // registration failed :( console.log('ServiceWorker registration failed: ', err) } ) .catch(function(err) { console.log(err) }) }) } else { console.log('service worker is not supported') } </script> install and activate inside serviceWorker.js ```js self.addEventListener('install', function(event) { event.waitUntil( fetchStuffAndInitDatabases\\(\\) ); }); self.addEventListener('activate', function(event) { // You're good to go! }); ### fetch - inside `serviceWorker.js` - listening to any fetch request from the client. ```js // fetch event self.addEventListener('fetch', (e) => { console.log('fetching ....................'); e.respondWith( fetch(e.request) .then(res => { // copy the reponse const resClone = res.clone(); //caching the response dynamically caches.open(currentChacheName).then(cache => { // puting in the cache cache.put(e.request, resClone); }) // preceeding with the response return res; }) // if no reponse .catch((err) => caches.match(e.request).then(res => res) )) }) getInstalledRelatedApps() checks if your app installed or not. https://web.dev/get-installed-related-apps/ BeforeInstallPromptEvent https://developer.mozilla.org/en-US/docs/Web/API/BeforeInstallPromptEvent What does it take to be installable? https://web.dev/install-criteria/ Add a web app manifest https://web.dev/add-manifest/ ways to prompt installations for your app https://web.dev/promote-install/ Examples https://web.dev/codelab-make-installable/ https://github.com/mdn/pwa-examples resourses google official documentaions service worker Explained official react pwa documentation service worker Extensive Google docs","title":"Progressive Web Apps PWA"},{"location":"knowledge-base/general/web/pwa/#progressive-web-apps-pwa","text":"","title":"Progressive Web Apps PWA"},{"location":"knowledge-base/general/web/pwa/#start-here","text":"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers","title":"start here"},{"location":"knowledge-base/general/web/pwa/#follow-this-checklist-to-make-sure-you-have-pwa","text":"https://web.dev/pwa-checklist/","title":"follow this checklist to make sure you have PWA"},{"location":"knowledge-base/general/web/pwa/#regeister-worker-life-cycle","text":"Regester => Install => Activate => fetch you can add event listener to each one of them. caching statc files happens in install caching dynamically happens in fetch","title":"Regeister worker life cycle"},{"location":"knowledge-base/general/web/pwa/#register","text":"inside main html file. markup <script> if ('serviceWorker' in navigator) { window.addEventListener('load', function() { navigator.serviceWorker .register('dynamicWorker.js') .then( function(registration) { // Registration was successful console.log( 'ServiceWorker registration successful with scope: ', registration.scope ) }, function(err) { // registration failed :( console.log('ServiceWorker registration failed: ', err) } ) .catch(function(err) { console.log(err) }) }) } else { console.log('service worker is not supported') } </script>","title":"Register"},{"location":"knowledge-base/general/web/pwa/#install-and-activate","text":"inside serviceWorker.js ```js self.addEventListener('install', function(event) { event.waitUntil( fetchStuffAndInitDatabases\\(\\) ); }); self.addEventListener('activate', function(event) { // You're good to go! }); ### fetch - inside `serviceWorker.js` - listening to any fetch request from the client. ```js // fetch event self.addEventListener('fetch', (e) => { console.log('fetching ....................'); e.respondWith( fetch(e.request) .then(res => { // copy the reponse const resClone = res.clone(); //caching the response dynamically caches.open(currentChacheName).then(cache => { // puting in the cache cache.put(e.request, resClone); }) // preceeding with the response return res; }) // if no reponse .catch((err) => caches.match(e.request).then(res => res) )) })","title":"install and activate"},{"location":"knowledge-base/general/web/pwa/#getinstalledrelatedapps","text":"checks if your app installed or not. https://web.dev/get-installed-related-apps/","title":"getInstalledRelatedApps()"},{"location":"knowledge-base/general/web/pwa/#beforeinstallpromptevent","text":"https://developer.mozilla.org/en-US/docs/Web/API/BeforeInstallPromptEvent","title":"BeforeInstallPromptEvent"},{"location":"knowledge-base/general/web/pwa/#what-does-it-take-to-be-installable","text":"https://web.dev/install-criteria/","title":"What does it take to be installable?"},{"location":"knowledge-base/general/web/pwa/#add-a-web-app-manifest","text":"https://web.dev/add-manifest/","title":"Add a web app manifest"},{"location":"knowledge-base/general/web/pwa/#ways-to-prompt-installations-for-your-app","text":"https://web.dev/promote-install/","title":"ways to prompt installations for your app"},{"location":"knowledge-base/general/web/pwa/#examples","text":"https://web.dev/codelab-make-installable/ https://github.com/mdn/pwa-examples","title":"Examples"},{"location":"knowledge-base/general/web/pwa/#resourses","text":"google official documentaions service worker Explained official react pwa documentation service worker Extensive Google docs","title":"resourses"},{"location":"knowledge-base/general/web/seo/","text":"SEO retrieve how google caching your website, visit: javascript cache: example.com; refresh yuor sitemap: javascript https://www.google.com/ping?sitemap=`url to your siteMap` social media tags: markup <meta property=\"og:title\" content=\"#\" /> <meta property=\"og:description\" content=\"#\" /> <meta property=\"og:image\" content=\"#\" /> <meta property=\"og:url\" content=\"#\" /> <meta name=\"twitter:card\" content=\"#\" /> <meta name=\"twitter:image\" content=\"#\" /> <meta name=\"author\" content=\"[Author name here]\" />","title":"SEO"},{"location":"knowledge-base/general/web/seo/#seo","text":"retrieve how google caching your website, visit: javascript cache: example.com; refresh yuor sitemap: javascript https://www.google.com/ping?sitemap=`url to your siteMap` social media tags: markup <meta property=\"og:title\" content=\"#\" /> <meta property=\"og:description\" content=\"#\" /> <meta property=\"og:image\" content=\"#\" /> <meta property=\"og:url\" content=\"#\" /> <meta name=\"twitter:card\" content=\"#\" /> <meta name=\"twitter:image\" content=\"#\" /> <meta name=\"author\" content=\"[Author name here]\" />","title":"SEO"},{"location":"knowledge-base/general/web/urls/","text":"URLs chain of funtions to hanlde urls: ```javascript function getExt(url) { if (url.includes(\"?\")) { return getExt(url.split(\"?\")[0]); } if (url.includes(\"#\")) { return getExt(url.split(\"#\")[0]); } //change those functions depends on the situation return url.trim().toLowerCase().split(\".\").pop(); } ``` regular expressions again, to handle urls: javascript let regex = /^(?<start>https|http)?(?<colon_slashes>:\\/\\/)?(?<three_w>www.)?(?<main>[\\w\\-\\_\\:]+)(?<dot_com>\\.[\\w]+)\\/*(?<text1>[\\w\\-\\_\\#\\?\\&\\=]*)\\/*(?<text2>[\\w\\-\\_\\#\\?\\&\\=]*)\\/*(?<text3>[\\w\\-\\_\\#\\?\\&\\=]*)/;","title":"URLs"},{"location":"knowledge-base/general/web/urls/#urls","text":"chain of funtions to hanlde urls: ```javascript function getExt(url) { if (url.includes(\"?\")) { return getExt(url.split(\"?\")[0]); } if (url.includes(\"#\")) { return getExt(url.split(\"#\")[0]); } //change those functions depends on the situation return url.trim().toLowerCase().split(\".\").pop(); } ``` regular expressions again, to handle urls: javascript let regex = /^(?<start>https|http)?(?<colon_slashes>:\\/\\/)?(?<three_w>www.)?(?<main>[\\w\\-\\_\\:]+)(?<dot_com>\\.[\\w]+)\\/*(?<text1>[\\w\\-\\_\\#\\?\\&\\=]*)\\/*(?<text2>[\\w\\-\\_\\#\\?\\&\\=]*)\\/*(?<text3>[\\w\\-\\_\\#\\?\\&\\=]*)/;","title":"URLs"},{"location":"knowledge-base/todo/to_learn/","text":"list of things to learn more about them web handlers can be used to manage tab communication and synchronization: The Web Locks API SharedWorker BroadcastChannel postMessage unload localStorage and sessionStorage. shape detection API new standard payment request API page visibility api - another resource web share api - second resource - third resource web share target push api","title":"list of things to learn more about them"},{"location":"knowledge-base/todo/to_learn/#list-of-things-to-learn-more-about-them","text":"","title":"list of things to learn more about them"},{"location":"knowledge-base/todo/to_learn/#web","text":"handlers can be used to manage tab communication and synchronization: The Web Locks API SharedWorker BroadcastChannel postMessage unload localStorage and sessionStorage. shape detection API new standard payment request API page visibility api - another resource web share api - second resource - third resource web share target push api","title":"web"},{"location":"knowledge-base/todo/to_record/","text":"Things I need to make a videos about delaying heavy react component after others loaded so it does not block the whole App. Error: can not set headers after they set to the client. passing react props in the most efficent way.","title":"Things I need to make a videos about"},{"location":"knowledge-base/todo/to_record/#things-i-need-to-make-a-videos-about","text":"delaying heavy react component after others loaded so it does not block the whole App. Error: can not set headers after they set to the client. passing react props in the most efficent way.","title":"Things I need to make a videos about"},{"location":"projects/projects/","text":"list of live projects: Restaurante con Fusion: view Live -- code tv Shows: view live portfolio: view live -- code slider from scratch: view live -- code valency number calculator live and code codeWars katas human readable time: https://www.codewars.com/kata/52685f7382004e774f0001f7 valid parenthesis : https://www.codewars.com/kata/52774a314c2333f0a7000688 moving zeros : https://www.codewars.com/kata/52597aa56021e91c93000cb0/ Replacement: https://www.codewars.com/kata/598d89971928a085c000001a/solutions/javascript/me/best_practice Break camelCase: https://www.codewars.com/kata/5208f99aee097e6552000148/solutions/javascript/me/best_practice","title":"list of live projects:"},{"location":"projects/projects/#list-of-live-projects","text":"Restaurante con Fusion: view Live -- code tv Shows: view live portfolio: view live -- code slider from scratch: view live -- code valency number calculator live and code","title":"list of live projects:"},{"location":"projects/projects/#codewars-katas","text":"human readable time: https://www.codewars.com/kata/52685f7382004e774f0001f7 valid parenthesis : https://www.codewars.com/kata/52774a314c2333f0a7000688 moving zeros : https://www.codewars.com/kata/52597aa56021e91c93000cb0/ Replacement: https://www.codewars.com/kata/598d89971928a085c000001a/solutions/javascript/me/best_practice Break camelCase: https://www.codewars.com/kata/5208f99aee097e6552000148/solutions/javascript/me/best_practice","title":"codeWars katas"}]}